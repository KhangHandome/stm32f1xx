
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000fe8  08000fe8  00010fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800101c  0800101c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800101c  0800101c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800101c  0800101c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000000c  08001030  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08001030  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002926  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e15  00000000  00000000  0002299e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  000237b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002b0  00000000  00000000  00023b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000158ab  00000000  00000000  00023e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000472d  00000000  00000000  000396db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007b957  00000000  00000000  0003de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d04  00000000  00000000  000b9760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000ba464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000fd0 	.word	0x08000fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000fd0 	.word	0x08000fd0

0800014c <HAL_UART_Send_Char>:

static void HAL_UART_Send_Char(USART_TypeDef* usart, uint8_t c);
uint8_t data[32];
// Gửi 1 ký tự
static void HAL_UART_Send_Char(USART_TypeDef* usart, uint8_t c)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
    while (!(usart->SR & USART_SR_TXE)) {
 8000158:	bf00      	nop
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000162:	2b00      	cmp	r3, #0
 8000164:	d0f9      	beq.n	800015a <HAL_UART_Send_Char+0xe>
        // chờ tới khi TXE (Transmit data register empty) được set
    }
    usart->DR = c;
 8000166:	78fa      	ldrb	r2, [r7, #3]
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	605a      	str	r2, [r3, #4]
}
 800016c:	bf00      	nop
 800016e:	370c      	adds	r7, #12
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
	...

08000178 <HAL_UART_Init>:

// Khởi tạo UART
void HAL_UART_Init(USART_TypeDef* usart)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
    if (usart == USART1) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	4a48      	ldr	r2, [pc, #288]	; (80002a4 <HAL_UART_Init+0x12c>)
 8000184:	4293      	cmp	r3, r2
 8000186:	d11a      	bne.n	80001be <HAL_UART_Init+0x46>
        // Bật clock cho GPIOA và USART1
    	RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 8000188:	4b47      	ldr	r3, [pc, #284]	; (80002a8 <HAL_UART_Init+0x130>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a46      	ldr	r2, [pc, #280]	; (80002a8 <HAL_UART_Init+0x130>)
 800018e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000192:	f043 0305 	orr.w	r3, r3, #5
 8000196:	6193      	str	r3, [r2, #24]
    	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000198:	4b43      	ldr	r3, [pc, #268]	; (80002a8 <HAL_UART_Init+0x130>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a42      	ldr	r2, [pc, #264]	; (80002a8 <HAL_UART_Init+0x130>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6153      	str	r3, [r2, #20]

        /*PA9: TX
         * PA10 : RX
         * */
        GPIOA->CRH |= (0x3 << GPIO_CRH_MODE9_Pos); // Set pa9 to output max speed 50Mhz
 80001a4:	4b41      	ldr	r3, [pc, #260]	; (80002ac <HAL_UART_Init+0x134>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a40      	ldr	r2, [pc, #256]	; (80002ac <HAL_UART_Init+0x134>)
 80001aa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80001ae:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= (0x2 << GPIO_CRH_CNF9_Pos ); // Set pa9 to output alternative function push pull
 80001b0:	4b3e      	ldr	r3, [pc, #248]	; (80002ac <HAL_UART_Init+0x134>)
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	4a3d      	ldr	r2, [pc, #244]	; (80002ac <HAL_UART_Init+0x134>)
 80001b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001ba:	6053      	str	r3, [r2, #4]
 80001bc:	e033      	b.n	8000226 <HAL_UART_Init+0xae>
        /* */

    } else if (usart == USART2) {
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4a3b      	ldr	r2, [pc, #236]	; (80002b0 <HAL_UART_Init+0x138>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d12f      	bne.n	8000226 <HAL_UART_Init+0xae>
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80001c6:	4b38      	ldr	r3, [pc, #224]	; (80002a8 <HAL_UART_Init+0x130>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	4a37      	ldr	r2, [pc, #220]	; (80002a8 <HAL_UART_Init+0x130>)
 80001cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001d0:	61d3      	str	r3, [r2, #28]
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001d2:	4b35      	ldr	r3, [pc, #212]	; (80002a8 <HAL_UART_Init+0x130>)
 80001d4:	699b      	ldr	r3, [r3, #24]
 80001d6:	4a34      	ldr	r2, [pc, #208]	; (80002a8 <HAL_UART_Init+0x130>)
 80001d8:	f043 0304 	orr.w	r3, r3, #4
 80001dc:	6193      	str	r3, [r2, #24]

        // PA2 = TX, PA3 = RX
        GPIOA->CRL &= ~GPIO_CRL_CNF2;
 80001de:	4b33      	ldr	r3, [pc, #204]	; (80002ac <HAL_UART_Init+0x134>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a32      	ldr	r2, [pc, #200]	; (80002ac <HAL_UART_Init+0x134>)
 80001e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001e8:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF2_1;
 80001ea:	4b30      	ldr	r3, [pc, #192]	; (80002ac <HAL_UART_Init+0x134>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4a2f      	ldr	r2, [pc, #188]	; (80002ac <HAL_UART_Init+0x134>)
 80001f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001f4:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_MODE2;
 80001f6:	4b2d      	ldr	r3, [pc, #180]	; (80002ac <HAL_UART_Init+0x134>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <HAL_UART_Init+0x134>)
 80001fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000200:	6013      	str	r3, [r2, #0]

        GPIOA->CRL &= ~GPIO_CRL_CNF3;
 8000202:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <HAL_UART_Init+0x134>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a29      	ldr	r2, [pc, #164]	; (80002ac <HAL_UART_Init+0x134>)
 8000208:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800020c:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF3_0;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <HAL_UART_Init+0x134>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a26      	ldr	r2, [pc, #152]	; (80002ac <HAL_UART_Init+0x134>)
 8000214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000218:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &= ~GPIO_CRL_MODE3;
 800021a:	4b24      	ldr	r3, [pc, #144]	; (80002ac <HAL_UART_Init+0x134>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a23      	ldr	r2, [pc, #140]	; (80002ac <HAL_UART_Init+0x134>)
 8000220:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000224:	6013      	str	r3, [r2, #0]
    }

    // Cấu hình Baudrate = 9600 với PCLK = 72MHz → USARTDIV ≈ 468.75
    // BRR = mantissa << 4 | fraction = 468 << 4 | 12 = 0x1D2C
    usart->BRR = (52 << 4) | 1; // Mới, dành cho 8MHz
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f240 3241 	movw	r2, #833	; 0x341
 800022c:	609a      	str	r2, [r3, #8]

    // Enable Transmit, Receive, and USART
    usart->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f043 020c 	orr.w	r2, r3, #12
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	60da      	str	r2, [r3, #12]
    usart->CR3 |= USART_CR3_DMAR;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	615a      	str	r2, [r3, #20]
    usart->CR1 |= USART_CR1_UE;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	60da      	str	r2, [r3, #12]
//    NVIC->ISER[USART1_IRQn/32] |= (1 << (USART1_IRQn % 32)) ;

    /*Using dma to receive data */
    /*Enable bit DMA in usart */

    DMA1_Channel5->CCR |= DMA_CCR_MINC | DMA_CCR_CIRC | (0x02 << DMA_CCR_PL_Pos);
 8000252:	4b18      	ldr	r3, [pc, #96]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a17      	ldr	r2, [pc, #92]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000258:	f443 5302 	orr.w	r3, r3, #8320	; 0x2080
 800025c:	f043 0320 	orr.w	r3, r3, #32
 8000260:	6013      	str	r3, [r2, #0]

    DMA1_Channel5->CNDTR = 4;
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000264:	2204      	movs	r2, #4
 8000266:	605a      	str	r2, [r3, #4]
    DMA1_Channel5->CPAR  = (uint32_t)&(usart->DR);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	1d1a      	adds	r2, r3, #4
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <HAL_UART_Init+0x13c>)
 800026e:	609a      	str	r2, [r3, #8]
    DMA1_Channel5->CMAR  = (uint32_t)data ;
 8000270:	4b10      	ldr	r3, [pc, #64]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000272:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <HAL_UART_Init+0x140>)
 8000274:	60da      	str	r2, [r3, #12]


    DMA1_Channel5->CCR |= DMA_CCR_TCIE;
 8000276:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <HAL_UART_Init+0x13c>)
 800027c:	f043 0302 	orr.w	r3, r3, #2
 8000280:	6013      	str	r3, [r2, #0]
    DMA1_Channel5->CCR |= DMA_CCR_EN;
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <HAL_UART_Init+0x13c>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6013      	str	r3, [r2, #0]
    NVIC->ISER[DMA1_Channel5_IRQn/32] |= (1 << (DMA1_Channel5_IRQn % 32)) ;
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <HAL_UART_Init+0x144>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <HAL_UART_Init+0x144>)
 8000294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000298:	6013      	str	r3, [r2, #0]

}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40013800 	.word	0x40013800
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40004400 	.word	0x40004400
 80002b4:	40020058 	.word	0x40020058
 80002b8:	20000028 	.word	0x20000028
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    if (DMA1->ISR & DMA_ISR_TCIF5) {
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <DMA1_Channel5_IRQHandler+0x24>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d005      	beq.n	80002dc <DMA1_Channel5_IRQHandler+0x1c>
        DMA1->IFCR |= DMA_IFCR_CTCIF5; // Clear interrupt flag
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <DMA1_Channel5_IRQHandler+0x24>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <DMA1_Channel5_IRQHandler+0x24>)
 80002d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002da:	6053      	str	r3, [r2, #4]

        // Xử lý dữ liệu ở đây nếu cần
        // Ví dụ: parse `data[]` hoặc đặt cờ cho ứng dụng biết dữ liệu đã có
    }
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40020000 	.word	0x40020000

080002e8 <USART1_IRQHandler>:
void USART1_IRQHandler()
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
	uint8_t a = 0 ;
 80002ee:	2300      	movs	r3, #0
 80002f0:	71fb      	strb	r3, [r7, #7]
	a = (USART1->DR & 0xFF);
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <USART1_IRQHandler+0x1c>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	71fb      	strb	r3, [r7, #7]

	//Interrupt is here
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40013800 	.word	0x40013800

08000308 <HAL_UART_Send>:
// Gửi chuỗi ký tự (kết thúc bằng ký tự '\n')
void HAL_UART_Send(USART_TypeDef* usart, uint8_t* str)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	81fb      	strh	r3, [r7, #14]
    while (str[index] != '\n') {
 8000316:	e00a      	b.n	800032e <HAL_UART_Send+0x26>
        HAL_UART_Send_Char(usart, str[index]);
 8000318:	89fb      	ldrh	r3, [r7, #14]
 800031a:	683a      	ldr	r2, [r7, #0]
 800031c:	4413      	add	r3, r2
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4619      	mov	r1, r3
 8000322:	6878      	ldr	r0, [r7, #4]
 8000324:	f7ff ff12 	bl	800014c <HAL_UART_Send_Char>
        index++;
 8000328:	89fb      	ldrh	r3, [r7, #14]
 800032a:	3301      	adds	r3, #1
 800032c:	81fb      	strh	r3, [r7, #14]
    while (str[index] != '\n') {
 800032e:	89fb      	ldrh	r3, [r7, #14]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	4413      	add	r3, r2
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b0a      	cmp	r3, #10
 8000338:	d1ee      	bne.n	8000318 <HAL_UART_Send+0x10>
    }
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	3710      	adds	r7, #16
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t read = 0 ;
 800034a:	2300      	movs	r3, #0
 800034c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034e:	f000 f8ef 	bl	8000530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000352:	f000 f80f 	bl	8000374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000356:	f000 f849 	bl	80003ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(USART1);
 800035a:	4804      	ldr	r0, [pc, #16]	; (800036c <main+0x28>)
 800035c:	f7ff ff0c 	bl	8000178 <HAL_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Send(USART1, (uint8_t*)("Khang handsome\n"));
 8000360:	4903      	ldr	r1, [pc, #12]	; (8000370 <main+0x2c>)
 8000362:	4802      	ldr	r0, [pc, #8]	; (800036c <main+0x28>)
 8000364:	f7ff ffd0 	bl	8000308 <HAL_UART_Send>
  while (1)
 8000368:	e7fe      	b.n	8000368 <main+0x24>
 800036a:	bf00      	nop
 800036c:	40013800 	.word	0x40013800
 8000370:	08000fe8 	.word	0x08000fe8

08000374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b090      	sub	sp, #64	; 0x40
 8000378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037a:	f107 0318 	add.w	r3, r7, #24
 800037e:	2228      	movs	r2, #40	; 0x28
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f000 fdf8 	bl	8000f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000396:	2302      	movs	r3, #2
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039e:	2310      	movs	r3, #16
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a2:	2300      	movs	r3, #0
 80003a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0318 	add.w	r3, r7, #24
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 fa06 	bl	80007bc <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003b6:	f000 f82f 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003be:	2300      	movs	r3, #0
 80003c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f000 fc74 	bl	8000cc0 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003de:	f000 f81b 	bl	8000418 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	; 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <MX_GPIO_Init+0x28>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <MX_GPIO_Init+0x28>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <MX_GPIO_Init+0x28>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0304 	and.w	r3, r3, #4
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040a:	bf00      	nop
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr
 8000414:	40021000 	.word	0x40021000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a14      	ldr	r2, [pc, #80]	; (8000480 <HAL_MspInit+0x5c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <HAL_MspInit+0x5c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_MspInit+0x60>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	; (8000484 <HAL_MspInit+0x60>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x4>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ce:	f000 f875 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff fff7 	bl	80004d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ea:	490c      	ldr	r1, [pc, #48]	; (800051c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000500:	4c09      	ldr	r4, [pc, #36]	; (8000528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f000 fd3b 	bl	8000f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff ff17 	bl	8000344 <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000520:	08001024 	.word	0x08001024
  ldr r2, =_sbss
 8000524:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000528:	2000004c 	.word	0x2000004c

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f907 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	200f      	movs	r0, #15
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff6a 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f911 	bl	80007a2 <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f8e7 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_IncTick+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <HAL_IncTick+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000048 	.word	0x20000048

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000048 	.word	0x20000048

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff90 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff49 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5e 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff90 	bl	80006ac <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5f 	bl	8000658 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e272      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f000 8087 	beq.w	80008ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007dc:	4b92      	ldr	r3, [pc, #584]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f003 030c 	and.w	r3, r3, #12
 80007e4:	2b04      	cmp	r3, #4
 80007e6:	d00c      	beq.n	8000802 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007e8:	4b8f      	ldr	r3, [pc, #572]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 030c 	and.w	r3, r3, #12
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d112      	bne.n	800081a <HAL_RCC_OscConfig+0x5e>
 80007f4:	4b8c      	ldr	r3, [pc, #560]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000800:	d10b      	bne.n	800081a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000802:	4b89      	ldr	r3, [pc, #548]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080a:	2b00      	cmp	r3, #0
 800080c:	d06c      	beq.n	80008e8 <HAL_RCC_OscConfig+0x12c>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d168      	bne.n	80008e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e24c      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000822:	d106      	bne.n	8000832 <HAL_RCC_OscConfig+0x76>
 8000824:	4b80      	ldr	r3, [pc, #512]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a7f      	ldr	r2, [pc, #508]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800082a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e02e      	b.n	8000890 <HAL_RCC_OscConfig+0xd4>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d10c      	bne.n	8000854 <HAL_RCC_OscConfig+0x98>
 800083a:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a7a      	ldr	r2, [pc, #488]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000844:	6013      	str	r3, [r2, #0]
 8000846:	4b78      	ldr	r3, [pc, #480]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a77      	ldr	r2, [pc, #476]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800084c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e01d      	b.n	8000890 <HAL_RCC_OscConfig+0xd4>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800085c:	d10c      	bne.n	8000878 <HAL_RCC_OscConfig+0xbc>
 800085e:	4b72      	ldr	r3, [pc, #456]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a71      	ldr	r2, [pc, #452]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000868:	6013      	str	r3, [r2, #0]
 800086a:	4b6f      	ldr	r3, [pc, #444]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a6e      	ldr	r2, [pc, #440]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	6013      	str	r3, [r2, #0]
 8000876:	e00b      	b.n	8000890 <HAL_RCC_OscConfig+0xd4>
 8000878:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a6a      	ldr	r2, [pc, #424]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800087e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a67      	ldr	r2, [pc, #412]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800088a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800088e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d013      	beq.n	80008c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000898:	f7ff fea2 	bl	80005e0 <HAL_GetTick>
 800089c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089e:	e008      	b.n	80008b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008a0:	f7ff fe9e 	bl	80005e0 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	2b64      	cmp	r3, #100	; 0x64
 80008ac:	d901      	bls.n	80008b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008ae:	2303      	movs	r3, #3
 80008b0:	e200      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008b2:	4b5d      	ldr	r3, [pc, #372]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0f0      	beq.n	80008a0 <HAL_RCC_OscConfig+0xe4>
 80008be:	e014      	b.n	80008ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c0:	f7ff fe8e 	bl	80005e0 <HAL_GetTick>
 80008c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c6:	e008      	b.n	80008da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008c8:	f7ff fe8a 	bl	80005e0 <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	2b64      	cmp	r3, #100	; 0x64
 80008d4:	d901      	bls.n	80008da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008d6:	2303      	movs	r3, #3
 80008d8:	e1ec      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008da:	4b53      	ldr	r3, [pc, #332]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f0      	bne.n	80008c8 <HAL_RCC_OscConfig+0x10c>
 80008e6:	e000      	b.n	80008ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d063      	beq.n	80009be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008f6:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 030c 	and.w	r3, r3, #12
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d00b      	beq.n	800091a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000902:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 030c 	and.w	r3, r3, #12
 800090a:	2b08      	cmp	r3, #8
 800090c:	d11c      	bne.n	8000948 <HAL_RCC_OscConfig+0x18c>
 800090e:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d116      	bne.n	8000948 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <HAL_RCC_OscConfig+0x176>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d001      	beq.n	8000932 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	e1c0      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000932:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	4939      	ldr	r1, [pc, #228]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000942:	4313      	orrs	r3, r2
 8000944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000946:	e03a      	b.n	80009be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d020      	beq.n	8000992 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000950:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <HAL_RCC_OscConfig+0x270>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000956:	f7ff fe43 	bl	80005e0 <HAL_GetTick>
 800095a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095c:	e008      	b.n	8000970 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800095e:	f7ff fe3f 	bl	80005e0 <HAL_GetTick>
 8000962:	4602      	mov	r2, r0
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	1ad3      	subs	r3, r2, r3
 8000968:	2b02      	cmp	r3, #2
 800096a:	d901      	bls.n	8000970 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800096c:	2303      	movs	r3, #3
 800096e:	e1a1      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000970:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0f0      	beq.n	800095e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	4927      	ldr	r1, [pc, #156]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 800098c:	4313      	orrs	r3, r2
 800098e:	600b      	str	r3, [r1, #0]
 8000990:	e015      	b.n	80009be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HAL_RCC_OscConfig+0x270>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000998:	f7ff fe22 	bl	80005e0 <HAL_GetTick>
 800099c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099e:	e008      	b.n	80009b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009a0:	f7ff fe1e 	bl	80005e0 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d901      	bls.n	80009b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009ae:	2303      	movs	r3, #3
 80009b0:	e180      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f0      	bne.n	80009a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d03a      	beq.n	8000a40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d019      	beq.n	8000a06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_RCC_OscConfig+0x274>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009d8:	f7ff fe02 	bl	80005e0 <HAL_GetTick>
 80009dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	e008      	b.n	80009f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009e0:	f7ff fdfe 	bl	80005e0 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d901      	bls.n	80009f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009ee:	2303      	movs	r3, #3
 80009f0:	e160      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_RCC_OscConfig+0x26c>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d0f0      	beq.n	80009e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009fe:	2001      	movs	r0, #1
 8000a00:	f000 fa9c 	bl	8000f3c <RCC_Delay>
 8000a04:	e01c      	b.n	8000a40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_RCC_OscConfig+0x274>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a0c:	f7ff fde8 	bl	80005e0 <HAL_GetTick>
 8000a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a12:	e00f      	b.n	8000a34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a14:	f7ff fde4 	bl	80005e0 <HAL_GetTick>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d908      	bls.n	8000a34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a22:	2303      	movs	r3, #3
 8000a24:	e146      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
 8000a26:	bf00      	nop
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	42420000 	.word	0x42420000
 8000a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a34:	4b92      	ldr	r3, [pc, #584]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a38:	f003 0302 	and.w	r3, r3, #2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1e9      	bne.n	8000a14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f000 80a6 	beq.w	8000b9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a52:	4b8b      	ldr	r3, [pc, #556]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10d      	bne.n	8000a7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b88      	ldr	r3, [pc, #544]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a87      	ldr	r2, [pc, #540]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b85      	ldr	r3, [pc, #532]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a76:	2301      	movs	r3, #1
 8000a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a7a:	4b82      	ldr	r3, [pc, #520]	; (8000c84 <HAL_RCC_OscConfig+0x4c8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d118      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a86:	4b7f      	ldr	r3, [pc, #508]	; (8000c84 <HAL_RCC_OscConfig+0x4c8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a7e      	ldr	r2, [pc, #504]	; (8000c84 <HAL_RCC_OscConfig+0x4c8>)
 8000a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a92:	f7ff fda5 	bl	80005e0 <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a98:	e008      	b.n	8000aac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a9a:	f7ff fda1 	bl	80005e0 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b64      	cmp	r3, #100	; 0x64
 8000aa6:	d901      	bls.n	8000aac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e103      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	4b75      	ldr	r3, [pc, #468]	; (8000c84 <HAL_RCC_OscConfig+0x4c8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f0      	beq.n	8000a9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d106      	bne.n	8000ace <HAL_RCC_OscConfig+0x312>
 8000ac0:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	4a6e      	ldr	r2, [pc, #440]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6213      	str	r3, [r2, #32]
 8000acc:	e02d      	b.n	8000b2a <HAL_RCC_OscConfig+0x36e>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10c      	bne.n	8000af0 <HAL_RCC_OscConfig+0x334>
 8000ad6:	4b6a      	ldr	r3, [pc, #424]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	4a69      	ldr	r2, [pc, #420]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000adc:	f023 0301 	bic.w	r3, r3, #1
 8000ae0:	6213      	str	r3, [r2, #32]
 8000ae2:	4b67      	ldr	r3, [pc, #412]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000ae4:	6a1b      	ldr	r3, [r3, #32]
 8000ae6:	4a66      	ldr	r2, [pc, #408]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000ae8:	f023 0304 	bic.w	r3, r3, #4
 8000aec:	6213      	str	r3, [r2, #32]
 8000aee:	e01c      	b.n	8000b2a <HAL_RCC_OscConfig+0x36e>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d10c      	bne.n	8000b12 <HAL_RCC_OscConfig+0x356>
 8000af8:	4b61      	ldr	r3, [pc, #388]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	4a60      	ldr	r2, [pc, #384]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6213      	str	r3, [r2, #32]
 8000b04:	4b5e      	ldr	r3, [pc, #376]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6213      	str	r3, [r2, #32]
 8000b10:	e00b      	b.n	8000b2a <HAL_RCC_OscConfig+0x36e>
 8000b12:	4b5b      	ldr	r3, [pc, #364]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b14:	6a1b      	ldr	r3, [r3, #32]
 8000b16:	4a5a      	ldr	r2, [pc, #360]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b18:	f023 0301 	bic.w	r3, r3, #1
 8000b1c:	6213      	str	r3, [r2, #32]
 8000b1e:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b20:	6a1b      	ldr	r3, [r3, #32]
 8000b22:	4a57      	ldr	r2, [pc, #348]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b24:	f023 0304 	bic.w	r3, r3, #4
 8000b28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d015      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b32:	f7ff fd55 	bl	80005e0 <HAL_GetTick>
 8000b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b38:	e00a      	b.n	8000b50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b3a:	f7ff fd51 	bl	80005e0 <HAL_GetTick>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d901      	bls.n	8000b50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e0b1      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b50:	4b4b      	ldr	r3, [pc, #300]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b52:	6a1b      	ldr	r3, [r3, #32]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0ee      	beq.n	8000b3a <HAL_RCC_OscConfig+0x37e>
 8000b5c:	e014      	b.n	8000b88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5e:	f7ff fd3f 	bl	80005e0 <HAL_GetTick>
 8000b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b64:	e00a      	b.n	8000b7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f7ff fd3b 	bl	80005e0 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d901      	bls.n	8000b7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e09b      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b7c:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ee      	bne.n	8000b66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b88:	7dfb      	ldrb	r3, [r7, #23]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d105      	bne.n	8000b9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b8e:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	4a3b      	ldr	r2, [pc, #236]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000b94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8087 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 030c 	and.w	r3, r3, #12
 8000bac:	2b08      	cmp	r3, #8
 8000bae:	d061      	beq.n	8000c74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69db      	ldr	r3, [r3, #28]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d146      	bne.n	8000c46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <HAL_RCC_OscConfig+0x4cc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fd0f 	bl	80005e0 <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bc6:	f7ff fd0b 	bl	80005e0 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e06d      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f0      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a1b      	ldr	r3, [r3, #32]
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bec:	d108      	bne.n	8000c00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	4921      	ldr	r1, [pc, #132]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a19      	ldr	r1, [r3, #32]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	430b      	orrs	r3, r1
 8000c12:	491b      	ldr	r1, [pc, #108]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000c14:	4313      	orrs	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_RCC_OscConfig+0x4cc>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fcdf 	bl	80005e0 <HAL_GetTick>
 8000c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c24:	e008      	b.n	8000c38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fcdb 	bl	80005e0 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d901      	bls.n	8000c38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e03d      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0f0      	beq.n	8000c26 <HAL_RCC_OscConfig+0x46a>
 8000c44:	e035      	b.n	8000cb2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <HAL_RCC_OscConfig+0x4cc>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fcc8 	bl	80005e0 <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c54:	f7ff fcc4 	bl	80005e0 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e026      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_RCC_OscConfig+0x4c4>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f0      	bne.n	8000c54 <HAL_RCC_OscConfig+0x498>
 8000c72:	e01e      	b.n	8000cb2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d107      	bne.n	8000c8c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e019      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40007000 	.word	0x40007000
 8000c88:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_RCC_OscConfig+0x500>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a1b      	ldr	r3, [r3, #32]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d106      	bne.n	8000cae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d001      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d101      	bne.n	8000cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0d0      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cd4:	4b6a      	ldr	r3, [pc, #424]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d910      	bls.n	8000d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce2:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f023 0207 	bic.w	r2, r3, #7
 8000cea:	4965      	ldr	r1, [pc, #404]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf2:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d001      	beq.n	8000d04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	e0b8      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d020      	beq.n	8000d52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d005      	beq.n	8000d28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d1c:	4b59      	ldr	r3, [pc, #356]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a58      	ldr	r2, [pc, #352]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d005      	beq.n	8000d40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4a52      	ldr	r2, [pc, #328]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d40:	4b50      	ldr	r3, [pc, #320]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	494d      	ldr	r1, [pc, #308]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d040      	beq.n	8000de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d107      	bne.n	8000d76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d115      	bne.n	8000d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e07f      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d107      	bne.n	8000d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d7e:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d109      	bne.n	8000d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e073      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8e:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e06b      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f023 0203 	bic.w	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4936      	ldr	r1, [pc, #216]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000db0:	f7ff fc16 	bl	80005e0 <HAL_GetTick>
 8000db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000db6:	e00a      	b.n	8000dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db8:	f7ff fc12 	bl	80005e0 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e053      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 020c 	and.w	r2, r3, #12
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d1eb      	bne.n	8000db8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000de0:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d210      	bcs.n	8000e10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 0207 	bic.w	r2, r3, #7
 8000df6:	4922      	ldr	r1, [pc, #136]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_RCC_ClockConfig+0x1c0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	683a      	ldr	r2, [r7, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d001      	beq.n	8000e10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e032      	b.n	8000e76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d008      	beq.n	8000e2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	4916      	ldr	r1, [pc, #88]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d009      	beq.n	8000e4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	490e      	ldr	r1, [pc, #56]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e4e:	f000 f821 	bl	8000e94 <HAL_RCC_GetSysClockFreq>
 8000e52:	4602      	mov	r2, r0
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_RCC_ClockConfig+0x1c4>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	490a      	ldr	r1, [pc, #40]	; (8000e88 <HAL_RCC_ClockConfig+0x1c8>)
 8000e60:	5ccb      	ldrb	r3, [r1, r3]
 8000e62:	fa22 f303 	lsr.w	r3, r2, r3
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_RCC_ClockConfig+0x1cc>)
 8000e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_RCC_ClockConfig+0x1d0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb74 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40022000 	.word	0x40022000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08000ff8 	.word	0x08000ff8
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b087      	sub	sp, #28
 8000e98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d002      	beq.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x30>
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d003      	beq.n	8000eca <HAL_RCC_GetSysClockFreq+0x36>
 8000ec2:	e027      	b.n	8000f14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000ec6:	613b      	str	r3, [r7, #16]
      break;
 8000ec8:	e027      	b.n	8000f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	0c9b      	lsrs	r3, r3, #18
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d010      	beq.n	8000f04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	0c5b      	lsrs	r3, r3, #17
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000ef6:	fb03 f202 	mul.w	r2, r3, r2
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e004      	b.n	8000f0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f08:	fb02 f303 	mul.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	613b      	str	r3, [r7, #16]
      break;
 8000f12:	e002      	b.n	8000f1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_RCC_GetSysClockFreq+0x98>)
 8000f16:	613b      	str	r3, [r7, #16]
      break;
 8000f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f1a:	693b      	ldr	r3, [r7, #16]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	371c      	adds	r7, #28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	007a1200 	.word	0x007a1200
 8000f30:	08001008 	.word	0x08001008
 8000f34:	08001018 	.word	0x08001018
 8000f38:	003d0900 	.word	0x003d0900

08000f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <RCC_Delay+0x34>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <RCC_Delay+0x38>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0a5b      	lsrs	r3, r3, #9
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f58:	bf00      	nop
  }
  while (Delay --);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	60fa      	str	r2, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1f9      	bne.n	8000f58 <RCC_Delay+0x1c>
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000000 	.word	0x20000000
 8000f74:	10624dd3 	.word	0x10624dd3

08000f78 <memset>:
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4402      	add	r2, r0
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d100      	bne.n	8000f82 <memset+0xa>
 8000f80:	4770      	bx	lr
 8000f82:	f803 1b01 	strb.w	r1, [r3], #1
 8000f86:	e7f9      	b.n	8000f7c <memset+0x4>

08000f88 <__libc_init_array>:
 8000f88:	b570      	push	{r4, r5, r6, lr}
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	4d0c      	ldr	r5, [pc, #48]	; (8000fc0 <__libc_init_array+0x38>)
 8000f8e:	4c0d      	ldr	r4, [pc, #52]	; (8000fc4 <__libc_init_array+0x3c>)
 8000f90:	1b64      	subs	r4, r4, r5
 8000f92:	10a4      	asrs	r4, r4, #2
 8000f94:	42a6      	cmp	r6, r4
 8000f96:	d109      	bne.n	8000fac <__libc_init_array+0x24>
 8000f98:	f000 f81a 	bl	8000fd0 <_init>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	4d0a      	ldr	r5, [pc, #40]	; (8000fc8 <__libc_init_array+0x40>)
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <__libc_init_array+0x44>)
 8000fa2:	1b64      	subs	r4, r4, r5
 8000fa4:	10a4      	asrs	r4, r4, #2
 8000fa6:	42a6      	cmp	r6, r4
 8000fa8:	d105      	bne.n	8000fb6 <__libc_init_array+0x2e>
 8000faa:	bd70      	pop	{r4, r5, r6, pc}
 8000fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb0:	4798      	blx	r3
 8000fb2:	3601      	adds	r6, #1
 8000fb4:	e7ee      	b.n	8000f94 <__libc_init_array+0xc>
 8000fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fba:	4798      	blx	r3
 8000fbc:	3601      	adds	r6, #1
 8000fbe:	e7f2      	b.n	8000fa6 <__libc_init_array+0x1e>
 8000fc0:	0800101c 	.word	0x0800101c
 8000fc4:	0800101c 	.word	0x0800101c
 8000fc8:	0800101c 	.word	0x0800101c
 8000fcc:	08001020 	.word	0x08001020

08000fd0 <_init>:
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	bf00      	nop
 8000fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd6:	bc08      	pop	{r3}
 8000fd8:	469e      	mov	lr, r3
 8000fda:	4770      	bx	lr

08000fdc <_fini>:
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fde:	bf00      	nop
 8000fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe2:	bc08      	pop	{r3}
 8000fe4:	469e      	mov	lr, r3
 8000fe6:	4770      	bx	lr
