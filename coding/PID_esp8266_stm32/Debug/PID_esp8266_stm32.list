
PID_esp8266_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000538c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080054a0  080054a0  000154a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e8  080058e8  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080058e8  080058e8  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058e8  080058e8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080058f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001f0  08005ae0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005ae0  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003c32  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000136e  00000000  00000000  00023e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000510  00000000  00000000  00025200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000396  00000000  00000000  00025710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001783a  00000000  00000000  00025aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000678a  00000000  00000000  0003d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081768  00000000  00000000  00043a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024fc  00000000  00000000  000c51d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c76d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005484 	.word	0x08005484

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08005484 	.word	0x08005484

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_frsub>:
 8000adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ae0:	e002      	b.n	8000ae8 <__addsf3>
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_fsub>:
 8000ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae8 <__addsf3>:
 8000ae8:	0042      	lsls	r2, r0, #1
 8000aea:	bf1f      	itttt	ne
 8000aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000af0:	ea92 0f03 	teqne	r2, r3
 8000af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000afc:	d06a      	beq.n	8000bd4 <__addsf3+0xec>
 8000afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b06:	bfc1      	itttt	gt
 8000b08:	18d2      	addgt	r2, r2, r3
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	4048      	eorgt	r0, r1
 8000b0e:	4041      	eorgt	r1, r0
 8000b10:	bfb8      	it	lt
 8000b12:	425b      	neglt	r3, r3
 8000b14:	2b19      	cmp	r3, #25
 8000b16:	bf88      	it	hi
 8000b18:	4770      	bxhi	lr
 8000b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b26:	bf18      	it	ne
 8000b28:	4240      	negne	r0, r0
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4249      	negne	r1, r1
 8000b3a:	ea92 0f03 	teq	r2, r3
 8000b3e:	d03f      	beq.n	8000bc0 <__addsf3+0xd8>
 8000b40:	f1a2 0201 	sub.w	r2, r2, #1
 8000b44:	fa41 fc03 	asr.w	ip, r1, r3
 8000b48:	eb10 000c 	adds.w	r0, r0, ip
 8000b4c:	f1c3 0320 	rsb	r3, r3, #32
 8000b50:	fa01 f103 	lsl.w	r1, r1, r3
 8000b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__addsf3+0x78>
 8000b5a:	4249      	negs	r1, r1
 8000b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b64:	d313      	bcc.n	8000b8e <__addsf3+0xa6>
 8000b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b6a:	d306      	bcc.n	8000b7a <__addsf3+0x92>
 8000b6c:	0840      	lsrs	r0, r0, #1
 8000b6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b72:	f102 0201 	add.w	r2, r2, #1
 8000b76:	2afe      	cmp	r2, #254	; 0xfe
 8000b78:	d251      	bcs.n	8000c1e <__addsf3+0x136>
 8000b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b82:	bf08      	it	eq
 8000b84:	f020 0001 	biceq.w	r0, r0, #1
 8000b88:	ea40 0003 	orr.w	r0, r0, r3
 8000b8c:	4770      	bx	lr
 8000b8e:	0049      	lsls	r1, r1, #1
 8000b90:	eb40 0000 	adc.w	r0, r0, r0
 8000b94:	3a01      	subs	r2, #1
 8000b96:	bf28      	it	cs
 8000b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b9c:	d2ed      	bcs.n	8000b7a <__addsf3+0x92>
 8000b9e:	fab0 fc80 	clz	ip, r0
 8000ba2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba6:	ebb2 020c 	subs.w	r2, r2, ip
 8000baa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bae:	bfaa      	itet	ge
 8000bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb4:	4252      	neglt	r2, r2
 8000bb6:	4318      	orrge	r0, r3
 8000bb8:	bfbc      	itt	lt
 8000bba:	40d0      	lsrlt	r0, r2
 8000bbc:	4318      	orrlt	r0, r3
 8000bbe:	4770      	bx	lr
 8000bc0:	f092 0f00 	teq	r2, #0
 8000bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc8:	bf06      	itte	eq
 8000bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bce:	3201      	addeq	r2, #1
 8000bd0:	3b01      	subne	r3, #1
 8000bd2:	e7b5      	b.n	8000b40 <__addsf3+0x58>
 8000bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be2:	d021      	beq.n	8000c28 <__addsf3+0x140>
 8000be4:	ea92 0f03 	teq	r2, r3
 8000be8:	d004      	beq.n	8000bf4 <__addsf3+0x10c>
 8000bea:	f092 0f00 	teq	r2, #0
 8000bee:	bf08      	it	eq
 8000bf0:	4608      	moveq	r0, r1
 8000bf2:	4770      	bx	lr
 8000bf4:	ea90 0f01 	teq	r0, r1
 8000bf8:	bf1c      	itt	ne
 8000bfa:	2000      	movne	r0, #0
 8000bfc:	4770      	bxne	lr
 8000bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c02:	d104      	bne.n	8000c0e <__addsf3+0x126>
 8000c04:	0040      	lsls	r0, r0, #1
 8000c06:	bf28      	it	cs
 8000c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c0c:	4770      	bx	lr
 8000c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c12:	bf3c      	itt	cc
 8000c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bxcc	lr
 8000c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c26:	4770      	bx	lr
 8000c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c2c:	bf16      	itet	ne
 8000c2e:	4608      	movne	r0, r1
 8000c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c34:	4601      	movne	r1, r0
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	bf06      	itte	eq
 8000c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3e:	ea90 0f01 	teqeq	r0, r1
 8000c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_ui2f>:
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e004      	b.n	8000c58 <__aeabi_i2f+0x8>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_i2f>:
 8000c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	bf48      	it	mi
 8000c56:	4240      	negmi	r0, r0
 8000c58:	ea5f 0c00 	movs.w	ip, r0
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c64:	4601      	mov	r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	e01c      	b.n	8000ca6 <__aeabi_l2f+0x2a>

08000c6c <__aeabi_ul2f>:
 8000c6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c70:	bf08      	it	eq
 8000c72:	4770      	bxeq	lr
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e00a      	b.n	8000c90 <__aeabi_l2f+0x14>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_l2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c88:	d502      	bpl.n	8000c90 <__aeabi_l2f+0x14>
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	ea5f 0c01 	movs.w	ip, r1
 8000c94:	bf02      	ittt	eq
 8000c96:	4684      	moveq	ip, r0
 8000c98:	4601      	moveq	r1, r0
 8000c9a:	2000      	moveq	r0, #0
 8000c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ca0:	bf08      	it	eq
 8000ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000caa:	fabc f28c 	clz	r2, ip
 8000cae:	3a08      	subs	r2, #8
 8000cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb4:	db10      	blt.n	8000cd8 <__aeabi_l2f+0x5c>
 8000cb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cba:	4463      	add	r3, ip
 8000cbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f102 0220 	add.w	r2, r2, #32
 8000cdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_fmul>:
 8000cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d00:	bf1e      	ittt	ne
 8000d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d06:	ea92 0f0c 	teqne	r2, ip
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d06f      	beq.n	8000df0 <__aeabi_fmul+0xf8>
 8000d10:	441a      	add	r2, r3
 8000d12:	ea80 0c01 	eor.w	ip, r0, r1
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	bf18      	it	ne
 8000d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1e:	d01e      	beq.n	8000d5e <__aeabi_fmul+0x66>
 8000d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d38:	bf3e      	ittt	cc
 8000d3a:	0049      	lslcc	r1, r1, #1
 8000d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d40:	005b      	lslcc	r3, r3, #1
 8000d42:	ea40 0001 	orr.w	r0, r0, r1
 8000d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d4a:	2afd      	cmp	r2, #253	; 0xfd
 8000d4c:	d81d      	bhi.n	8000d8a <__aeabi_fmul+0x92>
 8000d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d56:	bf08      	it	eq
 8000d58:	f020 0001 	biceq.w	r0, r0, #1
 8000d5c:	4770      	bx	lr
 8000d5e:	f090 0f00 	teq	r0, #0
 8000d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d66:	bf08      	it	eq
 8000d68:	0249      	lsleq	r1, r1, #9
 8000d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d72:	3a7f      	subs	r2, #127	; 0x7f
 8000d74:	bfc2      	ittt	gt
 8000d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7e:	4770      	bxgt	lr
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	dc5d      	bgt.n	8000e48 <__aeabi_fmul+0x150>
 8000d8c:	f112 0f19 	cmn.w	r2, #25
 8000d90:	bfdc      	itt	le
 8000d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d96:	4770      	bxle	lr
 8000d98:	f1c2 0200 	rsb	r2, r2, #0
 8000d9c:	0041      	lsls	r1, r0, #1
 8000d9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000da2:	f1c2 0220 	rsb	r2, r2, #32
 8000da6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000daa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dae:	f140 0000 	adc.w	r0, r0, #0
 8000db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db6:	bf08      	it	eq
 8000db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dbc:	4770      	bx	lr
 8000dbe:	f092 0f00 	teq	r2, #0
 8000dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0040      	lsleq	r0, r0, #1
 8000dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dce:	3a01      	subeq	r2, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xce>
 8000dd2:	ea40 000c 	orr.w	r0, r0, ip
 8000dd6:	f093 0f00 	teq	r3, #0
 8000dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dde:	bf02      	ittt	eq
 8000de0:	0049      	lsleq	r1, r1, #1
 8000de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de6:	3b01      	subeq	r3, #1
 8000de8:	d0f9      	beq.n	8000dde <__aeabi_fmul+0xe6>
 8000dea:	ea41 010c 	orr.w	r1, r1, ip
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fmul+0x18>
 8000df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df4:	ea92 0f0c 	teq	r2, ip
 8000df8:	bf18      	it	ne
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d00a      	beq.n	8000e16 <__aeabi_fmul+0x11e>
 8000e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e04:	bf18      	it	ne
 8000e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	d1d8      	bne.n	8000dbe <__aeabi_fmul+0xc6>
 8000e0c:	ea80 0001 	eor.w	r0, r0, r1
 8000e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f090 0f00 	teq	r0, #0
 8000e1a:	bf17      	itett	ne
 8000e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e20:	4608      	moveq	r0, r1
 8000e22:	f091 0f00 	teqne	r1, #0
 8000e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e2a:	d014      	beq.n	8000e56 <__aeabi_fmul+0x15e>
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	d101      	bne.n	8000e36 <__aeabi_fmul+0x13e>
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	d10f      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e36:	ea93 0f0c 	teq	r3, ip
 8000e3a:	d103      	bne.n	8000e44 <__aeabi_fmul+0x14c>
 8000e3c:	024b      	lsls	r3, r1, #9
 8000e3e:	bf18      	it	ne
 8000e40:	4608      	movne	r0, r1
 8000e42:	d108      	bne.n	8000e56 <__aeabi_fmul+0x15e>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e54:	4770      	bx	lr
 8000e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5e:	4770      	bx	lr

08000e60 <__aeabi_fdiv>:
 8000e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e68:	bf1e      	ittt	ne
 8000e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6e:	ea92 0f0c 	teqne	r2, ip
 8000e72:	ea93 0f0c 	teqne	r3, ip
 8000e76:	d069      	beq.n	8000f4c <__aeabi_fdiv+0xec>
 8000e78:	eba2 0203 	sub.w	r2, r2, r3
 8000e7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e80:	0249      	lsls	r1, r1, #9
 8000e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e86:	d037      	beq.n	8000ef8 <__aeabi_fdiv+0x98>
 8000e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	bf38      	it	cc
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	bf24      	itt	cs
 8000eaa:	1a5b      	subcs	r3, r3, r1
 8000eac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb4:	bf24      	itt	cs
 8000eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ec2:	bf24      	itt	cs
 8000ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	bf18      	it	ne
 8000ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ee2:	d1e0      	bne.n	8000ea6 <__aeabi_fdiv+0x46>
 8000ee4:	2afd      	cmp	r2, #253	; 0xfd
 8000ee6:	f63f af50 	bhi.w	8000d8a <__aeabi_fmul+0x92>
 8000eea:	428b      	cmp	r3, r1
 8000eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ef0:	bf08      	it	eq
 8000ef2:	f020 0001 	biceq.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f00:	327f      	adds	r2, #127	; 0x7f
 8000f02:	bfc2      	ittt	gt
 8000f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f0c:	4770      	bxgt	lr
 8000f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f12:	f04f 0300 	mov.w	r3, #0
 8000f16:	3a01      	subs	r2, #1
 8000f18:	e737      	b.n	8000d8a <__aeabi_fmul+0x92>
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xc2>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fdiv+0xda>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e795      	b.n	8000e78 <__aeabi_fdiv+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	d108      	bne.n	8000f68 <__aeabi_fdiv+0x108>
 8000f56:	0242      	lsls	r2, r0, #9
 8000f58:	f47f af7d 	bne.w	8000e56 <__aeabi_fmul+0x15e>
 8000f5c:	ea93 0f0c 	teq	r3, ip
 8000f60:	f47f af70 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f64:	4608      	mov	r0, r1
 8000f66:	e776      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f68:	ea93 0f0c 	teq	r3, ip
 8000f6c:	d104      	bne.n	8000f78 <__aeabi_fdiv+0x118>
 8000f6e:	024b      	lsls	r3, r1, #9
 8000f70:	f43f af4c 	beq.w	8000e0c <__aeabi_fmul+0x114>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e76e      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f7c:	bf18      	it	ne
 8000f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	d1ca      	bne.n	8000f1a <__aeabi_fdiv+0xba>
 8000f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f88:	f47f af5c 	bne.w	8000e44 <__aeabi_fmul+0x14c>
 8000f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	f47f af3c 	bne.w	8000e0c <__aeabi_fmul+0x114>
 8000f94:	e75f      	b.n	8000e56 <__aeabi_fmul+0x15e>
 8000f96:	bf00      	nop

08000f98 <__gesf2>:
 8000f98:	f04f 3cff 	mov.w	ip, #4294967295
 8000f9c:	e006      	b.n	8000fac <__cmpsf2+0x4>
 8000f9e:	bf00      	nop

08000fa0 <__lesf2>:
 8000fa0:	f04f 0c01 	mov.w	ip, #1
 8000fa4:	e002      	b.n	8000fac <__cmpsf2+0x4>
 8000fa6:	bf00      	nop

08000fa8 <__cmpsf2>:
 8000fa8:	f04f 0c01 	mov.w	ip, #1
 8000fac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fbc:	bf18      	it	ne
 8000fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fc2:	d011      	beq.n	8000fe8 <__cmpsf2+0x40>
 8000fc4:	b001      	add	sp, #4
 8000fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fca:	bf18      	it	ne
 8000fcc:	ea90 0f01 	teqne	r0, r1
 8000fd0:	bf58      	it	pl
 8000fd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd6:	bf88      	it	hi
 8000fd8:	17c8      	asrhi	r0, r1, #31
 8000fda:	bf38      	it	cc
 8000fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fe0:	bf18      	it	ne
 8000fe2:	f040 0001 	orrne.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fec:	d102      	bne.n	8000ff4 <__cmpsf2+0x4c>
 8000fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ff2:	d105      	bne.n	8001000 <__cmpsf2+0x58>
 8000ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff8:	d1e4      	bne.n	8000fc4 <__cmpsf2+0x1c>
 8000ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffe:	d0e1      	beq.n	8000fc4 <__cmpsf2+0x1c>
 8001000:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <__aeabi_cfrcmple>:
 8001008:	4684      	mov	ip, r0
 800100a:	4608      	mov	r0, r1
 800100c:	4661      	mov	r1, ip
 800100e:	e7ff      	b.n	8001010 <__aeabi_cfcmpeq>

08001010 <__aeabi_cfcmpeq>:
 8001010:	b50f      	push	{r0, r1, r2, r3, lr}
 8001012:	f7ff ffc9 	bl	8000fa8 <__cmpsf2>
 8001016:	2800      	cmp	r0, #0
 8001018:	bf48      	it	mi
 800101a:	f110 0f00 	cmnmi.w	r0, #0
 800101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001020 <__aeabi_fcmpeq>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff fff4 	bl	8001010 <__aeabi_cfcmpeq>
 8001028:	bf0c      	ite	eq
 800102a:	2001      	moveq	r0, #1
 800102c:	2000      	movne	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmplt>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffea 	bl	8001010 <__aeabi_cfcmpeq>
 800103c:	bf34      	ite	cc
 800103e:	2001      	movcc	r0, #1
 8001040:	2000      	movcs	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmple>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffe0 	bl	8001010 <__aeabi_cfcmpeq>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpge>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffd2 	bl	8001008 <__aeabi_cfrcmple>
 8001064:	bf94      	ite	ls
 8001066:	2001      	movls	r0, #1
 8001068:	2000      	movhi	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpgt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffc8 	bl	8001008 <__aeabi_cfrcmple>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_f2iz>:
 8001084:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001088:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800108c:	d30f      	bcc.n	80010ae <__aeabi_f2iz+0x2a>
 800108e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001092:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001096:	d90d      	bls.n	80010b4 <__aeabi_f2iz+0x30>
 8001098:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800109c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010a4:	fa23 f002 	lsr.w	r0, r3, r2
 80010a8:	bf18      	it	ne
 80010aa:	4240      	negne	r0, r0
 80010ac:	4770      	bx	lr
 80010ae:	f04f 0000 	mov.w	r0, #0
 80010b2:	4770      	bx	lr
 80010b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010b8:	d101      	bne.n	80010be <__aeabi_f2iz+0x3a>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	d105      	bne.n	80010ca <__aeabi_f2iz+0x46>
 80010be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010c2:	bf08      	it	eq
 80010c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc45 	bl	80009ac <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9bb 	bl	80004c8 <__aeabi_dmul>
 8001152:	f7ff fc53 	bl	80009fc <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f93c 	bl	80003d4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9b2 	bl	80004c8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fff4 	bl	8000158 <__aeabi_dsub>
 8001170:	f7ff fc44 	bl	80009fc <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <HAL_RxCallBackFunction>:
		.output = 0,
		.previos_error = 0,
		.setpoint = 0
};
static void HAL_RxCallBackFunction(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	static uint16_t index = 0 ;
	uint8_t data_rx       = 0 ;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
	data_rx = HAL_UART_Read(&uart1_config);
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <HAL_RxCallBackFunction+0x58>)
 800118c:	f001 fa3c 	bl	8002608 <HAL_UART_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	71fb      	strb	r3, [r7, #7]
	if (data_rx != '\n' )
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d00d      	beq.n	80011b6 <HAL_RxCallBackFunction+0x36>
	{
		uart1_state = READ_UART_READY;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_RxCallBackFunction+0x5c>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
		data_read[index++] = data_rx;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_RxCallBackFunction+0x60>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	b291      	uxth	r1, r2
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <HAL_RxCallBackFunction+0x60>)
 80011aa:	8011      	strh	r1, [r2, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_RxCallBackFunction+0x64>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	5453      	strb	r3, [r2, r1]
	{
		data_read[index] = data_rx;
		uart1_state = READ_UART_DONE;
		index = 0 ;
	}
}
 80011b4:	e00b      	b.n	80011ce <HAL_RxCallBackFunction+0x4e>
		data_read[index] = data_rx;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_RxCallBackFunction+0x60>)
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	4619      	mov	r1, r3
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_RxCallBackFunction+0x64>)
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	5453      	strb	r3, [r2, r1]
		uart1_state = READ_UART_DONE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_RxCallBackFunction+0x5c>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	701a      	strb	r2, [r3, #0]
		index = 0 ;
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_RxCallBackFunction+0x60>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	801a      	strh	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000
 80011dc:	2000020c 	.word	0x2000020c
 80011e0:	20000270 	.word	0x20000270
 80011e4:	20000214 	.word	0x20000214

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  HAL_Init();
 80011ec:	f000 fb32 	bl	8001854 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f992 	bl	8001518 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 f9cc 	bl	8001590 <MX_GPIO_Init>
  HAL_UART_Init(&uart1_config);
 80011f8:	481b      	ldr	r0, [pc, #108]	; (8001268 <main+0x80>)
 80011fa:	f001 f8f1 	bl	80023e0 <HAL_UART_Init>
  HAL_UART_SetRxCallBack(&uart1_config, HAL_RxCallBackFunction);
 80011fe:	491b      	ldr	r1, [pc, #108]	; (800126c <main+0x84>)
 8001200:	4819      	ldr	r0, [pc, #100]	; (8001268 <main+0x80>)
 8001202:	f001 fa6b 	bl	80026dc <HAL_UART_SetRxCallBack>
  memset(data_read,'\0',sizeof(data_read));
 8001206:	2220      	movs	r2, #32
 8001208:	2100      	movs	r1, #0
 800120a:	4819      	ldr	r0, [pc, #100]	; (8001270 <main+0x88>)
 800120c:	f002 f9d1 	bl	80035b2 <memset>
  while (1)
  {
    /* USER CODE END WHILE */
	switch (uart1_state) {
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <main+0x8c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00f      	beq.n	8001238 <main+0x50>
 8001218:	2b01      	cmp	r3, #1
 800121a:	d000      	beq.n	800121e <main+0x36>
			ParsePIDString((char*)data_read,&pid_config);
			memset(data_read,'\0',sizeof(data_read));
			uart1_state = READ_UART_READY;
			break;
		default:
			break;
 800121c:	e00d      	b.n	800123a <main+0x52>
			ParsePIDString((char*)data_read,&pid_config);
 800121e:	4916      	ldr	r1, [pc, #88]	; (8001278 <main+0x90>)
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <main+0x88>)
 8001222:	f000 f831 	bl	8001288 <ParsePIDString>
			memset(data_read,'\0',sizeof(data_read));
 8001226:	2220      	movs	r2, #32
 8001228:	2100      	movs	r1, #0
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <main+0x88>)
 800122c:	f002 f9c1 	bl	80035b2 <memset>
			uart1_state = READ_UART_READY;
 8001230:	4b10      	ldr	r3, [pc, #64]	; (8001274 <main+0x8c>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
			break;
 8001236:	e000      	b.n	800123a <main+0x52>
			break;
 8001238:	bf00      	nop
	}
	CalculatorPID(&pid_config,(float*)&speed);
 800123a:	4910      	ldr	r1, [pc, #64]	; (800127c <main+0x94>)
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <main+0x90>)
 800123e:	f001 f851 	bl	80022e4 <CalculatorPID>
	float_to_string(speed, data_send);
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <main+0x94>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	490e      	ldr	r1, [pc, #56]	; (8001280 <main+0x98>)
 8001248:	4618      	mov	r0, r3
 800124a:	f000 f89f 	bl	800138c <float_to_string>
	HAL_UART_Transfer(&uart1_config, (uint8_t*)"CURRENT:");
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <main+0x9c>)
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <main+0x80>)
 8001252:	f001 f9bb 	bl	80025cc <HAL_UART_Transfer>
	HAL_UART_Transfer(&uart1_config, data_send);
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <main+0x98>)
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <main+0x80>)
 800125a:	f001 f9b7 	bl	80025cc <HAL_UART_Transfer>
	HAL_Delay(50);
 800125e:	2032      	movs	r0, #50	; 0x32
 8001260:	f000 fb5a 	bl	8001918 <HAL_Delay>
	switch (uart1_state) {
 8001264:	e7d4      	b.n	8001210 <main+0x28>
 8001266:	bf00      	nop
 8001268:	20000000 	.word	0x20000000
 800126c:	08001181 	.word	0x08001181
 8001270:	20000214 	.word	0x20000214
 8001274:	2000020c 	.word	0x2000020c
 8001278:	20000254 	.word	0x20000254
 800127c:	20000210 	.word	0x20000210
 8001280:	20000234 	.word	0x20000234
 8001284:	080054a0 	.word	0x080054a0

08001288 <ParsePIDString>:
  }
  /* USER CODE END 3 */
}

int ParsePIDString(const char* input, PID_t* pid)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b094      	sub	sp, #80	; 0x50
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
    // Kiểm tra tiền tố "PID:"
    if (strncmp(input, "PID:", 4) != 0) {
 8001292:	2204      	movs	r2, #4
 8001294:	493b      	ldr	r1, [pc, #236]	; (8001384 <ParsePIDString+0xfc>)
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f002 f993 	bl	80035c2 <strncmp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <ParsePIDString+0x20>
        return -1; // Không đúng định dạng
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e069      	b.n	800137c <ParsePIDString+0xf4>
    }

    // Tạo bản sao chuỗi để thao tác (tránh thay đổi input gốc)
    char buffer[64];
    strncpy(buffer, input + 4, sizeof(buffer) - 1);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	1d19      	adds	r1, r3, #4
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	223f      	movs	r2, #63	; 0x3f
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 f997 	bl	80035e6 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0'; // đảm bảo null-terminated
 80012b8:	2300      	movs	r3, #0
 80012ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    // Tách các phần bằng dấu phẩy
    char* token = strtok(buffer, ",");
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4931      	ldr	r1, [pc, #196]	; (8001388 <ParsePIDString+0x100>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 f9a1 	bl	800360c <strtok>
 80012ca:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (token == NULL) return -1;
 80012cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <ParsePIDString+0x50>
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e051      	b.n	800137c <ParsePIDString+0xf4>
    pid->Kp = atof(token);
 80012d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80012da:	f001 fa3f 	bl	800275c <atof>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fba9 	bl	8000a3c <__aeabi_d2f>
 80012ea:	4602      	mov	r2, r0
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	601a      	str	r2, [r3, #0]

    token = strtok(NULL, ",");
 80012f0:	4925      	ldr	r1, [pc, #148]	; (8001388 <ParsePIDString+0x100>)
 80012f2:	2000      	movs	r0, #0
 80012f4:	f002 f98a 	bl	800360c <strtok>
 80012f8:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (token == NULL) return -1;
 80012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <ParsePIDString+0x7e>
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	e03a      	b.n	800137c <ParsePIDString+0xf4>
    pid->Ki = atof(token);
 8001306:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001308:	f001 fa28 	bl	800275c <atof>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fb92 	bl	8000a3c <__aeabi_d2f>
 8001318:	4602      	mov	r2, r0
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	605a      	str	r2, [r3, #4]

    token = strtok(NULL, ",");
 800131e:	491a      	ldr	r1, [pc, #104]	; (8001388 <ParsePIDString+0x100>)
 8001320:	2000      	movs	r0, #0
 8001322:	f002 f973 	bl	800360c <strtok>
 8001326:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (token == NULL) return -1;
 8001328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <ParsePIDString+0xac>
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e023      	b.n	800137c <ParsePIDString+0xf4>
    pid->Kd = atof(token);
 8001334:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001336:	f001 fa11 	bl	800275c <atof>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fb7b 	bl	8000a3c <__aeabi_d2f>
 8001346:	4602      	mov	r2, r0
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	609a      	str	r2, [r3, #8]

    token = strtok(NULL, ",");
 800134c:	490e      	ldr	r1, [pc, #56]	; (8001388 <ParsePIDString+0x100>)
 800134e:	2000      	movs	r0, #0
 8001350:	f002 f95c 	bl	800360c <strtok>
 8001354:	64f8      	str	r0, [r7, #76]	; 0x4c
    if (token == NULL) return -1;
 8001356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <ParsePIDString+0xda>
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	e00c      	b.n	800137c <ParsePIDString+0xf4>
    pid->setpoint = atof(token);
 8001362:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001364:	f001 f9fa 	bl	800275c <atof>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fb64 	bl	8000a3c <__aeabi_d2f>
 8001374:	4602      	mov	r2, r0
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	619a      	str	r2, [r3, #24]


    return 0; // OK
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3750      	adds	r7, #80	; 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	080054ac 	.word	0x080054ac
 8001388:	080054b4 	.word	0x080054b4

0800138c <float_to_string>:
void float_to_string(float value, uint8_t* data) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    int int_part = (int)value;
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fe74 	bl	8001084 <__aeabi_f2iz>
 800139c:	4603      	mov	r3, r0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    int frac_part = (int)((value - int_part) * 100);  // 2 chữ số sau dấu thập phân
 80013a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013a2:	f7ff fc55 	bl	8000c50 <__aeabi_i2f>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fb9a 	bl	8000ae4 <__aeabi_fsub>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4957      	ldr	r1, [pc, #348]	; (8001510 <float_to_string+0x184>)
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fc9f 	bl	8000cf8 <__aeabi_fmul>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe61 	bl	8001084 <__aeabi_f2iz>
 80013c2:	4603      	mov	r3, r0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28

    // Xử lý số âm
    int is_negative = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (value < 0) {
 80013ca:	f04f 0100 	mov.w	r1, #0
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fe30 	bl	8001034 <__aeabi_fcmplt>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <float_to_string+0x5e>
        is_negative = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
        int_part = -int_part;
 80013de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e0:	425b      	negs	r3, r3
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        frac_part = -frac_part;
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	425b      	negs	r3, r3
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    int idx = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]

    if (is_negative) {
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <float_to_string+0x78>
        data[idx++] = '-';
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	623a      	str	r2, [r7, #32]
 80013fa:	461a      	mov	r2, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	222d      	movs	r2, #45	; 0x2d
 8001402:	701a      	strb	r2, [r3, #0]
    }

    // Chuyển phần nguyên sang ký tự
    if (int_part == 0) {
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	2b00      	cmp	r3, #0
 8001408:	d108      	bne.n	800141c <float_to_string+0x90>
        data[idx++] = '0';
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	623a      	str	r2, [r7, #32]
 8001410:	461a      	mov	r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4413      	add	r3, r2
 8001416:	2230      	movs	r2, #48	; 0x30
 8001418:	701a      	strb	r2, [r3, #0]
 800141a:	e038      	b.n	800148e <float_to_string+0x102>
    } else {
        char rev[10];
        int rev_idx = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
        int temp = int_part;
 8001420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001422:	61bb      	str	r3, [r7, #24]
        while (temp > 0) {
 8001424:	e01d      	b.n	8001462 <float_to_string+0xd6>
            rev[rev_idx++] = (temp % 10) + '0';
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <float_to_string+0x188>)
 800142a:	fb83 1302 	smull	r1, r3, r3, r2
 800142e:	1099      	asrs	r1, r3, #2
 8001430:	17d3      	asrs	r3, r2, #31
 8001432:	1ac9      	subs	r1, r1, r3
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	1ad1      	subs	r1, r2, r3
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	3230      	adds	r2, #48	; 0x30
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	3330      	adds	r3, #48	; 0x30
 800144c:	443b      	add	r3, r7
 800144e:	f803 2c24 	strb.w	r2, [r3, #-36]
            temp /= 10;
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <float_to_string+0x188>)
 8001456:	fb82 1203 	smull	r1, r2, r2, r3
 800145a:	1092      	asrs	r2, r2, #2
 800145c:	17db      	asrs	r3, r3, #31
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	61bb      	str	r3, [r7, #24]
        while (temp > 0) {
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	dcde      	bgt.n	8001426 <float_to_string+0x9a>
        }
        while (rev_idx > 0) {
 8001468:	e00e      	b.n	8001488 <float_to_string+0xfc>
            data[idx++] = rev[--rev_idx];
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b01      	subs	r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	623a      	str	r2, [r7, #32]
 8001476:	461a      	mov	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	f107 010c 	add.w	r1, r7, #12
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	440a      	add	r2, r1
 8001484:	7812      	ldrb	r2, [r2, #0]
 8001486:	701a      	strb	r2, [r3, #0]
        while (rev_idx > 0) {
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dced      	bgt.n	800146a <float_to_string+0xde>
        }
    }

    // Thêm dấu chấm
    data[idx++] = '.';
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	623a      	str	r2, [r7, #32]
 8001494:	461a      	mov	r2, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	222e      	movs	r2, #46	; 0x2e
 800149c:	701a      	strb	r2, [r3, #0]

    // Đảm bảo luôn có 2 chữ số phần thập phân
    data[idx++] = (frac_part / 10) + '0';
 800149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a0:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <float_to_string+0x188>)
 80014a2:	fb82 1203 	smull	r1, r2, r2, r3
 80014a6:	1092      	asrs	r2, r2, #2
 80014a8:	17db      	asrs	r3, r3, #31
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	1c59      	adds	r1, r3, #1
 80014b2:	6239      	str	r1, [r7, #32]
 80014b4:	4619      	mov	r1, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	440b      	add	r3, r1
 80014ba:	3230      	adds	r2, #48	; 0x30
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	701a      	strb	r2, [r3, #0]
    data[idx++] = (frac_part % 10) + '0';
 80014c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <float_to_string+0x188>)
 80014c4:	fb83 1302 	smull	r1, r3, r3, r2
 80014c8:	1099      	asrs	r1, r3, #2
 80014ca:	17d3      	asrs	r3, r2, #31
 80014cc:	1ac9      	subs	r1, r1, r3
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	1ad1      	subs	r1, r2, r3
 80014d8:	b2ca      	uxtb	r2, r1
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	1c59      	adds	r1, r3, #1
 80014de:	6239      	str	r1, [r7, #32]
 80014e0:	4619      	mov	r1, r3
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	440b      	add	r3, r1
 80014e6:	3230      	adds	r2, #48	; 0x30
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	701a      	strb	r2, [r3, #0]

    // Thêm newline
    data[idx++] = '\n';
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	623a      	str	r2, [r7, #32]
 80014f2:	461a      	mov	r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	220a      	movs	r2, #10
 80014fa:	701a      	strb	r2, [r3, #0]

    // Kết thúc chuỗi nếu cần
    data[idx] = '\0';
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	; 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	42c80000 	.word	0x42c80000
 8001514:	66666667 	.word	0x66666667

08001518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b090      	sub	sp, #64	; 0x40
 800151c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	2228      	movs	r2, #40	; 0x28
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f843 	bl	80035b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153a:	2302      	movs	r3, #2
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001542:	2310      	movs	r3, #16
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001546:	2300      	movs	r3, #0
 8001548:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f000 faea 	bl	8001b28 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800155a:	f000 f82f 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fd58 	bl	800202c <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001582:	f000 f81b 	bl	80015bc <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3740      	adds	r7, #64	; 0x40
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_GPIO_Init+0x28>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <MX_GPIO_Init+0x28>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6193      	str	r3, [r2, #24]
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <MX_GPIO_Init+0x28>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_MspInit+0x5c>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_MspInit+0x5c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_MspInit+0x5c>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_MspInit+0x5c>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_MspInit+0x5c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_MspInit+0x5c>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <HAL_MspInit+0x60>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_MspInit+0x60>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001672:	f000 f935 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  return 1;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <_kill>:

int _kill(int pid, int sig)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001692:	f002 f85d 	bl	8003750 <__errno>
 8001696:	4603      	mov	r3, r0
 8001698:	2216      	movs	r2, #22
 800169a:	601a      	str	r2, [r3, #0]
  return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffe7 	bl	8001688 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ba:	e7fe      	b.n	80016ba <_exit+0x12>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
  }

  return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e009      	b.n	800171c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbf1      	blt.n	8001708 <_write+0x12>
  }
  return len;
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_close>:

int _close(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001754:	605a      	str	r2, [r3, #4]
  return 0;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <_isatty>:

int _isatty(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
	...

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f001 ffc6 	bl	8003750 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20005000 	.word	0x20005000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	20000274 	.word	0x20000274
 80017f8:	200003d8 	.word	0x200003d8

080017fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001808:	f7ff fff8 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800180e:	490c      	ldr	r1, [pc, #48]	; (8001840 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a09      	ldr	r2, [pc, #36]	; (8001848 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001824:	4c09      	ldr	r4, [pc, #36]	; (800184c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001832:	f001 ff93 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001836:	f7ff fcd7 	bl	80011e8 <main>
  bx lr
 800183a:	4770      	bx	lr
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001844:	080058f0 	.word	0x080058f0
  ldr r2, =_sbss
 8001848:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800184c:	200003d4 	.word	0x200003d4

08001850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_2_IRQHandler>
	...

08001854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x28>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x28>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f92b 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff feaa 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f935 	bl	8001b0e <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f90b 	bl	8001ad6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000001c 	.word	0x2000001c
 80018d8:	20000024 	.word	0x20000024
 80018dc:	20000020 	.word	0x20000020

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_IncTick+0x1c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_IncTick+0x20>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a03      	ldr	r2, [pc, #12]	; (8001900 <HAL_IncTick+0x20>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000024 	.word	0x20000024
 8001900:	20000278 	.word	0x20000278

08001904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <HAL_GetTick+0x10>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000278 	.word	0x20000278

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fff0 	bl	8001904 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffe0 	bl	8001904 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000024 	.word	0x20000024

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a8c:	d301      	bcc.n	8001a92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00f      	b.n	8001ab2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <SysTick_Config+0x40>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f7ff ff90 	bl	80019c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <SysTick_Config+0x40>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SysTick_Config+0x40>)
 8001aac:	2207      	movs	r2, #7
 8001aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	e000e010 	.word	0xe000e010

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff49 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae8:	f7ff ff5e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001aec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	6978      	ldr	r0, [r7, #20]
 8001af4:	f7ff ff90 	bl	8001a18 <NVIC_EncodePriority>
 8001af8:	4602      	mov	r2, r0
 8001afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afe:	4611      	mov	r1, r2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff5f 	bl	80019c4 <__NVIC_SetPriority>
}
 8001b06:	bf00      	nop
 8001b08:	3718      	adds	r7, #24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffb0 	bl	8001a7c <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e272      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8087 	beq.w	8001c56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b48:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d00c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d112      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5e>
 8001b60:	4b8c      	ldr	r3, [pc, #560]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d10b      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d06c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x12c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d168      	bne.n	8001c54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e24c      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x76>
 8001b90:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e02e      	b.n	8001bfc <HAL_RCC_OscConfig+0xd4>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x98>
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a77      	ldr	r2, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e01d      	b.n	8001bfc <HAL_RCC_OscConfig+0xd4>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0xbc>
 8001bca:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a71      	ldr	r2, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6e      	ldr	r2, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0xd4>
 8001be4:	4b6b      	ldr	r3, [pc, #428]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a67      	ldr	r2, [pc, #412]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fe7e 	bl	8001904 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fe7a 	bl	8001904 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e200      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0xe4>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fe6a 	bl	8001904 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fe66 	bl	8001904 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1ec      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x10c>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c6e:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d11c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x18c>
 8001c7a:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_RCC_OscConfig+0x176>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1c0      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4939      	ldr	r1, [pc, #228]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	e03a      	b.n	8001d2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fe1f 	bl	8001904 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff fe1b 	bl	8001904 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1a1      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4927      	ldr	r1, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fdfe 	bl	8001904 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fdfa 	bl	8001904 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e180      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03a      	beq.n	8001dac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d019      	beq.n	8001d72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff fdde 	bl	8001904 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fdda 	bl	8001904 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e160      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 fa9c 	bl	80022a8 <RCC_Delay>
 8001d70:	e01c      	b.n	8001dac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff fdc4 	bl	8001904 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7e:	e00f      	b.n	8001da0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff fdc0 	bl	8001904 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d908      	bls.n	8001da0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e146      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	42420000 	.word	0x42420000
 8001d9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b92      	ldr	r3, [pc, #584]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e9      	bne.n	8001d80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a6 	beq.w	8001f06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10d      	bne.n	8001de6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b88      	ldr	r3, [pc, #544]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a87      	ldr	r2, [pc, #540]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	61d3      	str	r3, [r2, #28]
 8001dd6:	4b85      	ldr	r3, [pc, #532]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b82      	ldr	r3, [pc, #520]	; (8001ff0 <HAL_RCC_OscConfig+0x4c8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b7f      	ldr	r3, [pc, #508]	; (8001ff0 <HAL_RCC_OscConfig+0x4c8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a7e      	ldr	r2, [pc, #504]	; (8001ff0 <HAL_RCC_OscConfig+0x4c8>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fd81 	bl	8001904 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff fd7d 	bl	8001904 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e103      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCC_OscConfig+0x4c8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x312>
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a6e      	ldr	r2, [pc, #440]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	e02d      	b.n	8001e96 <HAL_RCC_OscConfig+0x36e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x334>
 8001e42:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a69      	ldr	r2, [pc, #420]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a66      	ldr	r2, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	e01c      	b.n	8001e96 <HAL_RCC_OscConfig+0x36e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x356>
 8001e64:	4b61      	ldr	r3, [pc, #388]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a60      	ldr	r2, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a5d      	ldr	r2, [pc, #372]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	e00b      	b.n	8001e96 <HAL_RCC_OscConfig+0x36e>
 8001e7e:	4b5b      	ldr	r3, [pc, #364]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a5a      	ldr	r2, [pc, #360]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b58      	ldr	r3, [pc, #352]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a57      	ldr	r2, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d015      	beq.n	8001eca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fd31 	bl	8001904 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7ff fd2d 	bl	8001904 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0b1      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	4b4b      	ldr	r3, [pc, #300]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ee      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
 8001ec8:	e014      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fd1b 	bl	8001904 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff fd17 	bl	8001904 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e09b      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	4b40      	ldr	r3, [pc, #256]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a3b      	ldr	r2, [pc, #236]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8087 	beq.w	800201e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f10:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d061      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d146      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_RCC_OscConfig+0x4cc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fceb 	bl	8001904 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff fce7 	bl	8001904 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e06d      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4921      	ldr	r1, [pc, #132]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a19      	ldr	r1, [r3, #32]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	491b      	ldr	r1, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fcbb 	bl	8001904 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff fcb7 	bl	8001904 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e03d      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x46a>
 8001fb0:	e035      	b.n	800201e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_RCC_OscConfig+0x4cc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fca4 	bl	8001904 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff fca0 	bl	8001904 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e026      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x498>
 8001fde:	e01e      	b.n	800201e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e019      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x500>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0d0      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d910      	bls.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4965      	ldr	r1, [pc, #404]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d040      	beq.n	800214c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d115      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e073      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06b      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4936      	ldr	r1, [pc, #216]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800211c:	f7ff fbf2 	bl	8001904 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff fbee 	bl	8001904 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e053      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d210      	bcs.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4922      	ldr	r1, [pc, #136]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1cc>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1d0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fb50 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	080054b8 	.word	0x080054b8
 80021f8:	2000001c 	.word	0x2000001c
 80021fc:	20000020 	.word	0x20000020

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_RCC_GetSysClockFreq+0x94>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d002      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x30>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d003      	beq.n	8002236 <HAL_RCC_GetSysClockFreq+0x36>
 800222e:	e027      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_GetSysClockFreq+0x98>)
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	e027      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	0c9b      	lsrs	r3, r3, #18
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_RCC_GetSysClockFreq+0x94>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	0c5b      	lsrs	r3, r3, #17
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_RCC_GetSysClockFreq+0x98>)
 8002262:	fb03 f202 	mul.w	r2, r3, r2
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	fbb2 f3f3 	udiv	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	e004      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	613b      	str	r3, [r7, #16]
      break;
 800227e:	e002      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_RCC_GetSysClockFreq+0x98>)
 8002282:	613b      	str	r3, [r7, #16]
      break;
 8002284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002286:	693b      	ldr	r3, [r7, #16]
}
 8002288:	4618      	mov	r0, r3
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	007a1200 	.word	0x007a1200
 800229c:	080054c8 	.word	0x080054c8
 80022a0:	080054d8 	.word	0x080054d8
 80022a4:	003d0900 	.word	0x003d0900

080022a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <RCC_Delay+0x34>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <RCC_Delay+0x38>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0a5b      	lsrs	r3, r3, #9
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c4:	bf00      	nop
  }
  while (Delay --);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1e5a      	subs	r2, r3, #1
 80022ca:	60fa      	str	r2, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <RCC_Delay+0x1c>
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	2000001c 	.word	0x2000001c
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <CalculatorPID>:
 *
 * @param pid Con trỏ đến cấu trúc PID_t chứa các thông số PID và trạng thái trước đó.
 * @param current_value Giá trị hiện tại của hệ thống (giá trị đo được).
 */
void CalculatorPID(PID_t *pid, float* current_value)
{
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	float tpm = *current_value;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	617b      	str	r3, [r7, #20]
    float error = pid->setpoint - tpm;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fbf2 	bl	8000ae4 <__aeabi_fsub>
 8002300:	4603      	mov	r3, r0
 8002302:	613b      	str	r3, [r7, #16]

    // Tích lũy sai số để tính thành phần tích phân
    pid->integral += error;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	6939      	ldr	r1, [r7, #16]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fbec 	bl	8000ae8 <__addsf3>
 8002310:	4603      	mov	r3, r0
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	615a      	str	r2, [r3, #20]

    // Tính đạo hàm của sai số
    float derivative = error - pid->previos_error;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4619      	mov	r1, r3
 800231e:	6938      	ldr	r0, [r7, #16]
 8002320:	f7fe fbe0 	bl	8000ae4 <__aeabi_fsub>
 8002324:	4603      	mov	r3, r0
 8002326:	60fb      	str	r3, [r7, #12]

    // Tính đầu ra PID
    pid->output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6939      	ldr	r1, [r7, #16]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fce2 	bl	8000cf8 <__aeabi_fmul>
 8002334:	4603      	mov	r3, r0
 8002336:	461c      	mov	r4, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4619      	mov	r1, r3
 8002342:	4610      	mov	r0, r2
 8002344:	f7fe fcd8 	bl	8000cf8 <__aeabi_fmul>
 8002348:	4603      	mov	r3, r0
 800234a:	4619      	mov	r1, r3
 800234c:	4620      	mov	r0, r4
 800234e:	f7fe fbcb 	bl	8000ae8 <__addsf3>
 8002352:	4603      	mov	r3, r0
 8002354:	461c      	mov	r4, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	68f9      	ldr	r1, [r7, #12]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fccb 	bl	8000cf8 <__aeabi_fmul>
 8002362:	4603      	mov	r3, r0
 8002364:	4619      	mov	r1, r3
 8002366:	4620      	mov	r0, r4
 8002368:	f7fe fbbe 	bl	8000ae8 <__addsf3>
 800236c:	4603      	mov	r3, r0
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]
    *current_value = pid->output;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	601a      	str	r2, [r3, #0]
    // Cập nhật sai số trước đó
    pid->previos_error = error;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	611a      	str	r2, [r3, #16]
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd90      	pop	{r4, r7, pc}
	...

0800238c <DMA1_Channel5_IRQHandler>:
	{
		DMA1_Chanel5_CallBackFunction = cb ;
	}
}
void DMA1_Channel5_IRQHandler()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	if(DMA1_Chanel5_CallBackFunction != NULL_PTR)
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <DMA1_Channel5_IRQHandler+0x18>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <DMA1_Channel5_IRQHandler+0x12>
	{
		DMA1_Chanel5_CallBackFunction();
 8002398:	4b02      	ldr	r3, [pc, #8]	; (80023a4 <DMA1_Channel5_IRQHandler+0x18>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4798      	blx	r3
	}
	else
	{
// Do nothing
	}
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000027c 	.word	0x2000027c

080023a8 <__NVIC_EnableIRQ>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <__NVIC_EnableIRQ+0x34>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <HAL_UART_Init>:

/*
    Initialize UART with configuration: clock, GPIO, BRR calculation, DMA/Interrupt/Pin swap if enabled
*/
void HAL_UART_Init(const HAL_UART_t* config)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    USART_TypeDef* usart = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]

    // Select UART port and enable corresponding clocks and configure GPIO
    if (config->uart_port == USART1) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_UART_Init+0x1cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11c      	bne.n	8002430 <HAL_UART_Init+0x50>
        usart = USART1;
 80023f6:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_UART_Init+0x1cc>)
 80023f8:	60fb      	str	r3, [r7, #12]
        RCC->APB2ENR |= RCC_APB2ENR_USART1EN | RCC_APB2ENR_IOPAEN | RCC_APB2ENR_AFIOEN;
 80023fa:	4b6d      	ldr	r3, [pc, #436]	; (80025b0 <HAL_UART_Init+0x1d0>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a6c      	ldr	r2, [pc, #432]	; (80025b0 <HAL_UART_Init+0x1d0>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	f043 0305 	orr.w	r3, r3, #5
 8002408:	6193      	str	r3, [r2, #24]
        RCC->AHBENR  |= RCC_AHBENR_DMA1EN;
 800240a:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_UART_Init+0x1d0>)
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	4a68      	ldr	r2, [pc, #416]	; (80025b0 <HAL_UART_Init+0x1d0>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6153      	str	r3, [r2, #20]

        // PA9: TX (AF Push-Pull), PA10: RX (Default input floating)
        GPIOA->CRH |= (0x3 << GPIO_CRH_MODE9_Pos);
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_UART_Init+0x1d4>)
 800241c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002420:	6053      	str	r3, [r2, #4]
        GPIOA->CRH |= (0x2 << GPIO_CRH_CNF9_Pos);
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242c:	6053      	str	r3, [r2, #4]
 800242e:	e036      	b.n	800249e <HAL_UART_Init+0xbe>

    } else if (config->uart_port == USART2) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a60      	ldr	r2, [pc, #384]	; (80025b8 <HAL_UART_Init+0x1d8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d131      	bne.n	800249e <HAL_UART_Init+0xbe>
        usart = USART2;
 800243a:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <HAL_UART_Init+0x1d8>)
 800243c:	60fb      	str	r3, [r7, #12]
        RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800243e:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <HAL_UART_Init+0x1d0>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_UART_Init+0x1d0>)
 8002444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002448:	61d3      	str	r3, [r2, #28]
        RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800244a:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_UART_Init+0x1d0>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	4a58      	ldr	r2, [pc, #352]	; (80025b0 <HAL_UART_Init+0x1d0>)
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6193      	str	r3, [r2, #24]

        // PA2: TX (AF Push-Pull), PA3: RX (Input floating)
        GPIOA->CRL &= ~GPIO_CRL_CNF2;
 8002456:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a56      	ldr	r2, [pc, #344]	; (80025b4 <HAL_UART_Init+0x1d4>)
 800245c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002460:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF2_1;
 8002462:	4b54      	ldr	r3, [pc, #336]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a53      	ldr	r2, [pc, #332]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002468:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800246c:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_MODE2;
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002474:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002478:	6013      	str	r3, [r2, #0]

        GPIOA->CRL &= ~GPIO_CRL_CNF3;
 800247a:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_UART_Init+0x1d4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002484:	6013      	str	r3, [r2, #0]
        GPIOA->CRL |= GPIO_CRL_CNF3_0;
 8002486:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_UART_Init+0x1d4>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6013      	str	r3, [r2, #0]
        GPIOA->CRL &= ~GPIO_CRL_MODE3;
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_UART_Init+0x1d4>)
 8002498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800249c:	6013      	str	r3, [r2, #0]
    }

    // Calculate and set BRR register for baudrate
    uint16_t mantissa = 0, fraction = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	2300      	movs	r3, #0
 80024a4:	813b      	strh	r3, [r7, #8]
    HAL_UART_Calculation_BRR(config->clock_input, config->baudrate, &mantissa, &fraction);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6898      	ldr	r0, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	f107 020a 	add.w	r2, r7, #10
 80024b6:	f000 f8d6 	bl	8002666 <HAL_UART_Calculation_BRR>
    usart->BRR = (mantissa << 4) | (fraction & 0x0F);
 80024ba:	897b      	ldrh	r3, [r7, #10]
 80024bc:	011a      	lsls	r2, r3, #4
 80024be:	893b      	ldrh	r3, [r7, #8]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	4313      	orrs	r3, r2
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

    // Enable UART: Transmit, Receive, UART Enable
    usart->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f043 020c 	orr.w	r2, r3, #12
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	60da      	str	r2, [r3, #12]
    usart->CR1 |= USART_CR1_UE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	60da      	str	r2, [r3, #12]

    // Enable DMA if required
    if (config->use_dma == HAL_UART_DMA_ENABLE) {
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7c1b      	ldrb	r3, [r3, #16]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d11d      	bne.n	8002528 <HAL_UART_Init+0x148>
        usart->CR3 |= USART_CR3_DMAR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	615a      	str	r2, [r3, #20]

        // Cấu hình DMA1 Channel5 cho USART1_RX (theo Reference Manual)
        DMA1_Channel5->CCR &= ~DMA_CCR_EN; // Tắt DMA trước khi cấu hình
 80024f8:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_UART_Init+0x1dc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_UART_Init+0x1dc>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	6013      	str	r3, [r2, #0]

        DMA1_Channel5->CPAR = (uint32_t)&(USART1->DR);          // Địa chỉ ngoại vi: thanh ghi dữ liệu USART1
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_UART_Init+0x1dc>)
 8002506:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <HAL_UART_Init+0x1e0>)
 8002508:	609a      	str	r2, [r3, #8]
        DMA1_Channel5->CMAR = (uint32_t)(config->dma_rx_buffer); // Địa chỉ bộ nhớ đích
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_UART_Init+0x1dc>)
 8002510:	60da      	str	r2, [r3, #12]
        DMA1_Channel5->CNDTR = config->dma_rx_size;             // Số lượng byte cần nhận
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8b1a      	ldrh	r2, [r3, #24]
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_UART_Init+0x1dc>)
 8002518:	605a      	str	r2, [r3, #4]
        // - Đọc từ ngoại vi
        // - Tăng địa chỉ bộ nhớ
        // - Kích hoạt ngắt hoàn thành
        // - Ưu tiên cao
        // - Chế độ circular nếu cần
        DMA1_Channel5->CCR =
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_UART_Init+0x1dc>)
 800251c:	f242 02a3 	movw	r2, #8355	; 0x20a3
 8002520:	601a      	str	r2, [r3, #0]
            | DMA_CCR_PL_1      // Priority level high
            | DMA_CCR_CIRC      // Optional: circular mode (nếu muốn lặp vòng)
            | DMA_CCR_EN;       // Enable DMA

        // Bật ngắt DMA trong NVIC nếu cần
        NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002522:	200f      	movs	r0, #15
 8002524:	f7ff ff40 	bl	80023a8 <__NVIC_EnableIRQ>
    }

    // Enable interrupt and NVIC if required
    if (config->rx_interrupt == HAL_UART_INTERRUPT_ENABLE || config->tx_interrupt == HAL_UART_INTERRUPT_ENABLE) {
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	7bdb      	ldrb	r3, [r3, #15]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d003      	beq.n	8002538 <HAL_UART_Init+0x158>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7b9b      	ldrb	r3, [r3, #14]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d12a      	bne.n	800258e <HAL_UART_Init+0x1ae>
    	if(config->rx_interrupt == HAL_UART_INTERRUPT_ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7bdb      	ldrb	r3, [r3, #15]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d105      	bne.n	800254c <HAL_UART_Init+0x16c>
    	{
            usart->CR1 |= USART_CR1_RXNEIE;  // Enable receive interrupt
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	60da      	str	r2, [r3, #12]
    	}
    	if(config->tx_interrupt == HAL_UART_INTERRUPT_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7b9b      	ldrb	r3, [r3, #14]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_UART_Init+0x180>
    	{
            usart->CR1 |= USART_CR1_TXEIE;   // Enable transmit interrupt (if needed)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	60da      	str	r2, [r3, #12]
    	}
        if (config->uart_port == USART1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a11      	ldr	r2, [pc, #68]	; (80025ac <HAL_UART_Init+0x1cc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d106      	bne.n	8002578 <HAL_UART_Init+0x198>
            NVIC->ISER[USART1_IRQn / 32] |= (1 << (USART1_IRQn % 32));
 800256a:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_UART_Init+0x1e4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <HAL_UART_Init+0x1e4>)
 8002570:	f043 0320 	orr.w	r3, r3, #32
 8002574:	6053      	str	r3, [r2, #4]
 8002576:	e00a      	b.n	800258e <HAL_UART_Init+0x1ae>
        else if (config->uart_port == USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0e      	ldr	r2, [pc, #56]	; (80025b8 <HAL_UART_Init+0x1d8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d105      	bne.n	800258e <HAL_UART_Init+0x1ae>
            NVIC->ISER[USART2_IRQn / 32] |= (1 << (USART2_IRQn % 32));
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_UART_Init+0x1e4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <HAL_UART_Init+0x1e4>)
 8002588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258c:	6053      	str	r3, [r2, #4]
    }

    // Remap UART pins if required
    if (config->swap_pins == HAL_UART_SWAP_ENABLE) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	7c5b      	ldrb	r3, [r3, #17]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_UART_Init+0x1c2>
        AFIO->MAPR |= AFIO_MAPR_USART1_REMAP;
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <HAL_UART_Init+0x1e8>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <HAL_UART_Init+0x1e8>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6053      	str	r3, [r2, #4]
    }
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40013800 	.word	0x40013800
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40010800 	.word	0x40010800
 80025b8:	40004400 	.word	0x40004400
 80025bc:	40020058 	.word	0x40020058
 80025c0:	40013804 	.word	0x40013804
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	40010000 	.word	0x40010000

080025cc <HAL_UART_Transfer>:

/*
    Transfer a null-terminated string over UART
*/
void HAL_UART_Transfer(const HAL_UART_t* uart, const uint8_t* data)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	81fb      	strh	r3, [r7, #14]
    while (data[index] != '\0') {
 80025da:	e00a      	b.n	80025f2 <HAL_UART_Transfer+0x26>
        HAL_UART_Transfer_Char(uart, data[index]);
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f826 	bl	8002638 <HAL_UART_Transfer_Char>
        index++;
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	3301      	adds	r3, #1
 80025f0:	81fb      	strh	r3, [r7, #14]
    while (data[index] != '\0') {
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ee      	bne.n	80025dc <HAL_UART_Transfer+0x10>
    }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_UART_Read>:

/*
    Blocking read one byte from UART
*/
uint8_t HAL_UART_Read(const HAL_UART_t* uart)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	uint8_t retVal = 0 ;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
    while (!(uart->uart_port->SR & USART_SR_RXNE)) {
 8002614:	bf00      	nop
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0320 	and.w	r3, r3, #32
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f8      	beq.n	8002616 <HAL_UART_Read+0xe>
        // Wait until data is received
    }
    retVal = (uint8_t)(uart->uart_port->DR & 0xFF);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	73fb      	strb	r3, [r7, #15]
    return retVal;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <HAL_UART_Transfer_Char>:

/*
    Internal: Transfer a single character over UART
*/
static void HAL_UART_Transfer_Char(const HAL_UART_t* uart, uint8_t c)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
    while (!(uart->uart_port->SR & USART_SR_TXE)) {
 8002644:	bf00      	nop
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f8      	beq.n	8002646 <HAL_UART_Transfer_Char+0xe>
        // Wait until transmit buffer is empty
    }
    uart->uart_port->DR = c;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	605a      	str	r2, [r3, #4]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_UART_Calculation_BRR>:

/*
    Internal: Calculate BRR value from clock and baudrate
*/
static void HAL_UART_Calculation_BRR(uint32_t ClockInput, uint32_t Baudrate, uint16_t* Mantissa, uint16_t* Fraction)
{
 8002666:	b590      	push	{r4, r7, lr}
 8002668:	b087      	sub	sp, #28
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
    float usartdiv = (float)ClockInput / (16 * Baudrate);
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7fe fae7 	bl	8000c48 <__aeabi_ui2f>
 800267a:	4604      	mov	r4, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fae1 	bl	8000c48 <__aeabi_ui2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4619      	mov	r1, r3
 800268a:	4620      	mov	r0, r4
 800268c:	f7fe fbe8 	bl	8000e60 <__aeabi_fdiv>
 8002690:	4603      	mov	r3, r0
 8002692:	617b      	str	r3, [r7, #20]
    *Mantissa = (uint16_t)usartdiv;
 8002694:	6978      	ldr	r0, [r7, #20]
 8002696:	f7fe fd1b 	bl	80010d0 <__aeabi_f2uiz>
 800269a:	4603      	mov	r3, r0
 800269c:	b29a      	uxth	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	801a      	strh	r2, [r3, #0]
    *Fraction = (uint16_t)((usartdiv - *Mantissa) * 16);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fad2 	bl	8000c50 <__aeabi_i2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4619      	mov	r1, r3
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f7fe fa17 	bl	8000ae4 <__aeabi_fsub>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fb1b 	bl	8000cf8 <__aeabi_fmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fd03 	bl	80010d0 <__aeabi_f2uiz>
 80026ca:	4603      	mov	r3, r0
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	801a      	strh	r2, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	371c      	adds	r7, #28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd90      	pop	{r4, r7, pc}
	...

080026dc <HAL_UART_SetRxCallBack>:
    {
    	UART1_TX_Callback = cb_tx;
    }
}
void HAL_UART_SetRxCallBack(const HAL_UART_t* uart, HAL_UART_CallBack_t cb_rx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    if (uart->uart_port == USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_UART_SetRxCallBack+0x24>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d102      	bne.n	80026f6 <HAL_UART_SetRxCallBack+0x1a>
    {
    	UART1_RX_Callback = cb_rx;
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_UART_SetRxCallBack+0x28>)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6013      	str	r3, [r2, #0]
    }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40013800 	.word	0x40013800
 8002704:	20000280 	.word	0x20000280

08002708 <USART1_IRQHandler>:

/*
    USART1 interrupt handler: distinguish RXNE vs TXE and call callback
*/
void USART1_IRQHandler()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
    if (USART1->SR & USART_SR_RXNE) {
 800270c:	4b10      	ldr	r3, [pc, #64]	; (8002750 <USART1_IRQHandler+0x48>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <USART1_IRQHandler+0x1e>
        // Data received
        if (UART1_RX_Callback != NULL_PTR) {
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <USART1_IRQHandler+0x4c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <USART1_IRQHandler+0x1e>
        	UART1_RX_Callback();  // You may define a more specific RX callback
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <USART1_IRQHandler+0x4c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4798      	blx	r3
        }
    }

    if (USART1->SR & USART_SR_TXE) {
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <USART1_IRQHandler+0x48>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00c      	beq.n	800274c <USART1_IRQHandler+0x44>
        // Transmit buffer empty
        // Implement TX callback if needed or disable TXE interrupt when done
    	if(UART1_TX_Callback != NULL_PTR)
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <USART1_IRQHandler+0x50>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <USART1_IRQHandler+0x44>
    	{
        	UART1_TX_Callback();
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <USART1_IRQHandler+0x50>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4798      	blx	r3
            USART1->CR1 &= ~USART_CR1_TXEIE;  // Optional: disable to prevent repeated interrupts
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <USART1_IRQHandler+0x48>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a02      	ldr	r2, [pc, #8]	; (8002750 <USART1_IRQHandler+0x48>)
 8002746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800274a:	60d3      	str	r3, [r2, #12]
    	}
    }
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40013800 	.word	0x40013800
 8002754:	20000280 	.word	0x20000280
 8002758:	20000284 	.word	0x20000284

0800275c <atof>:
 800275c:	2100      	movs	r1, #0
 800275e:	f000 be17 	b.w	8003390 <strtod>

08002762 <sulp>:
 8002762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002766:	460f      	mov	r7, r1
 8002768:	4690      	mov	r8, r2
 800276a:	f002 f825 	bl	80047b8 <__ulp>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	f1b8 0f00 	cmp.w	r8, #0
 8002776:	d011      	beq.n	800279c <sulp+0x3a>
 8002778:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800277c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002780:	2b00      	cmp	r3, #0
 8002782:	dd0b      	ble.n	800279c <sulp+0x3a>
 8002784:	2400      	movs	r4, #0
 8002786:	051b      	lsls	r3, r3, #20
 8002788:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800278c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002790:	4622      	mov	r2, r4
 8002792:	462b      	mov	r3, r5
 8002794:	f7fd fe98 	bl	80004c8 <__aeabi_dmul>
 8002798:	4604      	mov	r4, r0
 800279a:	460d      	mov	r5, r1
 800279c:	4620      	mov	r0, r4
 800279e:	4629      	mov	r1, r5
 80027a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027a4:	0000      	movs	r0, r0
	...

080027a8 <_strtod_l>:
 80027a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ac:	b09f      	sub	sp, #124	; 0x7c
 80027ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80027b0:	2200      	movs	r2, #0
 80027b2:	4604      	mov	r4, r0
 80027b4:	921a      	str	r2, [sp, #104]	; 0x68
 80027b6:	460d      	mov	r5, r1
 80027b8:	f04f 0800 	mov.w	r8, #0
 80027bc:	f04f 0900 	mov.w	r9, #0
 80027c0:	460a      	mov	r2, r1
 80027c2:	9219      	str	r2, [sp, #100]	; 0x64
 80027c4:	7811      	ldrb	r1, [r2, #0]
 80027c6:	292b      	cmp	r1, #43	; 0x2b
 80027c8:	d04a      	beq.n	8002860 <_strtod_l+0xb8>
 80027ca:	d838      	bhi.n	800283e <_strtod_l+0x96>
 80027cc:	290d      	cmp	r1, #13
 80027ce:	d832      	bhi.n	8002836 <_strtod_l+0x8e>
 80027d0:	2908      	cmp	r1, #8
 80027d2:	d832      	bhi.n	800283a <_strtod_l+0x92>
 80027d4:	2900      	cmp	r1, #0
 80027d6:	d03b      	beq.n	8002850 <_strtod_l+0xa8>
 80027d8:	2200      	movs	r2, #0
 80027da:	920e      	str	r2, [sp, #56]	; 0x38
 80027dc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80027de:	7832      	ldrb	r2, [r6, #0]
 80027e0:	2a30      	cmp	r2, #48	; 0x30
 80027e2:	f040 80b2 	bne.w	800294a <_strtod_l+0x1a2>
 80027e6:	7872      	ldrb	r2, [r6, #1]
 80027e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80027ec:	2a58      	cmp	r2, #88	; 0x58
 80027ee:	d16e      	bne.n	80028ce <_strtod_l+0x126>
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027f4:	4620      	mov	r0, r4
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	ab1a      	add	r3, sp, #104	; 0x68
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4a8c      	ldr	r2, [pc, #560]	; (8002a30 <_strtod_l+0x288>)
 80027fe:	ab1b      	add	r3, sp, #108	; 0x6c
 8002800:	a919      	add	r1, sp, #100	; 0x64
 8002802:	f001 f8b5 	bl	8003970 <__gethex>
 8002806:	f010 070f 	ands.w	r7, r0, #15
 800280a:	4605      	mov	r5, r0
 800280c:	d005      	beq.n	800281a <_strtod_l+0x72>
 800280e:	2f06      	cmp	r7, #6
 8002810:	d128      	bne.n	8002864 <_strtod_l+0xbc>
 8002812:	2300      	movs	r3, #0
 8002814:	3601      	adds	r6, #1
 8002816:	9619      	str	r6, [sp, #100]	; 0x64
 8002818:	930e      	str	r3, [sp, #56]	; 0x38
 800281a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 85a0 	bne.w	8003362 <_strtod_l+0xbba>
 8002822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002824:	b1cb      	cbz	r3, 800285a <_strtod_l+0xb2>
 8002826:	4642      	mov	r2, r8
 8002828:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	b01f      	add	sp, #124	; 0x7c
 8002832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002836:	2920      	cmp	r1, #32
 8002838:	d1ce      	bne.n	80027d8 <_strtod_l+0x30>
 800283a:	3201      	adds	r2, #1
 800283c:	e7c1      	b.n	80027c2 <_strtod_l+0x1a>
 800283e:	292d      	cmp	r1, #45	; 0x2d
 8002840:	d1ca      	bne.n	80027d8 <_strtod_l+0x30>
 8002842:	2101      	movs	r1, #1
 8002844:	910e      	str	r1, [sp, #56]	; 0x38
 8002846:	1c51      	adds	r1, r2, #1
 8002848:	9119      	str	r1, [sp, #100]	; 0x64
 800284a:	7852      	ldrb	r2, [r2, #1]
 800284c:	2a00      	cmp	r2, #0
 800284e:	d1c5      	bne.n	80027dc <_strtod_l+0x34>
 8002850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002852:	9519      	str	r5, [sp, #100]	; 0x64
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 8582 	bne.w	800335e <_strtod_l+0xbb6>
 800285a:	4642      	mov	r2, r8
 800285c:	464b      	mov	r3, r9
 800285e:	e7e5      	b.n	800282c <_strtod_l+0x84>
 8002860:	2100      	movs	r1, #0
 8002862:	e7ef      	b.n	8002844 <_strtod_l+0x9c>
 8002864:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002866:	b13a      	cbz	r2, 8002878 <_strtod_l+0xd0>
 8002868:	2135      	movs	r1, #53	; 0x35
 800286a:	a81c      	add	r0, sp, #112	; 0x70
 800286c:	f002 f890 	bl	8004990 <__copybits>
 8002870:	4620      	mov	r0, r4
 8002872:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002874:	f001 fc74 	bl	8004160 <_Bfree>
 8002878:	3f01      	subs	r7, #1
 800287a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800287c:	2f04      	cmp	r7, #4
 800287e:	d806      	bhi.n	800288e <_strtod_l+0xe6>
 8002880:	e8df f007 	tbb	[pc, r7]
 8002884:	201d0314 	.word	0x201d0314
 8002888:	14          	.byte	0x14
 8002889:	00          	.byte	0x00
 800288a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800288e:	05e9      	lsls	r1, r5, #23
 8002890:	bf48      	it	mi
 8002892:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8002896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800289a:	0d1b      	lsrs	r3, r3, #20
 800289c:	051b      	lsls	r3, r3, #20
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1bb      	bne.n	800281a <_strtod_l+0x72>
 80028a2:	f000 ff55 	bl	8003750 <__errno>
 80028a6:	2322      	movs	r3, #34	; 0x22
 80028a8:	6003      	str	r3, [r0, #0]
 80028aa:	e7b6      	b.n	800281a <_strtod_l+0x72>
 80028ac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80028b0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80028b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80028bc:	e7e7      	b.n	800288e <_strtod_l+0xe6>
 80028be:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002a34 <_strtod_l+0x28c>
 80028c2:	e7e4      	b.n	800288e <_strtod_l+0xe6>
 80028c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80028c8:	f04f 38ff 	mov.w	r8, #4294967295
 80028cc:	e7df      	b.n	800288e <_strtod_l+0xe6>
 80028ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	9219      	str	r2, [sp, #100]	; 0x64
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d0f9      	beq.n	80028ce <_strtod_l+0x126>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d09d      	beq.n	800281a <_strtod_l+0x72>
 80028de:	2301      	movs	r3, #1
 80028e0:	f04f 0a00 	mov.w	sl, #0
 80028e4:	220a      	movs	r2, #10
 80028e6:	46d3      	mov	fp, sl
 80028e8:	9305      	str	r3, [sp, #20]
 80028ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80028ec:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80028f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80028f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80028f4:	7806      	ldrb	r6, [r0, #0]
 80028f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80028fa:	b2d9      	uxtb	r1, r3
 80028fc:	2909      	cmp	r1, #9
 80028fe:	d926      	bls.n	800294e <_strtod_l+0x1a6>
 8002900:	2201      	movs	r2, #1
 8002902:	494d      	ldr	r1, [pc, #308]	; (8002a38 <_strtod_l+0x290>)
 8002904:	f000 fe5d 	bl	80035c2 <strncmp>
 8002908:	2800      	cmp	r0, #0
 800290a:	d030      	beq.n	800296e <_strtod_l+0x1c6>
 800290c:	2000      	movs	r0, #0
 800290e:	4632      	mov	r2, r6
 8002910:	4603      	mov	r3, r0
 8002912:	465e      	mov	r6, fp
 8002914:	9008      	str	r0, [sp, #32]
 8002916:	2a65      	cmp	r2, #101	; 0x65
 8002918:	d001      	beq.n	800291e <_strtod_l+0x176>
 800291a:	2a45      	cmp	r2, #69	; 0x45
 800291c:	d113      	bne.n	8002946 <_strtod_l+0x19e>
 800291e:	b91e      	cbnz	r6, 8002928 <_strtod_l+0x180>
 8002920:	9a05      	ldr	r2, [sp, #20]
 8002922:	4302      	orrs	r2, r0
 8002924:	d094      	beq.n	8002850 <_strtod_l+0xa8>
 8002926:	2600      	movs	r6, #0
 8002928:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800292a:	1c6a      	adds	r2, r5, #1
 800292c:	9219      	str	r2, [sp, #100]	; 0x64
 800292e:	786a      	ldrb	r2, [r5, #1]
 8002930:	2a2b      	cmp	r2, #43	; 0x2b
 8002932:	d074      	beq.n	8002a1e <_strtod_l+0x276>
 8002934:	2a2d      	cmp	r2, #45	; 0x2d
 8002936:	d078      	beq.n	8002a2a <_strtod_l+0x282>
 8002938:	f04f 0c00 	mov.w	ip, #0
 800293c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8002940:	2909      	cmp	r1, #9
 8002942:	d97f      	bls.n	8002a44 <_strtod_l+0x29c>
 8002944:	9519      	str	r5, [sp, #100]	; 0x64
 8002946:	2700      	movs	r7, #0
 8002948:	e09e      	b.n	8002a88 <_strtod_l+0x2e0>
 800294a:	2300      	movs	r3, #0
 800294c:	e7c8      	b.n	80028e0 <_strtod_l+0x138>
 800294e:	f1bb 0f08 	cmp.w	fp, #8
 8002952:	bfd8      	it	le
 8002954:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8002956:	f100 0001 	add.w	r0, r0, #1
 800295a:	bfd6      	itet	le
 800295c:	fb02 3301 	mlale	r3, r2, r1, r3
 8002960:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8002964:	930a      	strle	r3, [sp, #40]	; 0x28
 8002966:	f10b 0b01 	add.w	fp, fp, #1
 800296a:	9019      	str	r0, [sp, #100]	; 0x64
 800296c:	e7c1      	b.n	80028f2 <_strtod_l+0x14a>
 800296e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	9219      	str	r2, [sp, #100]	; 0x64
 8002974:	785a      	ldrb	r2, [r3, #1]
 8002976:	f1bb 0f00 	cmp.w	fp, #0
 800297a:	d037      	beq.n	80029ec <_strtod_l+0x244>
 800297c:	465e      	mov	r6, fp
 800297e:	9008      	str	r0, [sp, #32]
 8002980:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002984:	2b09      	cmp	r3, #9
 8002986:	d912      	bls.n	80029ae <_strtod_l+0x206>
 8002988:	2301      	movs	r3, #1
 800298a:	e7c4      	b.n	8002916 <_strtod_l+0x16e>
 800298c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800298e:	3001      	adds	r0, #1
 8002990:	1c5a      	adds	r2, r3, #1
 8002992:	9219      	str	r2, [sp, #100]	; 0x64
 8002994:	785a      	ldrb	r2, [r3, #1]
 8002996:	2a30      	cmp	r2, #48	; 0x30
 8002998:	d0f8      	beq.n	800298c <_strtod_l+0x1e4>
 800299a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800299e:	2b08      	cmp	r3, #8
 80029a0:	f200 84e4 	bhi.w	800336c <_strtod_l+0xbc4>
 80029a4:	9008      	str	r0, [sp, #32]
 80029a6:	2000      	movs	r0, #0
 80029a8:	4606      	mov	r6, r0
 80029aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80029ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80029ae:	3a30      	subs	r2, #48	; 0x30
 80029b0:	f100 0301 	add.w	r3, r0, #1
 80029b4:	d014      	beq.n	80029e0 <_strtod_l+0x238>
 80029b6:	9908      	ldr	r1, [sp, #32]
 80029b8:	eb00 0c06 	add.w	ip, r0, r6
 80029bc:	4419      	add	r1, r3
 80029be:	9108      	str	r1, [sp, #32]
 80029c0:	4633      	mov	r3, r6
 80029c2:	210a      	movs	r1, #10
 80029c4:	4563      	cmp	r3, ip
 80029c6:	d113      	bne.n	80029f0 <_strtod_l+0x248>
 80029c8:	1833      	adds	r3, r6, r0
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	f106 0601 	add.w	r6, r6, #1
 80029d0:	4406      	add	r6, r0
 80029d2:	dc1a      	bgt.n	8002a0a <_strtod_l+0x262>
 80029d4:	230a      	movs	r3, #10
 80029d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80029d8:	fb03 2301 	mla	r3, r3, r1, r2
 80029dc:	930a      	str	r3, [sp, #40]	; 0x28
 80029de:	2300      	movs	r3, #0
 80029e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80029e2:	4618      	mov	r0, r3
 80029e4:	1c51      	adds	r1, r2, #1
 80029e6:	9119      	str	r1, [sp, #100]	; 0x64
 80029e8:	7852      	ldrb	r2, [r2, #1]
 80029ea:	e7c9      	b.n	8002980 <_strtod_l+0x1d8>
 80029ec:	4658      	mov	r0, fp
 80029ee:	e7d2      	b.n	8002996 <_strtod_l+0x1ee>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f103 0301 	add.w	r3, r3, #1
 80029f6:	dc03      	bgt.n	8002a00 <_strtod_l+0x258>
 80029f8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80029fa:	434f      	muls	r7, r1
 80029fc:	970a      	str	r7, [sp, #40]	; 0x28
 80029fe:	e7e1      	b.n	80029c4 <_strtod_l+0x21c>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	bfd8      	it	le
 8002a04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8002a08:	e7dc      	b.n	80029c4 <_strtod_l+0x21c>
 8002a0a:	2e10      	cmp	r6, #16
 8002a0c:	bfdc      	itt	le
 8002a0e:	230a      	movle	r3, #10
 8002a10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8002a14:	e7e3      	b.n	80029de <_strtod_l+0x236>
 8002a16:	2300      	movs	r3, #0
 8002a18:	9308      	str	r3, [sp, #32]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e780      	b.n	8002920 <_strtod_l+0x178>
 8002a1e:	f04f 0c00 	mov.w	ip, #0
 8002a22:	1caa      	adds	r2, r5, #2
 8002a24:	9219      	str	r2, [sp, #100]	; 0x64
 8002a26:	78aa      	ldrb	r2, [r5, #2]
 8002a28:	e788      	b.n	800293c <_strtod_l+0x194>
 8002a2a:	f04f 0c01 	mov.w	ip, #1
 8002a2e:	e7f8      	b.n	8002a22 <_strtod_l+0x27a>
 8002a30:	080054e8 	.word	0x080054e8
 8002a34:	7ff00000 	.word	0x7ff00000
 8002a38:	080054da 	.word	0x080054da
 8002a3c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002a3e:	1c51      	adds	r1, r2, #1
 8002a40:	9119      	str	r1, [sp, #100]	; 0x64
 8002a42:	7852      	ldrb	r2, [r2, #1]
 8002a44:	2a30      	cmp	r2, #48	; 0x30
 8002a46:	d0f9      	beq.n	8002a3c <_strtod_l+0x294>
 8002a48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8002a4c:	2908      	cmp	r1, #8
 8002a4e:	f63f af7a 	bhi.w	8002946 <_strtod_l+0x19e>
 8002a52:	3a30      	subs	r2, #48	; 0x30
 8002a54:	9209      	str	r2, [sp, #36]	; 0x24
 8002a56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002a58:	920c      	str	r2, [sp, #48]	; 0x30
 8002a5a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002a5c:	1c57      	adds	r7, r2, #1
 8002a5e:	9719      	str	r7, [sp, #100]	; 0x64
 8002a60:	7852      	ldrb	r2, [r2, #1]
 8002a62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8002a66:	f1be 0f09 	cmp.w	lr, #9
 8002a6a:	d938      	bls.n	8002ade <_strtod_l+0x336>
 8002a6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a6e:	1a7f      	subs	r7, r7, r1
 8002a70:	2f08      	cmp	r7, #8
 8002a72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8002a76:	dc03      	bgt.n	8002a80 <_strtod_l+0x2d8>
 8002a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a7a:	428f      	cmp	r7, r1
 8002a7c:	bfa8      	it	ge
 8002a7e:	460f      	movge	r7, r1
 8002a80:	f1bc 0f00 	cmp.w	ip, #0
 8002a84:	d000      	beq.n	8002a88 <_strtod_l+0x2e0>
 8002a86:	427f      	negs	r7, r7
 8002a88:	2e00      	cmp	r6, #0
 8002a8a:	d14f      	bne.n	8002b2c <_strtod_l+0x384>
 8002a8c:	9905      	ldr	r1, [sp, #20]
 8002a8e:	4301      	orrs	r1, r0
 8002a90:	f47f aec3 	bne.w	800281a <_strtod_l+0x72>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f aedb 	bne.w	8002850 <_strtod_l+0xa8>
 8002a9a:	2a69      	cmp	r2, #105	; 0x69
 8002a9c:	d029      	beq.n	8002af2 <_strtod_l+0x34a>
 8002a9e:	dc26      	bgt.n	8002aee <_strtod_l+0x346>
 8002aa0:	2a49      	cmp	r2, #73	; 0x49
 8002aa2:	d026      	beq.n	8002af2 <_strtod_l+0x34a>
 8002aa4:	2a4e      	cmp	r2, #78	; 0x4e
 8002aa6:	f47f aed3 	bne.w	8002850 <_strtod_l+0xa8>
 8002aaa:	499a      	ldr	r1, [pc, #616]	; (8002d14 <_strtod_l+0x56c>)
 8002aac:	a819      	add	r0, sp, #100	; 0x64
 8002aae:	f001 f9a1 	bl	8003df4 <__match>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	f43f aecc 	beq.w	8002850 <_strtod_l+0xa8>
 8002ab8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b28      	cmp	r3, #40	; 0x28
 8002abe:	d12f      	bne.n	8002b20 <_strtod_l+0x378>
 8002ac0:	4995      	ldr	r1, [pc, #596]	; (8002d18 <_strtod_l+0x570>)
 8002ac2:	aa1c      	add	r2, sp, #112	; 0x70
 8002ac4:	a819      	add	r0, sp, #100	; 0x64
 8002ac6:	f001 f9a9 	bl	8003e1c <__hexnan>
 8002aca:	2805      	cmp	r0, #5
 8002acc:	d128      	bne.n	8002b20 <_strtod_l+0x378>
 8002ace:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002ad0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8002ad4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8002ad8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8002adc:	e69d      	b.n	800281a <_strtod_l+0x72>
 8002ade:	210a      	movs	r1, #10
 8002ae0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002ae2:	fb01 2107 	mla	r1, r1, r7, r2
 8002ae6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002aea:	9209      	str	r2, [sp, #36]	; 0x24
 8002aec:	e7b5      	b.n	8002a5a <_strtod_l+0x2b2>
 8002aee:	2a6e      	cmp	r2, #110	; 0x6e
 8002af0:	e7d9      	b.n	8002aa6 <_strtod_l+0x2fe>
 8002af2:	498a      	ldr	r1, [pc, #552]	; (8002d1c <_strtod_l+0x574>)
 8002af4:	a819      	add	r0, sp, #100	; 0x64
 8002af6:	f001 f97d 	bl	8003df4 <__match>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	f43f aea8 	beq.w	8002850 <_strtod_l+0xa8>
 8002b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b02:	4987      	ldr	r1, [pc, #540]	; (8002d20 <_strtod_l+0x578>)
 8002b04:	3b01      	subs	r3, #1
 8002b06:	a819      	add	r0, sp, #100	; 0x64
 8002b08:	9319      	str	r3, [sp, #100]	; 0x64
 8002b0a:	f001 f973 	bl	8003df4 <__match>
 8002b0e:	b910      	cbnz	r0, 8002b16 <_strtod_l+0x36e>
 8002b10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b12:	3301      	adds	r3, #1
 8002b14:	9319      	str	r3, [sp, #100]	; 0x64
 8002b16:	f04f 0800 	mov.w	r8, #0
 8002b1a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8002d24 <_strtod_l+0x57c>
 8002b1e:	e67c      	b.n	800281a <_strtod_l+0x72>
 8002b20:	4881      	ldr	r0, [pc, #516]	; (8002d28 <_strtod_l+0x580>)
 8002b22:	f000 fe51 	bl	80037c8 <nan>
 8002b26:	4680      	mov	r8, r0
 8002b28:	4689      	mov	r9, r1
 8002b2a:	e676      	b.n	800281a <_strtod_l+0x72>
 8002b2c:	9b08      	ldr	r3, [sp, #32]
 8002b2e:	f1bb 0f00 	cmp.w	fp, #0
 8002b32:	bf08      	it	eq
 8002b34:	46b3      	moveq	fp, r6
 8002b36:	1afb      	subs	r3, r7, r3
 8002b38:	2e10      	cmp	r6, #16
 8002b3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b3c:	4635      	mov	r5, r6
 8002b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b40:	bfa8      	it	ge
 8002b42:	2510      	movge	r5, #16
 8002b44:	f7fd fc46 	bl	80003d4 <__aeabi_ui2d>
 8002b48:	2e09      	cmp	r6, #9
 8002b4a:	4680      	mov	r8, r0
 8002b4c:	4689      	mov	r9, r1
 8002b4e:	dd13      	ble.n	8002b78 <_strtod_l+0x3d0>
 8002b50:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <_strtod_l+0x584>)
 8002b52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002b56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8002b5a:	f7fd fcb5 	bl	80004c8 <__aeabi_dmul>
 8002b5e:	4680      	mov	r8, r0
 8002b60:	4650      	mov	r0, sl
 8002b62:	4689      	mov	r9, r1
 8002b64:	f7fd fc36 	bl	80003d4 <__aeabi_ui2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	4649      	mov	r1, r9
 8002b70:	f7fd faf4 	bl	800015c <__adddf3>
 8002b74:	4680      	mov	r8, r0
 8002b76:	4689      	mov	r9, r1
 8002b78:	2e0f      	cmp	r6, #15
 8002b7a:	dc36      	bgt.n	8002bea <_strtod_l+0x442>
 8002b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f43f ae4b 	beq.w	800281a <_strtod_l+0x72>
 8002b84:	dd22      	ble.n	8002bcc <_strtod_l+0x424>
 8002b86:	2b16      	cmp	r3, #22
 8002b88:	dc09      	bgt.n	8002b9e <_strtod_l+0x3f6>
 8002b8a:	4968      	ldr	r1, [pc, #416]	; (8002d2c <_strtod_l+0x584>)
 8002b8c:	4642      	mov	r2, r8
 8002b8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002b92:	464b      	mov	r3, r9
 8002b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b98:	f7fd fc96 	bl	80004c8 <__aeabi_dmul>
 8002b9c:	e7c3      	b.n	8002b26 <_strtod_l+0x37e>
 8002b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ba0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	db20      	blt.n	8002bea <_strtod_l+0x442>
 8002ba8:	4c60      	ldr	r4, [pc, #384]	; (8002d2c <_strtod_l+0x584>)
 8002baa:	f1c6 060f 	rsb	r6, r6, #15
 8002bae:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8002bb2:	4642      	mov	r2, r8
 8002bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb8:	464b      	mov	r3, r9
 8002bba:	f7fd fc85 	bl	80004c8 <__aeabi_dmul>
 8002bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bc0:	1b9e      	subs	r6, r3, r6
 8002bc2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8002bc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002bca:	e7e5      	b.n	8002b98 <_strtod_l+0x3f0>
 8002bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bce:	3316      	adds	r3, #22
 8002bd0:	db0b      	blt.n	8002bea <_strtod_l+0x442>
 8002bd2:	9b08      	ldr	r3, [sp, #32]
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	1bdf      	subs	r7, r3, r7
 8002bd8:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <_strtod_l+0x584>)
 8002bda:	4649      	mov	r1, r9
 8002bdc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be4:	f7fd fd9a 	bl	800071c <__aeabi_ddiv>
 8002be8:	e79d      	b.n	8002b26 <_strtod_l+0x37e>
 8002bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bec:	1b75      	subs	r5, r6, r5
 8002bee:	441d      	add	r5, r3
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	dd70      	ble.n	8002cd6 <_strtod_l+0x52e>
 8002bf4:	f015 030f 	ands.w	r3, r5, #15
 8002bf8:	d00a      	beq.n	8002c10 <_strtod_l+0x468>
 8002bfa:	494c      	ldr	r1, [pc, #304]	; (8002d2c <_strtod_l+0x584>)
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c06:	464b      	mov	r3, r9
 8002c08:	f7fd fc5e 	bl	80004c8 <__aeabi_dmul>
 8002c0c:	4680      	mov	r8, r0
 8002c0e:	4689      	mov	r9, r1
 8002c10:	f035 050f 	bics.w	r5, r5, #15
 8002c14:	d04d      	beq.n	8002cb2 <_strtod_l+0x50a>
 8002c16:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8002c1a:	dd22      	ble.n	8002c62 <_strtod_l+0x4ba>
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	46b3      	mov	fp, r6
 8002c20:	960b      	str	r6, [sp, #44]	; 0x2c
 8002c22:	9608      	str	r6, [sp, #32]
 8002c24:	2322      	movs	r3, #34	; 0x22
 8002c26:	f04f 0800 	mov.w	r8, #0
 8002c2a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8002d24 <_strtod_l+0x57c>
 8002c2e:	6023      	str	r3, [r4, #0]
 8002c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f43f adf1 	beq.w	800281a <_strtod_l+0x72>
 8002c38:	4620      	mov	r0, r4
 8002c3a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002c3c:	f001 fa90 	bl	8004160 <_Bfree>
 8002c40:	4620      	mov	r0, r4
 8002c42:	9908      	ldr	r1, [sp, #32]
 8002c44:	f001 fa8c 	bl	8004160 <_Bfree>
 8002c48:	4659      	mov	r1, fp
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f001 fa88 	bl	8004160 <_Bfree>
 8002c50:	4620      	mov	r0, r4
 8002c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c54:	f001 fa84 	bl	8004160 <_Bfree>
 8002c58:	4631      	mov	r1, r6
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f001 fa80 	bl	8004160 <_Bfree>
 8002c60:	e5db      	b.n	800281a <_strtod_l+0x72>
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <_strtod_l+0x588>)
 8002c64:	4640      	mov	r0, r8
 8002c66:	9305      	str	r3, [sp, #20]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	469a      	mov	sl, r3
 8002c6e:	112d      	asrs	r5, r5, #4
 8002c70:	2d01      	cmp	r5, #1
 8002c72:	dc21      	bgt.n	8002cb8 <_strtod_l+0x510>
 8002c74:	b10b      	cbz	r3, 8002c7a <_strtod_l+0x4d2>
 8002c76:	4680      	mov	r8, r0
 8002c78:	4689      	mov	r9, r1
 8002c7a:	492d      	ldr	r1, [pc, #180]	; (8002d30 <_strtod_l+0x588>)
 8002c7c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8002c80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002c84:	4642      	mov	r2, r8
 8002c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	f7fd fc1c 	bl	80004c8 <__aeabi_dmul>
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <_strtod_l+0x57c>)
 8002c92:	460a      	mov	r2, r1
 8002c94:	400b      	ands	r3, r1
 8002c96:	4927      	ldr	r1, [pc, #156]	; (8002d34 <_strtod_l+0x58c>)
 8002c98:	4680      	mov	r8, r0
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	d8be      	bhi.n	8002c1c <_strtod_l+0x474>
 8002c9e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8002ca2:	428b      	cmp	r3, r1
 8002ca4:	bf86      	itte	hi
 8002ca6:	f04f 38ff 	movhi.w	r8, #4294967295
 8002caa:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8002d38 <_strtod_l+0x590>
 8002cae:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9305      	str	r3, [sp, #20]
 8002cb6:	e07b      	b.n	8002db0 <_strtod_l+0x608>
 8002cb8:	07ea      	lsls	r2, r5, #31
 8002cba:	d505      	bpl.n	8002cc8 <_strtod_l+0x520>
 8002cbc:	9b05      	ldr	r3, [sp, #20]
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fc01 	bl	80004c8 <__aeabi_dmul>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	9a05      	ldr	r2, [sp, #20]
 8002cca:	f10a 0a01 	add.w	sl, sl, #1
 8002cce:	3208      	adds	r2, #8
 8002cd0:	106d      	asrs	r5, r5, #1
 8002cd2:	9205      	str	r2, [sp, #20]
 8002cd4:	e7cc      	b.n	8002c70 <_strtod_l+0x4c8>
 8002cd6:	d0ec      	beq.n	8002cb2 <_strtod_l+0x50a>
 8002cd8:	426d      	negs	r5, r5
 8002cda:	f015 020f 	ands.w	r2, r5, #15
 8002cde:	d00a      	beq.n	8002cf6 <_strtod_l+0x54e>
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <_strtod_l+0x584>)
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ce8:	4649      	mov	r1, r9
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd fd15 	bl	800071c <__aeabi_ddiv>
 8002cf2:	4680      	mov	r8, r0
 8002cf4:	4689      	mov	r9, r1
 8002cf6:	112d      	asrs	r5, r5, #4
 8002cf8:	d0db      	beq.n	8002cb2 <_strtod_l+0x50a>
 8002cfa:	2d1f      	cmp	r5, #31
 8002cfc:	dd1e      	ble.n	8002d3c <_strtod_l+0x594>
 8002cfe:	2600      	movs	r6, #0
 8002d00:	46b3      	mov	fp, r6
 8002d02:	960b      	str	r6, [sp, #44]	; 0x2c
 8002d04:	9608      	str	r6, [sp, #32]
 8002d06:	2322      	movs	r3, #34	; 0x22
 8002d08:	f04f 0800 	mov.w	r8, #0
 8002d0c:	f04f 0900 	mov.w	r9, #0
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	e78d      	b.n	8002c30 <_strtod_l+0x488>
 8002d14:	080054e5 	.word	0x080054e5
 8002d18:	080054fc 	.word	0x080054fc
 8002d1c:	080054dc 	.word	0x080054dc
 8002d20:	080054df 	.word	0x080054df
 8002d24:	7ff00000 	.word	0x7ff00000
 8002d28:	080055ec 	.word	0x080055ec
 8002d2c:	080056e0 	.word	0x080056e0
 8002d30:	080056b8 	.word	0x080056b8
 8002d34:	7ca00000 	.word	0x7ca00000
 8002d38:	7fefffff 	.word	0x7fefffff
 8002d3c:	f015 0310 	ands.w	r3, r5, #16
 8002d40:	bf18      	it	ne
 8002d42:	236a      	movne	r3, #106	; 0x6a
 8002d44:	4640      	mov	r0, r8
 8002d46:	9305      	str	r3, [sp, #20]
 8002d48:	4649      	mov	r1, r9
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8003018 <_strtod_l+0x870>
 8002d50:	07ea      	lsls	r2, r5, #31
 8002d52:	d504      	bpl.n	8002d5e <_strtod_l+0x5b6>
 8002d54:	e9da 2300 	ldrd	r2, r3, [sl]
 8002d58:	f7fd fbb6 	bl	80004c8 <__aeabi_dmul>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	106d      	asrs	r5, r5, #1
 8002d60:	f10a 0a08 	add.w	sl, sl, #8
 8002d64:	d1f4      	bne.n	8002d50 <_strtod_l+0x5a8>
 8002d66:	b10b      	cbz	r3, 8002d6c <_strtod_l+0x5c4>
 8002d68:	4680      	mov	r8, r0
 8002d6a:	4689      	mov	r9, r1
 8002d6c:	9b05      	ldr	r3, [sp, #20]
 8002d6e:	b1bb      	cbz	r3, 8002da0 <_strtod_l+0x5f8>
 8002d70:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8002d74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	dd10      	ble.n	8002da0 <_strtod_l+0x5f8>
 8002d7e:	2b1f      	cmp	r3, #31
 8002d80:	f340 8128 	ble.w	8002fd4 <_strtod_l+0x82c>
 8002d84:	2b34      	cmp	r3, #52	; 0x34
 8002d86:	bfd8      	it	le
 8002d88:	f04f 33ff 	movle.w	r3, #4294967295
 8002d8c:	f04f 0800 	mov.w	r8, #0
 8002d90:	bfcf      	iteee	gt
 8002d92:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8002d96:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8002d9a:	4093      	lslle	r3, r2
 8002d9c:	ea03 0901 	andle.w	r9, r3, r1
 8002da0:	2200      	movs	r2, #0
 8002da2:	2300      	movs	r3, #0
 8002da4:	4640      	mov	r0, r8
 8002da6:	4649      	mov	r1, r9
 8002da8:	f7fd fdf6 	bl	8000998 <__aeabi_dcmpeq>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d1a6      	bne.n	8002cfe <_strtod_l+0x556>
 8002db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002db2:	465a      	mov	r2, fp
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	4620      	mov	r0, r4
 8002db8:	4633      	mov	r3, r6
 8002dba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002dbc:	f001 fa38 	bl	8004230 <__s2b>
 8002dc0:	900b      	str	r0, [sp, #44]	; 0x2c
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	f43f af2a 	beq.w	8002c1c <_strtod_l+0x474>
 8002dc8:	2600      	movs	r6, #0
 8002dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dcc:	9b08      	ldr	r3, [sp, #32]
 8002dce:	2a00      	cmp	r2, #0
 8002dd0:	eba3 0307 	sub.w	r3, r3, r7
 8002dd4:	bfa8      	it	ge
 8002dd6:	2300      	movge	r3, #0
 8002dd8:	46b3      	mov	fp, r6
 8002dda:	9312      	str	r3, [sp, #72]	; 0x48
 8002ddc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8002de0:	9316      	str	r3, [sp, #88]	; 0x58
 8002de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002de4:	4620      	mov	r0, r4
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	f001 f97a 	bl	80040e0 <_Balloc>
 8002dec:	9008      	str	r0, [sp, #32]
 8002dee:	2800      	cmp	r0, #0
 8002df0:	f43f af18 	beq.w	8002c24 <_strtod_l+0x47c>
 8002df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002df6:	300c      	adds	r0, #12
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	f103 010c 	add.w	r1, r3, #12
 8002dfe:	3202      	adds	r2, #2
 8002e00:	0092      	lsls	r2, r2, #2
 8002e02:	f000 fcd2 	bl	80037aa <memcpy>
 8002e06:	ab1c      	add	r3, sp, #112	; 0x70
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	ab1b      	add	r3, sp, #108	; 0x6c
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4642      	mov	r2, r8
 8002e10:	464b      	mov	r3, r9
 8002e12:	4620      	mov	r0, r4
 8002e14:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002e18:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8002e1c:	f001 fd34 	bl	8004888 <__d2b>
 8002e20:	901a      	str	r0, [sp, #104]	; 0x68
 8002e22:	2800      	cmp	r0, #0
 8002e24:	f43f aefe 	beq.w	8002c24 <_strtod_l+0x47c>
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f001 fa98 	bl	8004360 <__i2b>
 8002e30:	4683      	mov	fp, r0
 8002e32:	2800      	cmp	r0, #0
 8002e34:	f43f aef6 	beq.w	8002c24 <_strtod_l+0x47c>
 8002e38:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002e3a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002e3c:	2f00      	cmp	r7, #0
 8002e3e:	bfab      	itete	ge
 8002e40:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8002e42:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8002e44:	eb07 0a03 	addge.w	sl, r7, r3
 8002e48:	1bdd      	sublt	r5, r3, r7
 8002e4a:	9b05      	ldr	r3, [sp, #20]
 8002e4c:	bfa8      	it	ge
 8002e4e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8002e50:	eba7 0703 	sub.w	r7, r7, r3
 8002e54:	4417      	add	r7, r2
 8002e56:	4b71      	ldr	r3, [pc, #452]	; (800301c <_strtod_l+0x874>)
 8002e58:	f107 37ff 	add.w	r7, r7, #4294967295
 8002e5c:	bfb8      	it	lt
 8002e5e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8002e62:	429f      	cmp	r7, r3
 8002e64:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8002e68:	f280 80c7 	bge.w	8002ffa <_strtod_l+0x852>
 8002e6c:	1bdb      	subs	r3, r3, r7
 8002e6e:	2b1f      	cmp	r3, #31
 8002e70:	f04f 0101 	mov.w	r1, #1
 8002e74:	eba2 0203 	sub.w	r2, r2, r3
 8002e78:	f300 80b3 	bgt.w	8002fe2 <_strtod_l+0x83a>
 8002e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e82:	2300      	movs	r3, #0
 8002e84:	9310      	str	r3, [sp, #64]	; 0x40
 8002e86:	eb0a 0702 	add.w	r7, sl, r2
 8002e8a:	9b05      	ldr	r3, [sp, #20]
 8002e8c:	45ba      	cmp	sl, r7
 8002e8e:	4415      	add	r5, r2
 8002e90:	441d      	add	r5, r3
 8002e92:	4653      	mov	r3, sl
 8002e94:	bfa8      	it	ge
 8002e96:	463b      	movge	r3, r7
 8002e98:	42ab      	cmp	r3, r5
 8002e9a:	bfa8      	it	ge
 8002e9c:	462b      	movge	r3, r5
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bfc2      	ittt	gt
 8002ea2:	1aff      	subgt	r7, r7, r3
 8002ea4:	1aed      	subgt	r5, r5, r3
 8002ea6:	ebaa 0a03 	subgt.w	sl, sl, r3
 8002eaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	dd17      	ble.n	8002ee0 <_strtod_l+0x738>
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	4620      	mov	r0, r4
 8002eb6:	f001 fb11 	bl	80044dc <__pow5mult>
 8002eba:	4683      	mov	fp, r0
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	f43f aeb1 	beq.w	8002c24 <_strtod_l+0x47c>
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f001 fa60 	bl	800438c <__multiply>
 8002ecc:	900a      	str	r0, [sp, #40]	; 0x28
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	f43f aea8 	beq.w	8002c24 <_strtod_l+0x47c>
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002ed8:	f001 f942 	bl	8004160 <_Bfree>
 8002edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ede:	931a      	str	r3, [sp, #104]	; 0x68
 8002ee0:	2f00      	cmp	r7, #0
 8002ee2:	f300 808f 	bgt.w	8003004 <_strtod_l+0x85c>
 8002ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dd08      	ble.n	8002efe <_strtod_l+0x756>
 8002eec:	4620      	mov	r0, r4
 8002eee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002ef0:	9908      	ldr	r1, [sp, #32]
 8002ef2:	f001 faf3 	bl	80044dc <__pow5mult>
 8002ef6:	9008      	str	r0, [sp, #32]
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	f43f ae93 	beq.w	8002c24 <_strtod_l+0x47c>
 8002efe:	2d00      	cmp	r5, #0
 8002f00:	dd08      	ble.n	8002f14 <_strtod_l+0x76c>
 8002f02:	462a      	mov	r2, r5
 8002f04:	4620      	mov	r0, r4
 8002f06:	9908      	ldr	r1, [sp, #32]
 8002f08:	f001 fb42 	bl	8004590 <__lshift>
 8002f0c:	9008      	str	r0, [sp, #32]
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	f43f ae88 	beq.w	8002c24 <_strtod_l+0x47c>
 8002f14:	f1ba 0f00 	cmp.w	sl, #0
 8002f18:	dd08      	ble.n	8002f2c <_strtod_l+0x784>
 8002f1a:	4659      	mov	r1, fp
 8002f1c:	4652      	mov	r2, sl
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f001 fb36 	bl	8004590 <__lshift>
 8002f24:	4683      	mov	fp, r0
 8002f26:	2800      	cmp	r0, #0
 8002f28:	f43f ae7c 	beq.w	8002c24 <_strtod_l+0x47c>
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	9a08      	ldr	r2, [sp, #32]
 8002f30:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002f32:	f001 fbb5 	bl	80046a0 <__mdiff>
 8002f36:	4606      	mov	r6, r0
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	f43f ae73 	beq.w	8002c24 <_strtod_l+0x47c>
 8002f3e:	2500      	movs	r5, #0
 8002f40:	68c3      	ldr	r3, [r0, #12]
 8002f42:	4659      	mov	r1, fp
 8002f44:	60c5      	str	r5, [r0, #12]
 8002f46:	930a      	str	r3, [sp, #40]	; 0x28
 8002f48:	f001 fb8e 	bl	8004668 <__mcmp>
 8002f4c:	42a8      	cmp	r0, r5
 8002f4e:	da6b      	bge.n	8003028 <_strtod_l+0x880>
 8002f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f52:	ea53 0308 	orrs.w	r3, r3, r8
 8002f56:	f040 808f 	bne.w	8003078 <_strtod_l+0x8d0>
 8002f5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 808a 	bne.w	8003078 <_strtod_l+0x8d0>
 8002f64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f68:	0d1b      	lsrs	r3, r3, #20
 8002f6a:	051b      	lsls	r3, r3, #20
 8002f6c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8002f70:	f240 8082 	bls.w	8003078 <_strtod_l+0x8d0>
 8002f74:	6973      	ldr	r3, [r6, #20]
 8002f76:	b913      	cbnz	r3, 8002f7e <_strtod_l+0x7d6>
 8002f78:	6933      	ldr	r3, [r6, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	dd7c      	ble.n	8003078 <_strtod_l+0x8d0>
 8002f7e:	4631      	mov	r1, r6
 8002f80:	2201      	movs	r2, #1
 8002f82:	4620      	mov	r0, r4
 8002f84:	f001 fb04 	bl	8004590 <__lshift>
 8002f88:	4659      	mov	r1, fp
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	f001 fb6c 	bl	8004668 <__mcmp>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	dd71      	ble.n	8003078 <_strtod_l+0x8d0>
 8002f94:	9905      	ldr	r1, [sp, #20]
 8002f96:	464b      	mov	r3, r9
 8002f98:	4a21      	ldr	r2, [pc, #132]	; (8003020 <_strtod_l+0x878>)
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	f000 808d 	beq.w	80030ba <_strtod_l+0x912>
 8002fa0:	ea02 0109 	and.w	r1, r2, r9
 8002fa4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8002fa8:	f300 8087 	bgt.w	80030ba <_strtod_l+0x912>
 8002fac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8002fb0:	f77f aea9 	ble.w	8002d06 <_strtod_l+0x55e>
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <_strtod_l+0x87c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f7fd fa84 	bl	80004c8 <__aeabi_dmul>
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <_strtod_l+0x878>)
 8002fc2:	4680      	mov	r8, r0
 8002fc4:	400b      	ands	r3, r1
 8002fc6:	4689      	mov	r9, r1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f47f ae35 	bne.w	8002c38 <_strtod_l+0x490>
 8002fce:	2322      	movs	r3, #34	; 0x22
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	e631      	b.n	8002c38 <_strtod_l+0x490>
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	ea03 0808 	and.w	r8, r3, r8
 8002fe0:	e6de      	b.n	8002da0 <_strtod_l+0x5f8>
 8002fe2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8002fe6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8002fea:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8002fee:	37e2      	adds	r7, #226	; 0xe2
 8002ff0:	fa01 f307 	lsl.w	r3, r1, r7
 8002ff4:	9310      	str	r3, [sp, #64]	; 0x40
 8002ff6:	9113      	str	r1, [sp, #76]	; 0x4c
 8002ff8:	e745      	b.n	8002e86 <_strtod_l+0x6de>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9310      	str	r3, [sp, #64]	; 0x40
 8002ffe:	2301      	movs	r3, #1
 8003000:	9313      	str	r3, [sp, #76]	; 0x4c
 8003002:	e740      	b.n	8002e86 <_strtod_l+0x6de>
 8003004:	463a      	mov	r2, r7
 8003006:	4620      	mov	r0, r4
 8003008:	991a      	ldr	r1, [sp, #104]	; 0x68
 800300a:	f001 fac1 	bl	8004590 <__lshift>
 800300e:	901a      	str	r0, [sp, #104]	; 0x68
 8003010:	2800      	cmp	r0, #0
 8003012:	f47f af68 	bne.w	8002ee6 <_strtod_l+0x73e>
 8003016:	e605      	b.n	8002c24 <_strtod_l+0x47c>
 8003018:	08005510 	.word	0x08005510
 800301c:	fffffc02 	.word	0xfffffc02
 8003020:	7ff00000 	.word	0x7ff00000
 8003024:	39500000 	.word	0x39500000
 8003028:	46ca      	mov	sl, r9
 800302a:	d165      	bne.n	80030f8 <_strtod_l+0x950>
 800302c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800302e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003032:	b352      	cbz	r2, 800308a <_strtod_l+0x8e2>
 8003034:	4a9e      	ldr	r2, [pc, #632]	; (80032b0 <_strtod_l+0xb08>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d12a      	bne.n	8003090 <_strtod_l+0x8e8>
 800303a:	9b05      	ldr	r3, [sp, #20]
 800303c:	4641      	mov	r1, r8
 800303e:	b1fb      	cbz	r3, 8003080 <_strtod_l+0x8d8>
 8003040:	4b9c      	ldr	r3, [pc, #624]	; (80032b4 <_strtod_l+0xb0c>)
 8003042:	f04f 32ff 	mov.w	r2, #4294967295
 8003046:	ea09 0303 	and.w	r3, r9, r3
 800304a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800304e:	d81a      	bhi.n	8003086 <_strtod_l+0x8de>
 8003050:	0d1b      	lsrs	r3, r3, #20
 8003052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	4299      	cmp	r1, r3
 800305c:	d118      	bne.n	8003090 <_strtod_l+0x8e8>
 800305e:	4b96      	ldr	r3, [pc, #600]	; (80032b8 <_strtod_l+0xb10>)
 8003060:	459a      	cmp	sl, r3
 8003062:	d102      	bne.n	800306a <_strtod_l+0x8c2>
 8003064:	3101      	adds	r1, #1
 8003066:	f43f addd 	beq.w	8002c24 <_strtod_l+0x47c>
 800306a:	f04f 0800 	mov.w	r8, #0
 800306e:	4b91      	ldr	r3, [pc, #580]	; (80032b4 <_strtod_l+0xb0c>)
 8003070:	ea0a 0303 	and.w	r3, sl, r3
 8003074:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8003078:	9b05      	ldr	r3, [sp, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d19a      	bne.n	8002fb4 <_strtod_l+0x80c>
 800307e:	e5db      	b.n	8002c38 <_strtod_l+0x490>
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e7e9      	b.n	800305a <_strtod_l+0x8b2>
 8003086:	4613      	mov	r3, r2
 8003088:	e7e7      	b.n	800305a <_strtod_l+0x8b2>
 800308a:	ea53 0308 	orrs.w	r3, r3, r8
 800308e:	d081      	beq.n	8002f94 <_strtod_l+0x7ec>
 8003090:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003092:	b1e3      	cbz	r3, 80030ce <_strtod_l+0x926>
 8003094:	ea13 0f0a 	tst.w	r3, sl
 8003098:	d0ee      	beq.n	8003078 <_strtod_l+0x8d0>
 800309a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800309c:	4640      	mov	r0, r8
 800309e:	4649      	mov	r1, r9
 80030a0:	9a05      	ldr	r2, [sp, #20]
 80030a2:	b1c3      	cbz	r3, 80030d6 <_strtod_l+0x92e>
 80030a4:	f7ff fb5d 	bl	8002762 <sulp>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80030ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030b0:	f7fd f854 	bl	800015c <__adddf3>
 80030b4:	4680      	mov	r8, r0
 80030b6:	4689      	mov	r9, r1
 80030b8:	e7de      	b.n	8003078 <_strtod_l+0x8d0>
 80030ba:	4013      	ands	r3, r2
 80030bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80030c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80030c4:	f04f 38ff 	mov.w	r8, #4294967295
 80030c8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80030cc:	e7d4      	b.n	8003078 <_strtod_l+0x8d0>
 80030ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030d0:	ea13 0f08 	tst.w	r3, r8
 80030d4:	e7e0      	b.n	8003098 <_strtod_l+0x8f0>
 80030d6:	f7ff fb44 	bl	8002762 <sulp>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80030e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80030e2:	f7fd f839 	bl	8000158 <__aeabi_dsub>
 80030e6:	2200      	movs	r2, #0
 80030e8:	2300      	movs	r3, #0
 80030ea:	4680      	mov	r8, r0
 80030ec:	4689      	mov	r9, r1
 80030ee:	f7fd fc53 	bl	8000998 <__aeabi_dcmpeq>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d0c0      	beq.n	8003078 <_strtod_l+0x8d0>
 80030f6:	e606      	b.n	8002d06 <_strtod_l+0x55e>
 80030f8:	4659      	mov	r1, fp
 80030fa:	4630      	mov	r0, r6
 80030fc:	f001 fc1a 	bl	8004934 <__ratio>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003108:	2200      	movs	r2, #0
 800310a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800310e:	f7fd fc57 	bl	80009c0 <__aeabi_dcmple>
 8003112:	2800      	cmp	r0, #0
 8003114:	d06f      	beq.n	80031f6 <_strtod_l+0xa4e>
 8003116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003118:	2b00      	cmp	r3, #0
 800311a:	d17c      	bne.n	8003216 <_strtod_l+0xa6e>
 800311c:	f1b8 0f00 	cmp.w	r8, #0
 8003120:	d159      	bne.n	80031d6 <_strtod_l+0xa2e>
 8003122:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003126:	2b00      	cmp	r3, #0
 8003128:	d17b      	bne.n	8003222 <_strtod_l+0xa7a>
 800312a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800312e:	2200      	movs	r2, #0
 8003130:	4b62      	ldr	r3, [pc, #392]	; (80032bc <_strtod_l+0xb14>)
 8003132:	f7fd fc3b 	bl	80009ac <__aeabi_dcmplt>
 8003136:	2800      	cmp	r0, #0
 8003138:	d15a      	bne.n	80031f0 <_strtod_l+0xa48>
 800313a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800313e:	2200      	movs	r2, #0
 8003140:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <_strtod_l+0xb18>)
 8003142:	f7fd f9c1 	bl	80004c8 <__aeabi_dmul>
 8003146:	4605      	mov	r5, r0
 8003148:	460f      	mov	r7, r1
 800314a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800314e:	9506      	str	r5, [sp, #24]
 8003150:	9307      	str	r3, [sp, #28]
 8003152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003156:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800315a:	4b56      	ldr	r3, [pc, #344]	; (80032b4 <_strtod_l+0xb0c>)
 800315c:	4a55      	ldr	r2, [pc, #340]	; (80032b4 <_strtod_l+0xb0c>)
 800315e:	ea0a 0303 	and.w	r3, sl, r3
 8003162:	9313      	str	r3, [sp, #76]	; 0x4c
 8003164:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <_strtod_l+0xb1c>)
 8003166:	ea0a 0202 	and.w	r2, sl, r2
 800316a:	429a      	cmp	r2, r3
 800316c:	f040 80b0 	bne.w	80032d0 <_strtod_l+0xb28>
 8003170:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8003174:	4640      	mov	r0, r8
 8003176:	4649      	mov	r1, r9
 8003178:	f001 fb1e 	bl	80047b8 <__ulp>
 800317c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003180:	f7fd f9a2 	bl	80004c8 <__aeabi_dmul>
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	f7fc ffe8 	bl	800015c <__adddf3>
 800318c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80032b4 <_strtod_l+0xb0c>
 8003190:	4a4d      	ldr	r2, [pc, #308]	; (80032c8 <_strtod_l+0xb20>)
 8003192:	ea01 0a0a 	and.w	sl, r1, sl
 8003196:	4592      	cmp	sl, r2
 8003198:	4680      	mov	r8, r0
 800319a:	d948      	bls.n	800322e <_strtod_l+0xa86>
 800319c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800319e:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <_strtod_l+0xb10>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d103      	bne.n	80031ac <_strtod_l+0xa04>
 80031a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031a6:	3301      	adds	r3, #1
 80031a8:	f43f ad3c 	beq.w	8002c24 <_strtod_l+0x47c>
 80031ac:	f04f 38ff 	mov.w	r8, #4294967295
 80031b0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80032b8 <_strtod_l+0xb10>
 80031b4:	4620      	mov	r0, r4
 80031b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80031b8:	f000 ffd2 	bl	8004160 <_Bfree>
 80031bc:	4620      	mov	r0, r4
 80031be:	9908      	ldr	r1, [sp, #32]
 80031c0:	f000 ffce 	bl	8004160 <_Bfree>
 80031c4:	4659      	mov	r1, fp
 80031c6:	4620      	mov	r0, r4
 80031c8:	f000 ffca 	bl	8004160 <_Bfree>
 80031cc:	4631      	mov	r1, r6
 80031ce:	4620      	mov	r0, r4
 80031d0:	f000 ffc6 	bl	8004160 <_Bfree>
 80031d4:	e605      	b.n	8002de2 <_strtod_l+0x63a>
 80031d6:	f1b8 0f01 	cmp.w	r8, #1
 80031da:	d103      	bne.n	80031e4 <_strtod_l+0xa3c>
 80031dc:	f1b9 0f00 	cmp.w	r9, #0
 80031e0:	f43f ad91 	beq.w	8002d06 <_strtod_l+0x55e>
 80031e4:	2200      	movs	r2, #0
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <_strtod_l+0xb24>)
 80031e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80031ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031ee:	e016      	b.n	800321e <_strtod_l+0xa76>
 80031f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80031f2:	4f33      	ldr	r7, [pc, #204]	; (80032c0 <_strtod_l+0xb18>)
 80031f4:	e7a9      	b.n	800314a <_strtod_l+0x9a2>
 80031f6:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <_strtod_l+0xb18>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80031fe:	f7fd f963 	bl	80004c8 <__aeabi_dmul>
 8003202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003204:	4605      	mov	r5, r0
 8003206:	460f      	mov	r7, r1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d09e      	beq.n	800314a <_strtod_l+0x9a2>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003214:	e79d      	b.n	8003152 <_strtod_l+0x9aa>
 8003216:	2200      	movs	r2, #0
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <_strtod_l+0xb14>)
 800321a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800321e:	4f27      	ldr	r7, [pc, #156]	; (80032bc <_strtod_l+0xb14>)
 8003220:	e797      	b.n	8003152 <_strtod_l+0x9aa>
 8003222:	2200      	movs	r2, #0
 8003224:	4b29      	ldr	r3, [pc, #164]	; (80032cc <_strtod_l+0xb24>)
 8003226:	4645      	mov	r5, r8
 8003228:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800322c:	e7f7      	b.n	800321e <_strtod_l+0xa76>
 800322e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8003232:	9b05      	ldr	r3, [sp, #20]
 8003234:	46ca      	mov	sl, r9
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1bc      	bne.n	80031b4 <_strtod_l+0xa0c>
 800323a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800323e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003240:	0d1b      	lsrs	r3, r3, #20
 8003242:	051b      	lsls	r3, r3, #20
 8003244:	429a      	cmp	r2, r3
 8003246:	d1b5      	bne.n	80031b4 <_strtod_l+0xa0c>
 8003248:	4628      	mov	r0, r5
 800324a:	4639      	mov	r1, r7
 800324c:	f7fd ff60 	bl	8001110 <__aeabi_d2lz>
 8003250:	f7fd f90c 	bl	800046c <__aeabi_l2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4628      	mov	r0, r5
 800325a:	4639      	mov	r1, r7
 800325c:	f7fc ff7c 	bl	8000158 <__aeabi_dsub>
 8003260:	460b      	mov	r3, r1
 8003262:	4602      	mov	r2, r0
 8003264:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8003268:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800326c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800326e:	ea4a 0a08 	orr.w	sl, sl, r8
 8003272:	ea5a 0a03 	orrs.w	sl, sl, r3
 8003276:	d06c      	beq.n	8003352 <_strtod_l+0xbaa>
 8003278:	a309      	add	r3, pc, #36	; (adr r3, 80032a0 <_strtod_l+0xaf8>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f7fd fb95 	bl	80009ac <__aeabi_dcmplt>
 8003282:	2800      	cmp	r0, #0
 8003284:	f47f acd8 	bne.w	8002c38 <_strtod_l+0x490>
 8003288:	a307      	add	r3, pc, #28	; (adr r3, 80032a8 <_strtod_l+0xb00>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003292:	f7fd fba9 	bl	80009e8 <__aeabi_dcmpgt>
 8003296:	2800      	cmp	r0, #0
 8003298:	d08c      	beq.n	80031b4 <_strtod_l+0xa0c>
 800329a:	e4cd      	b.n	8002c38 <_strtod_l+0x490>
 800329c:	f3af 8000 	nop.w
 80032a0:	94a03595 	.word	0x94a03595
 80032a4:	3fdfffff 	.word	0x3fdfffff
 80032a8:	35afe535 	.word	0x35afe535
 80032ac:	3fe00000 	.word	0x3fe00000
 80032b0:	000fffff 	.word	0x000fffff
 80032b4:	7ff00000 	.word	0x7ff00000
 80032b8:	7fefffff 	.word	0x7fefffff
 80032bc:	3ff00000 	.word	0x3ff00000
 80032c0:	3fe00000 	.word	0x3fe00000
 80032c4:	7fe00000 	.word	0x7fe00000
 80032c8:	7c9fffff 	.word	0x7c9fffff
 80032cc:	bff00000 	.word	0xbff00000
 80032d0:	9b05      	ldr	r3, [sp, #20]
 80032d2:	b333      	cbz	r3, 8003322 <_strtod_l+0xb7a>
 80032d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80032d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80032da:	d822      	bhi.n	8003322 <_strtod_l+0xb7a>
 80032dc:	a328      	add	r3, pc, #160	; (adr r3, 8003380 <_strtod_l+0xbd8>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	4628      	mov	r0, r5
 80032e4:	4639      	mov	r1, r7
 80032e6:	f7fd fb6b 	bl	80009c0 <__aeabi_dcmple>
 80032ea:	b1a0      	cbz	r0, 8003316 <_strtod_l+0xb6e>
 80032ec:	4639      	mov	r1, r7
 80032ee:	4628      	mov	r0, r5
 80032f0:	f7fd fb84 	bl	80009fc <__aeabi_d2uiz>
 80032f4:	2801      	cmp	r0, #1
 80032f6:	bf38      	it	cc
 80032f8:	2001      	movcc	r0, #1
 80032fa:	f7fd f86b 	bl	80003d4 <__aeabi_ui2d>
 80032fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003300:	4605      	mov	r5, r0
 8003302:	460f      	mov	r7, r1
 8003304:	bb03      	cbnz	r3, 8003348 <_strtod_l+0xba0>
 8003306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800330a:	9014      	str	r0, [sp, #80]	; 0x50
 800330c:	9315      	str	r3, [sp, #84]	; 0x54
 800330e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003312:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003316:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003318:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800331a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	9311      	str	r3, [sp, #68]	; 0x44
 8003322:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003324:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003326:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800332a:	f001 fa45 	bl	80047b8 <__ulp>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4640      	mov	r0, r8
 8003334:	4649      	mov	r1, r9
 8003336:	f7fd f8c7 	bl	80004c8 <__aeabi_dmul>
 800333a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800333c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800333e:	f7fc ff0d 	bl	800015c <__adddf3>
 8003342:	4680      	mov	r8, r0
 8003344:	4689      	mov	r9, r1
 8003346:	e774      	b.n	8003232 <_strtod_l+0xa8a>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003350:	e7dd      	b.n	800330e <_strtod_l+0xb66>
 8003352:	a30d      	add	r3, pc, #52	; (adr r3, 8003388 <_strtod_l+0xbe0>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd fb28 	bl	80009ac <__aeabi_dcmplt>
 800335c:	e79b      	b.n	8003296 <_strtod_l+0xaee>
 800335e:	2300      	movs	r3, #0
 8003360:	930e      	str	r3, [sp, #56]	; 0x38
 8003362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003364:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	f7ff ba5b 	b.w	8002822 <_strtod_l+0x7a>
 800336c:	2a65      	cmp	r2, #101	; 0x65
 800336e:	f43f ab52 	beq.w	8002a16 <_strtod_l+0x26e>
 8003372:	2a45      	cmp	r2, #69	; 0x45
 8003374:	f43f ab4f 	beq.w	8002a16 <_strtod_l+0x26e>
 8003378:	2301      	movs	r3, #1
 800337a:	f7ff bb87 	b.w	8002a8c <_strtod_l+0x2e4>
 800337e:	bf00      	nop
 8003380:	ffc00000 	.word	0xffc00000
 8003384:	41dfffff 	.word	0x41dfffff
 8003388:	94a03595 	.word	0x94a03595
 800338c:	3fcfffff 	.word	0x3fcfffff

08003390 <strtod>:
 8003390:	460a      	mov	r2, r1
 8003392:	4601      	mov	r1, r0
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <strtod+0x10>)
 8003396:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <strtod+0x14>)
 8003398:	6800      	ldr	r0, [r0, #0]
 800339a:	f7ff ba05 	b.w	80027a8 <_strtod_l>
 800339e:	bf00      	nop
 80033a0:	200001ec 	.word	0x200001ec
 80033a4:	20000034 	.word	0x20000034

080033a8 <std>:
 80033a8:	2300      	movs	r3, #0
 80033aa:	b510      	push	{r4, lr}
 80033ac:	4604      	mov	r4, r0
 80033ae:	e9c0 3300 	strd	r3, r3, [r0]
 80033b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b6:	6083      	str	r3, [r0, #8]
 80033b8:	8181      	strh	r1, [r0, #12]
 80033ba:	6643      	str	r3, [r0, #100]	; 0x64
 80033bc:	81c2      	strh	r2, [r0, #14]
 80033be:	6183      	str	r3, [r0, #24]
 80033c0:	4619      	mov	r1, r3
 80033c2:	2208      	movs	r2, #8
 80033c4:	305c      	adds	r0, #92	; 0x5c
 80033c6:	f000 f8f4 	bl	80035b2 <memset>
 80033ca:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <std+0x58>)
 80033cc:	6224      	str	r4, [r4, #32]
 80033ce:	6263      	str	r3, [r4, #36]	; 0x24
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <std+0x5c>)
 80033d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <std+0x60>)
 80033d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <std+0x64>)
 80033da:	6323      	str	r3, [r4, #48]	; 0x30
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <std+0x68>)
 80033de:	429c      	cmp	r4, r3
 80033e0:	d006      	beq.n	80033f0 <std+0x48>
 80033e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80033e6:	4294      	cmp	r4, r2
 80033e8:	d002      	beq.n	80033f0 <std+0x48>
 80033ea:	33d0      	adds	r3, #208	; 0xd0
 80033ec:	429c      	cmp	r4, r3
 80033ee:	d105      	bne.n	80033fc <std+0x54>
 80033f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033f8:	f000 b9d4 	b.w	80037a4 <__retarget_lock_init_recursive>
 80033fc:	bd10      	pop	{r4, pc}
 80033fe:	bf00      	nop
 8003400:	0800352d 	.word	0x0800352d
 8003404:	0800354f 	.word	0x0800354f
 8003408:	08003587 	.word	0x08003587
 800340c:	080035ab 	.word	0x080035ab
 8003410:	20000288 	.word	0x20000288

08003414 <stdio_exit_handler>:
 8003414:	4a02      	ldr	r2, [pc, #8]	; (8003420 <stdio_exit_handler+0xc>)
 8003416:	4903      	ldr	r1, [pc, #12]	; (8003424 <stdio_exit_handler+0x10>)
 8003418:	4803      	ldr	r0, [pc, #12]	; (8003428 <stdio_exit_handler+0x14>)
 800341a:	f000 b869 	b.w	80034f0 <_fwalk_sglue>
 800341e:	bf00      	nop
 8003420:	20000028 	.word	0x20000028
 8003424:	08004b39 	.word	0x08004b39
 8003428:	200001a0 	.word	0x200001a0

0800342c <cleanup_stdio>:
 800342c:	6841      	ldr	r1, [r0, #4]
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <cleanup_stdio+0x34>)
 8003430:	b510      	push	{r4, lr}
 8003432:	4299      	cmp	r1, r3
 8003434:	4604      	mov	r4, r0
 8003436:	d001      	beq.n	800343c <cleanup_stdio+0x10>
 8003438:	f001 fb7e 	bl	8004b38 <_fflush_r>
 800343c:	68a1      	ldr	r1, [r4, #8]
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <cleanup_stdio+0x38>)
 8003440:	4299      	cmp	r1, r3
 8003442:	d002      	beq.n	800344a <cleanup_stdio+0x1e>
 8003444:	4620      	mov	r0, r4
 8003446:	f001 fb77 	bl	8004b38 <_fflush_r>
 800344a:	68e1      	ldr	r1, [r4, #12]
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <cleanup_stdio+0x3c>)
 800344e:	4299      	cmp	r1, r3
 8003450:	d004      	beq.n	800345c <cleanup_stdio+0x30>
 8003452:	4620      	mov	r0, r4
 8003454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003458:	f001 bb6e 	b.w	8004b38 <_fflush_r>
 800345c:	bd10      	pop	{r4, pc}
 800345e:	bf00      	nop
 8003460:	20000288 	.word	0x20000288
 8003464:	200002f0 	.word	0x200002f0
 8003468:	20000358 	.word	0x20000358

0800346c <global_stdio_init.part.0>:
 800346c:	b510      	push	{r4, lr}
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <global_stdio_init.part.0+0x30>)
 8003470:	4c0b      	ldr	r4, [pc, #44]	; (80034a0 <global_stdio_init.part.0+0x34>)
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <global_stdio_init.part.0+0x38>)
 8003474:	4620      	mov	r0, r4
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	2104      	movs	r1, #4
 800347a:	2200      	movs	r2, #0
 800347c:	f7ff ff94 	bl	80033a8 <std>
 8003480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003484:	2201      	movs	r2, #1
 8003486:	2109      	movs	r1, #9
 8003488:	f7ff ff8e 	bl	80033a8 <std>
 800348c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003490:	2202      	movs	r2, #2
 8003492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003496:	2112      	movs	r1, #18
 8003498:	f7ff bf86 	b.w	80033a8 <std>
 800349c:	200003c0 	.word	0x200003c0
 80034a0:	20000288 	.word	0x20000288
 80034a4:	08003415 	.word	0x08003415

080034a8 <__sfp_lock_acquire>:
 80034a8:	4801      	ldr	r0, [pc, #4]	; (80034b0 <__sfp_lock_acquire+0x8>)
 80034aa:	f000 b97c 	b.w	80037a6 <__retarget_lock_acquire_recursive>
 80034ae:	bf00      	nop
 80034b0:	200003c9 	.word	0x200003c9

080034b4 <__sfp_lock_release>:
 80034b4:	4801      	ldr	r0, [pc, #4]	; (80034bc <__sfp_lock_release+0x8>)
 80034b6:	f000 b977 	b.w	80037a8 <__retarget_lock_release_recursive>
 80034ba:	bf00      	nop
 80034bc:	200003c9 	.word	0x200003c9

080034c0 <__sinit>:
 80034c0:	b510      	push	{r4, lr}
 80034c2:	4604      	mov	r4, r0
 80034c4:	f7ff fff0 	bl	80034a8 <__sfp_lock_acquire>
 80034c8:	6a23      	ldr	r3, [r4, #32]
 80034ca:	b11b      	cbz	r3, 80034d4 <__sinit+0x14>
 80034cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d0:	f7ff bff0 	b.w	80034b4 <__sfp_lock_release>
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__sinit+0x28>)
 80034d6:	6223      	str	r3, [r4, #32]
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <__sinit+0x2c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f5      	bne.n	80034cc <__sinit+0xc>
 80034e0:	f7ff ffc4 	bl	800346c <global_stdio_init.part.0>
 80034e4:	e7f2      	b.n	80034cc <__sinit+0xc>
 80034e6:	bf00      	nop
 80034e8:	0800342d 	.word	0x0800342d
 80034ec:	200003c0 	.word	0x200003c0

080034f0 <_fwalk_sglue>:
 80034f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f4:	4607      	mov	r7, r0
 80034f6:	4688      	mov	r8, r1
 80034f8:	4614      	mov	r4, r2
 80034fa:	2600      	movs	r6, #0
 80034fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003500:	f1b9 0901 	subs.w	r9, r9, #1
 8003504:	d505      	bpl.n	8003512 <_fwalk_sglue+0x22>
 8003506:	6824      	ldr	r4, [r4, #0]
 8003508:	2c00      	cmp	r4, #0
 800350a:	d1f7      	bne.n	80034fc <_fwalk_sglue+0xc>
 800350c:	4630      	mov	r0, r6
 800350e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d907      	bls.n	8003528 <_fwalk_sglue+0x38>
 8003518:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800351c:	3301      	adds	r3, #1
 800351e:	d003      	beq.n	8003528 <_fwalk_sglue+0x38>
 8003520:	4629      	mov	r1, r5
 8003522:	4638      	mov	r0, r7
 8003524:	47c0      	blx	r8
 8003526:	4306      	orrs	r6, r0
 8003528:	3568      	adds	r5, #104	; 0x68
 800352a:	e7e9      	b.n	8003500 <_fwalk_sglue+0x10>

0800352c <__sread>:
 800352c:	b510      	push	{r4, lr}
 800352e:	460c      	mov	r4, r1
 8003530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003534:	f000 f8e8 	bl	8003708 <_read_r>
 8003538:	2800      	cmp	r0, #0
 800353a:	bfab      	itete	ge
 800353c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800353e:	89a3      	ldrhlt	r3, [r4, #12]
 8003540:	181b      	addge	r3, r3, r0
 8003542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003546:	bfac      	ite	ge
 8003548:	6563      	strge	r3, [r4, #84]	; 0x54
 800354a:	81a3      	strhlt	r3, [r4, #12]
 800354c:	bd10      	pop	{r4, pc}

0800354e <__swrite>:
 800354e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003552:	461f      	mov	r7, r3
 8003554:	898b      	ldrh	r3, [r1, #12]
 8003556:	4605      	mov	r5, r0
 8003558:	05db      	lsls	r3, r3, #23
 800355a:	460c      	mov	r4, r1
 800355c:	4616      	mov	r6, r2
 800355e:	d505      	bpl.n	800356c <__swrite+0x1e>
 8003560:	2302      	movs	r3, #2
 8003562:	2200      	movs	r2, #0
 8003564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003568:	f000 f8bc 	bl	80036e4 <_lseek_r>
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	4632      	mov	r2, r6
 8003570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	4628      	mov	r0, r5
 8003578:	463b      	mov	r3, r7
 800357a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800357e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003582:	f000 b8d3 	b.w	800372c <_write_r>

08003586 <__sseek>:
 8003586:	b510      	push	{r4, lr}
 8003588:	460c      	mov	r4, r1
 800358a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800358e:	f000 f8a9 	bl	80036e4 <_lseek_r>
 8003592:	1c43      	adds	r3, r0, #1
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	bf15      	itete	ne
 8003598:	6560      	strne	r0, [r4, #84]	; 0x54
 800359a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800359e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80035a2:	81a3      	strheq	r3, [r4, #12]
 80035a4:	bf18      	it	ne
 80035a6:	81a3      	strhne	r3, [r4, #12]
 80035a8:	bd10      	pop	{r4, pc}

080035aa <__sclose>:
 80035aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ae:	f000 b889 	b.w	80036c4 <_close_r>

080035b2 <memset>:
 80035b2:	4603      	mov	r3, r0
 80035b4:	4402      	add	r2, r0
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d100      	bne.n	80035bc <memset+0xa>
 80035ba:	4770      	bx	lr
 80035bc:	f803 1b01 	strb.w	r1, [r3], #1
 80035c0:	e7f9      	b.n	80035b6 <memset+0x4>

080035c2 <strncmp>:
 80035c2:	b510      	push	{r4, lr}
 80035c4:	b16a      	cbz	r2, 80035e2 <strncmp+0x20>
 80035c6:	3901      	subs	r1, #1
 80035c8:	1884      	adds	r4, r0, r2
 80035ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d103      	bne.n	80035de <strncmp+0x1c>
 80035d6:	42a0      	cmp	r0, r4
 80035d8:	d001      	beq.n	80035de <strncmp+0x1c>
 80035da:	2a00      	cmp	r2, #0
 80035dc:	d1f5      	bne.n	80035ca <strncmp+0x8>
 80035de:	1ad0      	subs	r0, r2, r3
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	4610      	mov	r0, r2
 80035e4:	e7fc      	b.n	80035e0 <strncmp+0x1e>

080035e6 <strncpy>:
 80035e6:	4603      	mov	r3, r0
 80035e8:	b510      	push	{r4, lr}
 80035ea:	3901      	subs	r1, #1
 80035ec:	b132      	cbz	r2, 80035fc <strncpy+0x16>
 80035ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80035f2:	3a01      	subs	r2, #1
 80035f4:	f803 4b01 	strb.w	r4, [r3], #1
 80035f8:	2c00      	cmp	r4, #0
 80035fa:	d1f7      	bne.n	80035ec <strncpy+0x6>
 80035fc:	2100      	movs	r1, #0
 80035fe:	441a      	add	r2, r3
 8003600:	4293      	cmp	r3, r2
 8003602:	d100      	bne.n	8003606 <strncpy+0x20>
 8003604:	bd10      	pop	{r4, pc}
 8003606:	f803 1b01 	strb.w	r1, [r3], #1
 800360a:	e7f9      	b.n	8003600 <strncpy+0x1a>

0800360c <strtok>:
 800360c:	4b16      	ldr	r3, [pc, #88]	; (8003668 <strtok+0x5c>)
 800360e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003612:	681f      	ldr	r7, [r3, #0]
 8003614:	4605      	mov	r5, r0
 8003616:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8003618:	460e      	mov	r6, r1
 800361a:	b9ec      	cbnz	r4, 8003658 <strtok+0x4c>
 800361c:	2050      	movs	r0, #80	; 0x50
 800361e:	f000 fc99 	bl	8003f54 <malloc>
 8003622:	4602      	mov	r2, r0
 8003624:	6478      	str	r0, [r7, #68]	; 0x44
 8003626:	b920      	cbnz	r0, 8003632 <strtok+0x26>
 8003628:	215b      	movs	r1, #91	; 0x5b
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <strtok+0x60>)
 800362c:	4810      	ldr	r0, [pc, #64]	; (8003670 <strtok+0x64>)
 800362e:	f000 f8d1 	bl	80037d4 <__assert_func>
 8003632:	e9c0 4400 	strd	r4, r4, [r0]
 8003636:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800363a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800363e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003642:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003646:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800364a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800364e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003652:	6184      	str	r4, [r0, #24]
 8003654:	7704      	strb	r4, [r0, #28]
 8003656:	6244      	str	r4, [r0, #36]	; 0x24
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800365e:	2301      	movs	r3, #1
 8003660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003664:	f000 b806 	b.w	8003674 <__strtok_r>
 8003668:	200001ec 	.word	0x200001ec
 800366c:	08005538 	.word	0x08005538
 8003670:	0800554f 	.word	0x0800554f

08003674 <__strtok_r>:
 8003674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003676:	b908      	cbnz	r0, 800367c <__strtok_r+0x8>
 8003678:	6810      	ldr	r0, [r2, #0]
 800367a:	b188      	cbz	r0, 80036a0 <__strtok_r+0x2c>
 800367c:	4604      	mov	r4, r0
 800367e:	460f      	mov	r7, r1
 8003680:	4620      	mov	r0, r4
 8003682:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003686:	f817 6b01 	ldrb.w	r6, [r7], #1
 800368a:	b91e      	cbnz	r6, 8003694 <__strtok_r+0x20>
 800368c:	b965      	cbnz	r5, 80036a8 <__strtok_r+0x34>
 800368e:	4628      	mov	r0, r5
 8003690:	6015      	str	r5, [r2, #0]
 8003692:	e005      	b.n	80036a0 <__strtok_r+0x2c>
 8003694:	42b5      	cmp	r5, r6
 8003696:	d1f6      	bne.n	8003686 <__strtok_r+0x12>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <__strtok_r+0xa>
 800369c:	6014      	str	r4, [r2, #0]
 800369e:	7003      	strb	r3, [r0, #0]
 80036a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a2:	461c      	mov	r4, r3
 80036a4:	e00c      	b.n	80036c0 <__strtok_r+0x4c>
 80036a6:	b915      	cbnz	r5, 80036ae <__strtok_r+0x3a>
 80036a8:	460e      	mov	r6, r1
 80036aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80036ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80036b2:	42ab      	cmp	r3, r5
 80036b4:	d1f7      	bne.n	80036a6 <__strtok_r+0x32>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f3      	beq.n	80036a2 <__strtok_r+0x2e>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80036c0:	6014      	str	r4, [r2, #0]
 80036c2:	e7ed      	b.n	80036a0 <__strtok_r+0x2c>

080036c4 <_close_r>:
 80036c4:	b538      	push	{r3, r4, r5, lr}
 80036c6:	2300      	movs	r3, #0
 80036c8:	4d05      	ldr	r5, [pc, #20]	; (80036e0 <_close_r+0x1c>)
 80036ca:	4604      	mov	r4, r0
 80036cc:	4608      	mov	r0, r1
 80036ce:	602b      	str	r3, [r5, #0]
 80036d0:	f7fe f82d 	bl	800172e <_close>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d102      	bne.n	80036de <_close_r+0x1a>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b103      	cbz	r3, 80036de <_close_r+0x1a>
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	200003c4 	.word	0x200003c4

080036e4 <_lseek_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	2200      	movs	r2, #0
 80036ee:	4d05      	ldr	r5, [pc, #20]	; (8003704 <_lseek_r+0x20>)
 80036f0:	602a      	str	r2, [r5, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f7fe f83f 	bl	8001776 <_lseek>
 80036f8:	1c43      	adds	r3, r0, #1
 80036fa:	d102      	bne.n	8003702 <_lseek_r+0x1e>
 80036fc:	682b      	ldr	r3, [r5, #0]
 80036fe:	b103      	cbz	r3, 8003702 <_lseek_r+0x1e>
 8003700:	6023      	str	r3, [r4, #0]
 8003702:	bd38      	pop	{r3, r4, r5, pc}
 8003704:	200003c4 	.word	0x200003c4

08003708 <_read_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4604      	mov	r4, r0
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	2200      	movs	r2, #0
 8003712:	4d05      	ldr	r5, [pc, #20]	; (8003728 <_read_r+0x20>)
 8003714:	602a      	str	r2, [r5, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f7fd ffd0 	bl	80016bc <_read>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_read_r+0x1e>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_read_r+0x1e>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	200003c4 	.word	0x200003c4

0800372c <_write_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4604      	mov	r4, r0
 8003730:	4608      	mov	r0, r1
 8003732:	4611      	mov	r1, r2
 8003734:	2200      	movs	r2, #0
 8003736:	4d05      	ldr	r5, [pc, #20]	; (800374c <_write_r+0x20>)
 8003738:	602a      	str	r2, [r5, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	f7fd ffdb 	bl	80016f6 <_write>
 8003740:	1c43      	adds	r3, r0, #1
 8003742:	d102      	bne.n	800374a <_write_r+0x1e>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	b103      	cbz	r3, 800374a <_write_r+0x1e>
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	bd38      	pop	{r3, r4, r5, pc}
 800374c:	200003c4 	.word	0x200003c4

08003750 <__errno>:
 8003750:	4b01      	ldr	r3, [pc, #4]	; (8003758 <__errno+0x8>)
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	200001ec 	.word	0x200001ec

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	2600      	movs	r6, #0
 8003760:	4d0c      	ldr	r5, [pc, #48]	; (8003794 <__libc_init_array+0x38>)
 8003762:	4c0d      	ldr	r4, [pc, #52]	; (8003798 <__libc_init_array+0x3c>)
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	42a6      	cmp	r6, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	f001 fe8a 	bl	8005484 <_init>
 8003770:	2600      	movs	r6, #0
 8003772:	4d0a      	ldr	r5, [pc, #40]	; (800379c <__libc_init_array+0x40>)
 8003774:	4c0a      	ldr	r4, [pc, #40]	; (80037a0 <__libc_init_array+0x44>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	42a6      	cmp	r6, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	f855 3b04 	ldr.w	r3, [r5], #4
 8003784:	4798      	blx	r3
 8003786:	3601      	adds	r6, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	f855 3b04 	ldr.w	r3, [r5], #4
 800378e:	4798      	blx	r3
 8003790:	3601      	adds	r6, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	080058e8 	.word	0x080058e8
 8003798:	080058e8 	.word	0x080058e8
 800379c:	080058e8 	.word	0x080058e8
 80037a0:	080058ec 	.word	0x080058ec

080037a4 <__retarget_lock_init_recursive>:
 80037a4:	4770      	bx	lr

080037a6 <__retarget_lock_acquire_recursive>:
 80037a6:	4770      	bx	lr

080037a8 <__retarget_lock_release_recursive>:
 80037a8:	4770      	bx	lr

080037aa <memcpy>:
 80037aa:	440a      	add	r2, r1
 80037ac:	4291      	cmp	r1, r2
 80037ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80037b2:	d100      	bne.n	80037b6 <memcpy+0xc>
 80037b4:	4770      	bx	lr
 80037b6:	b510      	push	{r4, lr}
 80037b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037bc:	4291      	cmp	r1, r2
 80037be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037c2:	d1f9      	bne.n	80037b8 <memcpy+0xe>
 80037c4:	bd10      	pop	{r4, pc}
	...

080037c8 <nan>:
 80037c8:	2000      	movs	r0, #0
 80037ca:	4901      	ldr	r1, [pc, #4]	; (80037d0 <nan+0x8>)
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	7ff80000 	.word	0x7ff80000

080037d4 <__assert_func>:
 80037d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80037d6:	4614      	mov	r4, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <__assert_func+0x2c>)
 80037dc:	4605      	mov	r5, r0
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68d8      	ldr	r0, [r3, #12]
 80037e2:	b14c      	cbz	r4, 80037f8 <__assert_func+0x24>
 80037e4:	4b07      	ldr	r3, [pc, #28]	; (8003804 <__assert_func+0x30>)
 80037e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80037ea:	9100      	str	r1, [sp, #0]
 80037ec:	462b      	mov	r3, r5
 80037ee:	4906      	ldr	r1, [pc, #24]	; (8003808 <__assert_func+0x34>)
 80037f0:	f001 f9ca 	bl	8004b88 <fiprintf>
 80037f4:	f001 f9ea 	bl	8004bcc <abort>
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <__assert_func+0x38>)
 80037fa:	461c      	mov	r4, r3
 80037fc:	e7f3      	b.n	80037e6 <__assert_func+0x12>
 80037fe:	bf00      	nop
 8003800:	200001ec 	.word	0x200001ec
 8003804:	080055b1 	.word	0x080055b1
 8003808:	080055be 	.word	0x080055be
 800380c:	080055ec 	.word	0x080055ec

08003810 <_free_r>:
 8003810:	b538      	push	{r3, r4, r5, lr}
 8003812:	4605      	mov	r5, r0
 8003814:	2900      	cmp	r1, #0
 8003816:	d040      	beq.n	800389a <_free_r+0x8a>
 8003818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800381c:	1f0c      	subs	r4, r1, #4
 800381e:	2b00      	cmp	r3, #0
 8003820:	bfb8      	it	lt
 8003822:	18e4      	addlt	r4, r4, r3
 8003824:	f000 fc50 	bl	80040c8 <__malloc_lock>
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <_free_r+0x8c>)
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	b933      	cbnz	r3, 800383c <_free_r+0x2c>
 800382e:	6063      	str	r3, [r4, #4]
 8003830:	6014      	str	r4, [r2, #0]
 8003832:	4628      	mov	r0, r5
 8003834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003838:	f000 bc4c 	b.w	80040d4 <__malloc_unlock>
 800383c:	42a3      	cmp	r3, r4
 800383e:	d908      	bls.n	8003852 <_free_r+0x42>
 8003840:	6820      	ldr	r0, [r4, #0]
 8003842:	1821      	adds	r1, r4, r0
 8003844:	428b      	cmp	r3, r1
 8003846:	bf01      	itttt	eq
 8003848:	6819      	ldreq	r1, [r3, #0]
 800384a:	685b      	ldreq	r3, [r3, #4]
 800384c:	1809      	addeq	r1, r1, r0
 800384e:	6021      	streq	r1, [r4, #0]
 8003850:	e7ed      	b.n	800382e <_free_r+0x1e>
 8003852:	461a      	mov	r2, r3
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b10b      	cbz	r3, 800385c <_free_r+0x4c>
 8003858:	42a3      	cmp	r3, r4
 800385a:	d9fa      	bls.n	8003852 <_free_r+0x42>
 800385c:	6811      	ldr	r1, [r2, #0]
 800385e:	1850      	adds	r0, r2, r1
 8003860:	42a0      	cmp	r0, r4
 8003862:	d10b      	bne.n	800387c <_free_r+0x6c>
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	4401      	add	r1, r0
 8003868:	1850      	adds	r0, r2, r1
 800386a:	4283      	cmp	r3, r0
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	d1e0      	bne.n	8003832 <_free_r+0x22>
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4408      	add	r0, r1
 8003876:	6010      	str	r0, [r2, #0]
 8003878:	6053      	str	r3, [r2, #4]
 800387a:	e7da      	b.n	8003832 <_free_r+0x22>
 800387c:	d902      	bls.n	8003884 <_free_r+0x74>
 800387e:	230c      	movs	r3, #12
 8003880:	602b      	str	r3, [r5, #0]
 8003882:	e7d6      	b.n	8003832 <_free_r+0x22>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	1821      	adds	r1, r4, r0
 8003888:	428b      	cmp	r3, r1
 800388a:	bf01      	itttt	eq
 800388c:	6819      	ldreq	r1, [r3, #0]
 800388e:	685b      	ldreq	r3, [r3, #4]
 8003890:	1809      	addeq	r1, r1, r0
 8003892:	6021      	streq	r1, [r4, #0]
 8003894:	6063      	str	r3, [r4, #4]
 8003896:	6054      	str	r4, [r2, #4]
 8003898:	e7cb      	b.n	8003832 <_free_r+0x22>
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	200003cc 	.word	0x200003cc

080038a0 <rshift>:
 80038a0:	6903      	ldr	r3, [r0, #16]
 80038a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80038aa:	f100 0414 	add.w	r4, r0, #20
 80038ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80038b2:	dd46      	ble.n	8003942 <rshift+0xa2>
 80038b4:	f011 011f 	ands.w	r1, r1, #31
 80038b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80038bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80038c0:	d10c      	bne.n	80038dc <rshift+0x3c>
 80038c2:	4629      	mov	r1, r5
 80038c4:	f100 0710 	add.w	r7, r0, #16
 80038c8:	42b1      	cmp	r1, r6
 80038ca:	d335      	bcc.n	8003938 <rshift+0x98>
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	1eea      	subs	r2, r5, #3
 80038d2:	4296      	cmp	r6, r2
 80038d4:	bf38      	it	cc
 80038d6:	2300      	movcc	r3, #0
 80038d8:	4423      	add	r3, r4
 80038da:	e015      	b.n	8003908 <rshift+0x68>
 80038dc:	46a1      	mov	r9, r4
 80038de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80038e2:	f1c1 0820 	rsb	r8, r1, #32
 80038e6:	40cf      	lsrs	r7, r1
 80038e8:	f105 0e04 	add.w	lr, r5, #4
 80038ec:	4576      	cmp	r6, lr
 80038ee:	46f4      	mov	ip, lr
 80038f0:	d816      	bhi.n	8003920 <rshift+0x80>
 80038f2:	1a9a      	subs	r2, r3, r2
 80038f4:	0092      	lsls	r2, r2, #2
 80038f6:	3a04      	subs	r2, #4
 80038f8:	3501      	adds	r5, #1
 80038fa:	42ae      	cmp	r6, r5
 80038fc:	bf38      	it	cc
 80038fe:	2200      	movcc	r2, #0
 8003900:	18a3      	adds	r3, r4, r2
 8003902:	50a7      	str	r7, [r4, r2]
 8003904:	b107      	cbz	r7, 8003908 <rshift+0x68>
 8003906:	3304      	adds	r3, #4
 8003908:	42a3      	cmp	r3, r4
 800390a:	eba3 0204 	sub.w	r2, r3, r4
 800390e:	bf08      	it	eq
 8003910:	2300      	moveq	r3, #0
 8003912:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003916:	6102      	str	r2, [r0, #16]
 8003918:	bf08      	it	eq
 800391a:	6143      	streq	r3, [r0, #20]
 800391c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003920:	f8dc c000 	ldr.w	ip, [ip]
 8003924:	fa0c fc08 	lsl.w	ip, ip, r8
 8003928:	ea4c 0707 	orr.w	r7, ip, r7
 800392c:	f849 7b04 	str.w	r7, [r9], #4
 8003930:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003934:	40cf      	lsrs	r7, r1
 8003936:	e7d9      	b.n	80038ec <rshift+0x4c>
 8003938:	f851 cb04 	ldr.w	ip, [r1], #4
 800393c:	f847 cf04 	str.w	ip, [r7, #4]!
 8003940:	e7c2      	b.n	80038c8 <rshift+0x28>
 8003942:	4623      	mov	r3, r4
 8003944:	e7e0      	b.n	8003908 <rshift+0x68>

08003946 <__hexdig_fun>:
 8003946:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800394a:	2b09      	cmp	r3, #9
 800394c:	d802      	bhi.n	8003954 <__hexdig_fun+0xe>
 800394e:	3820      	subs	r0, #32
 8003950:	b2c0      	uxtb	r0, r0
 8003952:	4770      	bx	lr
 8003954:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003958:	2b05      	cmp	r3, #5
 800395a:	d801      	bhi.n	8003960 <__hexdig_fun+0x1a>
 800395c:	3847      	subs	r0, #71	; 0x47
 800395e:	e7f7      	b.n	8003950 <__hexdig_fun+0xa>
 8003960:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003964:	2b05      	cmp	r3, #5
 8003966:	d801      	bhi.n	800396c <__hexdig_fun+0x26>
 8003968:	3827      	subs	r0, #39	; 0x27
 800396a:	e7f1      	b.n	8003950 <__hexdig_fun+0xa>
 800396c:	2000      	movs	r0, #0
 800396e:	4770      	bx	lr

08003970 <__gethex>:
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4681      	mov	r9, r0
 8003976:	468a      	mov	sl, r1
 8003978:	4617      	mov	r7, r2
 800397a:	680a      	ldr	r2, [r1, #0]
 800397c:	b085      	sub	sp, #20
 800397e:	f102 0b02 	add.w	fp, r2, #2
 8003982:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003986:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	32fe      	adds	r2, #254	; 0xfe
 800398e:	eb02 030b 	add.w	r3, r2, fp
 8003992:	46d8      	mov	r8, fp
 8003994:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2830      	cmp	r0, #48	; 0x30
 800399c:	d0f7      	beq.n	800398e <__gethex+0x1e>
 800399e:	f7ff ffd2 	bl	8003946 <__hexdig_fun>
 80039a2:	4604      	mov	r4, r0
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d138      	bne.n	8003a1a <__gethex+0xaa>
 80039a8:	2201      	movs	r2, #1
 80039aa:	4640      	mov	r0, r8
 80039ac:	49a7      	ldr	r1, [pc, #668]	; (8003c4c <__gethex+0x2dc>)
 80039ae:	f7ff fe08 	bl	80035c2 <strncmp>
 80039b2:	4606      	mov	r6, r0
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d169      	bne.n	8003a8c <__gethex+0x11c>
 80039b8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80039bc:	465d      	mov	r5, fp
 80039be:	f7ff ffc2 	bl	8003946 <__hexdig_fun>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d064      	beq.n	8003a90 <__gethex+0x120>
 80039c6:	465a      	mov	r2, fp
 80039c8:	7810      	ldrb	r0, [r2, #0]
 80039ca:	4690      	mov	r8, r2
 80039cc:	2830      	cmp	r0, #48	; 0x30
 80039ce:	f102 0201 	add.w	r2, r2, #1
 80039d2:	d0f9      	beq.n	80039c8 <__gethex+0x58>
 80039d4:	f7ff ffb7 	bl	8003946 <__hexdig_fun>
 80039d8:	2301      	movs	r3, #1
 80039da:	fab0 f480 	clz	r4, r0
 80039de:	465e      	mov	r6, fp
 80039e0:	0964      	lsrs	r4, r4, #5
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	4642      	mov	r2, r8
 80039e6:	4615      	mov	r5, r2
 80039e8:	7828      	ldrb	r0, [r5, #0]
 80039ea:	3201      	adds	r2, #1
 80039ec:	f7ff ffab 	bl	8003946 <__hexdig_fun>
 80039f0:	2800      	cmp	r0, #0
 80039f2:	d1f8      	bne.n	80039e6 <__gethex+0x76>
 80039f4:	2201      	movs	r2, #1
 80039f6:	4628      	mov	r0, r5
 80039f8:	4994      	ldr	r1, [pc, #592]	; (8003c4c <__gethex+0x2dc>)
 80039fa:	f7ff fde2 	bl	80035c2 <strncmp>
 80039fe:	b978      	cbnz	r0, 8003a20 <__gethex+0xb0>
 8003a00:	b946      	cbnz	r6, 8003a14 <__gethex+0xa4>
 8003a02:	1c6e      	adds	r6, r5, #1
 8003a04:	4632      	mov	r2, r6
 8003a06:	4615      	mov	r5, r2
 8003a08:	7828      	ldrb	r0, [r5, #0]
 8003a0a:	3201      	adds	r2, #1
 8003a0c:	f7ff ff9b 	bl	8003946 <__hexdig_fun>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1f8      	bne.n	8003a06 <__gethex+0x96>
 8003a14:	1b73      	subs	r3, r6, r5
 8003a16:	009e      	lsls	r6, r3, #2
 8003a18:	e004      	b.n	8003a24 <__gethex+0xb4>
 8003a1a:	2400      	movs	r4, #0
 8003a1c:	4626      	mov	r6, r4
 8003a1e:	e7e1      	b.n	80039e4 <__gethex+0x74>
 8003a20:	2e00      	cmp	r6, #0
 8003a22:	d1f7      	bne.n	8003a14 <__gethex+0xa4>
 8003a24:	782b      	ldrb	r3, [r5, #0]
 8003a26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a2a:	2b50      	cmp	r3, #80	; 0x50
 8003a2c:	d13d      	bne.n	8003aaa <__gethex+0x13a>
 8003a2e:	786b      	ldrb	r3, [r5, #1]
 8003a30:	2b2b      	cmp	r3, #43	; 0x2b
 8003a32:	d02f      	beq.n	8003a94 <__gethex+0x124>
 8003a34:	2b2d      	cmp	r3, #45	; 0x2d
 8003a36:	d031      	beq.n	8003a9c <__gethex+0x12c>
 8003a38:	f04f 0b00 	mov.w	fp, #0
 8003a3c:	1c69      	adds	r1, r5, #1
 8003a3e:	7808      	ldrb	r0, [r1, #0]
 8003a40:	f7ff ff81 	bl	8003946 <__hexdig_fun>
 8003a44:	1e42      	subs	r2, r0, #1
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	2a18      	cmp	r2, #24
 8003a4a:	d82e      	bhi.n	8003aaa <__gethex+0x13a>
 8003a4c:	f1a0 0210 	sub.w	r2, r0, #16
 8003a50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003a54:	f7ff ff77 	bl	8003946 <__hexdig_fun>
 8003a58:	f100 3cff 	add.w	ip, r0, #4294967295
 8003a5c:	fa5f fc8c 	uxtb.w	ip, ip
 8003a60:	f1bc 0f18 	cmp.w	ip, #24
 8003a64:	d91d      	bls.n	8003aa2 <__gethex+0x132>
 8003a66:	f1bb 0f00 	cmp.w	fp, #0
 8003a6a:	d000      	beq.n	8003a6e <__gethex+0xfe>
 8003a6c:	4252      	negs	r2, r2
 8003a6e:	4416      	add	r6, r2
 8003a70:	f8ca 1000 	str.w	r1, [sl]
 8003a74:	b1dc      	cbz	r4, 8003aae <__gethex+0x13e>
 8003a76:	9b01      	ldr	r3, [sp, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf14      	ite	ne
 8003a7c:	f04f 0800 	movne.w	r8, #0
 8003a80:	f04f 0806 	moveq.w	r8, #6
 8003a84:	4640      	mov	r0, r8
 8003a86:	b005      	add	sp, #20
 8003a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8c:	4645      	mov	r5, r8
 8003a8e:	4626      	mov	r6, r4
 8003a90:	2401      	movs	r4, #1
 8003a92:	e7c7      	b.n	8003a24 <__gethex+0xb4>
 8003a94:	f04f 0b00 	mov.w	fp, #0
 8003a98:	1ca9      	adds	r1, r5, #2
 8003a9a:	e7d0      	b.n	8003a3e <__gethex+0xce>
 8003a9c:	f04f 0b01 	mov.w	fp, #1
 8003aa0:	e7fa      	b.n	8003a98 <__gethex+0x128>
 8003aa2:	230a      	movs	r3, #10
 8003aa4:	fb03 0002 	mla	r0, r3, r2, r0
 8003aa8:	e7d0      	b.n	8003a4c <__gethex+0xdc>
 8003aaa:	4629      	mov	r1, r5
 8003aac:	e7e0      	b.n	8003a70 <__gethex+0x100>
 8003aae:	4621      	mov	r1, r4
 8003ab0:	eba5 0308 	sub.w	r3, r5, r8
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	2b07      	cmp	r3, #7
 8003ab8:	dc0a      	bgt.n	8003ad0 <__gethex+0x160>
 8003aba:	4648      	mov	r0, r9
 8003abc:	f000 fb10 	bl	80040e0 <_Balloc>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	b940      	cbnz	r0, 8003ad6 <__gethex+0x166>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	21e4      	movs	r1, #228	; 0xe4
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <__gethex+0x2e0>)
 8003aca:	4862      	ldr	r0, [pc, #392]	; (8003c54 <__gethex+0x2e4>)
 8003acc:	f7ff fe82 	bl	80037d4 <__assert_func>
 8003ad0:	3101      	adds	r1, #1
 8003ad2:	105b      	asrs	r3, r3, #1
 8003ad4:	e7ef      	b.n	8003ab6 <__gethex+0x146>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	469b      	mov	fp, r3
 8003ada:	f100 0a14 	add.w	sl, r0, #20
 8003ade:	f8cd a004 	str.w	sl, [sp, #4]
 8003ae2:	45a8      	cmp	r8, r5
 8003ae4:	d344      	bcc.n	8003b70 <__gethex+0x200>
 8003ae6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003aea:	4658      	mov	r0, fp
 8003aec:	f848 bb04 	str.w	fp, [r8], #4
 8003af0:	eba8 080a 	sub.w	r8, r8, sl
 8003af4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8003af8:	6122      	str	r2, [r4, #16]
 8003afa:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8003afe:	f000 fbe1 	bl	80042c4 <__hi0bits>
 8003b02:	683d      	ldr	r5, [r7, #0]
 8003b04:	eba8 0800 	sub.w	r8, r8, r0
 8003b08:	45a8      	cmp	r8, r5
 8003b0a:	dd59      	ble.n	8003bc0 <__gethex+0x250>
 8003b0c:	eba8 0805 	sub.w	r8, r8, r5
 8003b10:	4641      	mov	r1, r8
 8003b12:	4620      	mov	r0, r4
 8003b14:	f000 ff5f 	bl	80049d6 <__any_on>
 8003b18:	4683      	mov	fp, r0
 8003b1a:	b1b8      	cbz	r0, 8003b4c <__gethex+0x1dc>
 8003b1c:	f04f 0b01 	mov.w	fp, #1
 8003b20:	f108 33ff 	add.w	r3, r8, #4294967295
 8003b24:	1159      	asrs	r1, r3, #5
 8003b26:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8003b2a:	f003 021f 	and.w	r2, r3, #31
 8003b2e:	fa0b f202 	lsl.w	r2, fp, r2
 8003b32:	420a      	tst	r2, r1
 8003b34:	d00a      	beq.n	8003b4c <__gethex+0x1dc>
 8003b36:	455b      	cmp	r3, fp
 8003b38:	dd06      	ble.n	8003b48 <__gethex+0x1d8>
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	f1a8 0102 	sub.w	r1, r8, #2
 8003b40:	f000 ff49 	bl	80049d6 <__any_on>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d138      	bne.n	8003bba <__gethex+0x24a>
 8003b48:	f04f 0b02 	mov.w	fp, #2
 8003b4c:	4641      	mov	r1, r8
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7ff fea6 	bl	80038a0 <rshift>
 8003b54:	4446      	add	r6, r8
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	42b3      	cmp	r3, r6
 8003b5a:	da41      	bge.n	8003be0 <__gethex+0x270>
 8003b5c:	4621      	mov	r1, r4
 8003b5e:	4648      	mov	r0, r9
 8003b60:	f000 fafe 	bl	8004160 <_Bfree>
 8003b64:	2300      	movs	r3, #0
 8003b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b68:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e789      	b.n	8003a84 <__gethex+0x114>
 8003b70:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8003b74:	2a2e      	cmp	r2, #46	; 0x2e
 8003b76:	d014      	beq.n	8003ba2 <__gethex+0x232>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d106      	bne.n	8003b8a <__gethex+0x21a>
 8003b7c:	9b01      	ldr	r3, [sp, #4]
 8003b7e:	f843 bb04 	str.w	fp, [r3], #4
 8003b82:	f04f 0b00 	mov.w	fp, #0
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	465b      	mov	r3, fp
 8003b8a:	7828      	ldrb	r0, [r5, #0]
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	f7ff feda 	bl	8003946 <__hexdig_fun>
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	f000 000f 	and.w	r0, r0, #15
 8003b98:	4098      	lsls	r0, r3
 8003b9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	e79f      	b.n	8003ae2 <__gethex+0x172>
 8003ba2:	45a8      	cmp	r8, r5
 8003ba4:	d8e8      	bhi.n	8003b78 <__gethex+0x208>
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4628      	mov	r0, r5
 8003baa:	4928      	ldr	r1, [pc, #160]	; (8003c4c <__gethex+0x2dc>)
 8003bac:	9303      	str	r3, [sp, #12]
 8003bae:	f7ff fd08 	bl	80035c2 <strncmp>
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d1df      	bne.n	8003b78 <__gethex+0x208>
 8003bb8:	e793      	b.n	8003ae2 <__gethex+0x172>
 8003bba:	f04f 0b03 	mov.w	fp, #3
 8003bbe:	e7c5      	b.n	8003b4c <__gethex+0x1dc>
 8003bc0:	da0b      	bge.n	8003bda <__gethex+0x26a>
 8003bc2:	eba5 0808 	sub.w	r8, r5, r8
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	4642      	mov	r2, r8
 8003bca:	4648      	mov	r0, r9
 8003bcc:	f000 fce0 	bl	8004590 <__lshift>
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	eba6 0608 	sub.w	r6, r6, r8
 8003bd6:	f100 0a14 	add.w	sl, r0, #20
 8003bda:	f04f 0b00 	mov.w	fp, #0
 8003bde:	e7ba      	b.n	8003b56 <__gethex+0x1e6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	42b3      	cmp	r3, r6
 8003be4:	dd74      	ble.n	8003cd0 <__gethex+0x360>
 8003be6:	1b9e      	subs	r6, r3, r6
 8003be8:	42b5      	cmp	r5, r6
 8003bea:	dc35      	bgt.n	8003c58 <__gethex+0x2e8>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d023      	beq.n	8003c3a <__gethex+0x2ca>
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d025      	beq.n	8003c42 <__gethex+0x2d2>
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d115      	bne.n	8003c26 <__gethex+0x2b6>
 8003bfa:	42b5      	cmp	r5, r6
 8003bfc:	d113      	bne.n	8003c26 <__gethex+0x2b6>
 8003bfe:	2d01      	cmp	r5, #1
 8003c00:	d10b      	bne.n	8003c1a <__gethex+0x2aa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	9a02      	ldr	r2, [sp, #8]
 8003c06:	f04f 0862 	mov.w	r8, #98	; 0x62
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	6123      	str	r3, [r4, #16]
 8003c10:	f8ca 3000 	str.w	r3, [sl]
 8003c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c16:	601c      	str	r4, [r3, #0]
 8003c18:	e734      	b.n	8003a84 <__gethex+0x114>
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	1e69      	subs	r1, r5, #1
 8003c1e:	f000 feda 	bl	80049d6 <__any_on>
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1ed      	bne.n	8003c02 <__gethex+0x292>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4648      	mov	r0, r9
 8003c2a:	f000 fa99 	bl	8004160 <_Bfree>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c32:	f04f 0850 	mov.w	r8, #80	; 0x50
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	e724      	b.n	8003a84 <__gethex+0x114>
 8003c3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f2      	bne.n	8003c26 <__gethex+0x2b6>
 8003c40:	e7df      	b.n	8003c02 <__gethex+0x292>
 8003c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1dc      	bne.n	8003c02 <__gethex+0x292>
 8003c48:	e7ed      	b.n	8003c26 <__gethex+0x2b6>
 8003c4a:	bf00      	nop
 8003c4c:	080054da 	.word	0x080054da
 8003c50:	080055ed 	.word	0x080055ed
 8003c54:	080055fe 	.word	0x080055fe
 8003c58:	f106 38ff 	add.w	r8, r6, #4294967295
 8003c5c:	f1bb 0f00 	cmp.w	fp, #0
 8003c60:	d133      	bne.n	8003cca <__gethex+0x35a>
 8003c62:	f1b8 0f00 	cmp.w	r8, #0
 8003c66:	d004      	beq.n	8003c72 <__gethex+0x302>
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 feb3 	bl	80049d6 <__any_on>
 8003c70:	4683      	mov	fp, r0
 8003c72:	2301      	movs	r3, #1
 8003c74:	ea4f 1268 	mov.w	r2, r8, asr #5
 8003c78:	f008 081f 	and.w	r8, r8, #31
 8003c7c:	fa03 f308 	lsl.w	r3, r3, r8
 8003c80:	f04f 0802 	mov.w	r8, #2
 8003c84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4213      	tst	r3, r2
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	bf18      	it	ne
 8003c90:	f04b 0b02 	orrne.w	fp, fp, #2
 8003c94:	1bad      	subs	r5, r5, r6
 8003c96:	f7ff fe03 	bl	80038a0 <rshift>
 8003c9a:	687e      	ldr	r6, [r7, #4]
 8003c9c:	f1bb 0f00 	cmp.w	fp, #0
 8003ca0:	d04a      	beq.n	8003d38 <__gethex+0x3c8>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d016      	beq.n	8003cd6 <__gethex+0x366>
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d018      	beq.n	8003cde <__gethex+0x36e>
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d109      	bne.n	8003cc4 <__gethex+0x354>
 8003cb0:	f01b 0f02 	tst.w	fp, #2
 8003cb4:	d006      	beq.n	8003cc4 <__gethex+0x354>
 8003cb6:	f8da 3000 	ldr.w	r3, [sl]
 8003cba:	ea4b 0b03 	orr.w	fp, fp, r3
 8003cbe:	f01b 0f01 	tst.w	fp, #1
 8003cc2:	d10f      	bne.n	8003ce4 <__gethex+0x374>
 8003cc4:	f048 0810 	orr.w	r8, r8, #16
 8003cc8:	e036      	b.n	8003d38 <__gethex+0x3c8>
 8003cca:	f04f 0b01 	mov.w	fp, #1
 8003cce:	e7d0      	b.n	8003c72 <__gethex+0x302>
 8003cd0:	f04f 0801 	mov.w	r8, #1
 8003cd4:	e7e2      	b.n	8003c9c <__gethex+0x32c>
 8003cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cd8:	f1c3 0301 	rsb	r3, r3, #1
 8003cdc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ef      	beq.n	8003cc4 <__gethex+0x354>
 8003ce4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8003ce8:	f104 0214 	add.w	r2, r4, #20
 8003cec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8003cf8:	4694      	mov	ip, r2
 8003cfa:	f852 1b04 	ldr.w	r1, [r2], #4
 8003cfe:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003d02:	d01e      	beq.n	8003d42 <__gethex+0x3d2>
 8003d04:	3101      	adds	r1, #1
 8003d06:	f8cc 1000 	str.w	r1, [ip]
 8003d0a:	f1b8 0f02 	cmp.w	r8, #2
 8003d0e:	f104 0214 	add.w	r2, r4, #20
 8003d12:	d13d      	bne.n	8003d90 <__gethex+0x420>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	42ab      	cmp	r3, r5
 8003d1a:	d10b      	bne.n	8003d34 <__gethex+0x3c4>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	1169      	asrs	r1, r5, #5
 8003d20:	f005 051f 	and.w	r5, r5, #31
 8003d24:	fa03 f505 	lsl.w	r5, r3, r5
 8003d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d2c:	421d      	tst	r5, r3
 8003d2e:	bf18      	it	ne
 8003d30:	f04f 0801 	movne.w	r8, #1
 8003d34:	f048 0820 	orr.w	r8, r8, #32
 8003d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d3a:	601c      	str	r4, [r3, #0]
 8003d3c:	9b02      	ldr	r3, [sp, #8]
 8003d3e:	601e      	str	r6, [r3, #0]
 8003d40:	e6a0      	b.n	8003a84 <__gethex+0x114>
 8003d42:	4290      	cmp	r0, r2
 8003d44:	f842 3c04 	str.w	r3, [r2, #-4]
 8003d48:	d8d6      	bhi.n	8003cf8 <__gethex+0x388>
 8003d4a:	68a2      	ldr	r2, [r4, #8]
 8003d4c:	4593      	cmp	fp, r2
 8003d4e:	db17      	blt.n	8003d80 <__gethex+0x410>
 8003d50:	6861      	ldr	r1, [r4, #4]
 8003d52:	4648      	mov	r0, r9
 8003d54:	3101      	adds	r1, #1
 8003d56:	f000 f9c3 	bl	80040e0 <_Balloc>
 8003d5a:	4682      	mov	sl, r0
 8003d5c:	b918      	cbnz	r0, 8003d66 <__gethex+0x3f6>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	2184      	movs	r1, #132	; 0x84
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <__gethex+0x45c>)
 8003d64:	e6b1      	b.n	8003aca <__gethex+0x15a>
 8003d66:	6922      	ldr	r2, [r4, #16]
 8003d68:	f104 010c 	add.w	r1, r4, #12
 8003d6c:	3202      	adds	r2, #2
 8003d6e:	0092      	lsls	r2, r2, #2
 8003d70:	300c      	adds	r0, #12
 8003d72:	f7ff fd1a 	bl	80037aa <memcpy>
 8003d76:	4621      	mov	r1, r4
 8003d78:	4648      	mov	r0, r9
 8003d7a:	f000 f9f1 	bl	8004160 <_Bfree>
 8003d7e:	4654      	mov	r4, sl
 8003d80:	6922      	ldr	r2, [r4, #16]
 8003d82:	1c51      	adds	r1, r2, #1
 8003d84:	6121      	str	r1, [r4, #16]
 8003d86:	2101      	movs	r1, #1
 8003d88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003d8c:	6151      	str	r1, [r2, #20]
 8003d8e:	e7bc      	b.n	8003d0a <__gethex+0x39a>
 8003d90:	6921      	ldr	r1, [r4, #16]
 8003d92:	4559      	cmp	r1, fp
 8003d94:	dd0b      	ble.n	8003dae <__gethex+0x43e>
 8003d96:	2101      	movs	r1, #1
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f7ff fd81 	bl	80038a0 <rshift>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3601      	adds	r6, #1
 8003da2:	42b3      	cmp	r3, r6
 8003da4:	f6ff aeda 	blt.w	8003b5c <__gethex+0x1ec>
 8003da8:	f04f 0801 	mov.w	r8, #1
 8003dac:	e7c2      	b.n	8003d34 <__gethex+0x3c4>
 8003dae:	f015 051f 	ands.w	r5, r5, #31
 8003db2:	d0f9      	beq.n	8003da8 <__gethex+0x438>
 8003db4:	9b01      	ldr	r3, [sp, #4]
 8003db6:	f1c5 0520 	rsb	r5, r5, #32
 8003dba:	441a      	add	r2, r3
 8003dbc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8003dc0:	f000 fa80 	bl	80042c4 <__hi0bits>
 8003dc4:	42a8      	cmp	r0, r5
 8003dc6:	dbe6      	blt.n	8003d96 <__gethex+0x426>
 8003dc8:	e7ee      	b.n	8003da8 <__gethex+0x438>
 8003dca:	bf00      	nop
 8003dcc:	080055ed 	.word	0x080055ed

08003dd0 <L_shift>:
 8003dd0:	f1c2 0208 	rsb	r2, r2, #8
 8003dd4:	0092      	lsls	r2, r2, #2
 8003dd6:	b570      	push	{r4, r5, r6, lr}
 8003dd8:	f1c2 0620 	rsb	r6, r2, #32
 8003ddc:	6843      	ldr	r3, [r0, #4]
 8003dde:	6804      	ldr	r4, [r0, #0]
 8003de0:	fa03 f506 	lsl.w	r5, r3, r6
 8003de4:	432c      	orrs	r4, r5
 8003de6:	40d3      	lsrs	r3, r2
 8003de8:	6004      	str	r4, [r0, #0]
 8003dea:	f840 3f04 	str.w	r3, [r0, #4]!
 8003dee:	4288      	cmp	r0, r1
 8003df0:	d3f4      	bcc.n	8003ddc <L_shift+0xc>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}

08003df4 <__match>:
 8003df4:	b530      	push	{r4, r5, lr}
 8003df6:	6803      	ldr	r3, [r0, #0]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dfe:	b914      	cbnz	r4, 8003e06 <__match+0x12>
 8003e00:	6003      	str	r3, [r0, #0]
 8003e02:	2001      	movs	r0, #1
 8003e04:	bd30      	pop	{r4, r5, pc}
 8003e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8003e0e:	2d19      	cmp	r5, #25
 8003e10:	bf98      	it	ls
 8003e12:	3220      	addls	r2, #32
 8003e14:	42a2      	cmp	r2, r4
 8003e16:	d0f0      	beq.n	8003dfa <__match+0x6>
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e7f3      	b.n	8003e04 <__match+0x10>

08003e1c <__hexnan>:
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	2500      	movs	r5, #0
 8003e22:	680b      	ldr	r3, [r1, #0]
 8003e24:	4682      	mov	sl, r0
 8003e26:	115e      	asrs	r6, r3, #5
 8003e28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003e2c:	f013 031f 	ands.w	r3, r3, #31
 8003e30:	bf18      	it	ne
 8003e32:	3604      	addne	r6, #4
 8003e34:	1f37      	subs	r7, r6, #4
 8003e36:	4690      	mov	r8, r2
 8003e38:	46b9      	mov	r9, r7
 8003e3a:	463c      	mov	r4, r7
 8003e3c:	46ab      	mov	fp, r5
 8003e3e:	b087      	sub	sp, #28
 8003e40:	6801      	ldr	r1, [r0, #0]
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	f846 5c04 	str.w	r5, [r6, #-4]
 8003e48:	9502      	str	r5, [sp, #8]
 8003e4a:	784a      	ldrb	r2, [r1, #1]
 8003e4c:	1c4b      	adds	r3, r1, #1
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	b342      	cbz	r2, 8003ea4 <__hexnan+0x88>
 8003e52:	4610      	mov	r0, r2
 8003e54:	9105      	str	r1, [sp, #20]
 8003e56:	9204      	str	r2, [sp, #16]
 8003e58:	f7ff fd75 	bl	8003946 <__hexdig_fun>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d14f      	bne.n	8003f00 <__hexnan+0xe4>
 8003e60:	9a04      	ldr	r2, [sp, #16]
 8003e62:	9905      	ldr	r1, [sp, #20]
 8003e64:	2a20      	cmp	r2, #32
 8003e66:	d818      	bhi.n	8003e9a <__hexnan+0x7e>
 8003e68:	9b02      	ldr	r3, [sp, #8]
 8003e6a:	459b      	cmp	fp, r3
 8003e6c:	dd13      	ble.n	8003e96 <__hexnan+0x7a>
 8003e6e:	454c      	cmp	r4, r9
 8003e70:	d206      	bcs.n	8003e80 <__hexnan+0x64>
 8003e72:	2d07      	cmp	r5, #7
 8003e74:	dc04      	bgt.n	8003e80 <__hexnan+0x64>
 8003e76:	462a      	mov	r2, r5
 8003e78:	4649      	mov	r1, r9
 8003e7a:	4620      	mov	r0, r4
 8003e7c:	f7ff ffa8 	bl	8003dd0 <L_shift>
 8003e80:	4544      	cmp	r4, r8
 8003e82:	d950      	bls.n	8003f26 <__hexnan+0x10a>
 8003e84:	2300      	movs	r3, #0
 8003e86:	f1a4 0904 	sub.w	r9, r4, #4
 8003e8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8003e8e:	461d      	mov	r5, r3
 8003e90:	464c      	mov	r4, r9
 8003e92:	f8cd b008 	str.w	fp, [sp, #8]
 8003e96:	9903      	ldr	r1, [sp, #12]
 8003e98:	e7d7      	b.n	8003e4a <__hexnan+0x2e>
 8003e9a:	2a29      	cmp	r2, #41	; 0x29
 8003e9c:	d155      	bne.n	8003f4a <__hexnan+0x12e>
 8003e9e:	3102      	adds	r1, #2
 8003ea0:	f8ca 1000 	str.w	r1, [sl]
 8003ea4:	f1bb 0f00 	cmp.w	fp, #0
 8003ea8:	d04f      	beq.n	8003f4a <__hexnan+0x12e>
 8003eaa:	454c      	cmp	r4, r9
 8003eac:	d206      	bcs.n	8003ebc <__hexnan+0xa0>
 8003eae:	2d07      	cmp	r5, #7
 8003eb0:	dc04      	bgt.n	8003ebc <__hexnan+0xa0>
 8003eb2:	462a      	mov	r2, r5
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff ff8a 	bl	8003dd0 <L_shift>
 8003ebc:	4544      	cmp	r4, r8
 8003ebe:	d934      	bls.n	8003f2a <__hexnan+0x10e>
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	f1a8 0204 	sub.w	r2, r8, #4
 8003ec6:	f853 1b04 	ldr.w	r1, [r3], #4
 8003eca:	429f      	cmp	r7, r3
 8003ecc:	f842 1f04 	str.w	r1, [r2, #4]!
 8003ed0:	d2f9      	bcs.n	8003ec6 <__hexnan+0xaa>
 8003ed2:	1b3b      	subs	r3, r7, r4
 8003ed4:	f023 0303 	bic.w	r3, r3, #3
 8003ed8:	3304      	adds	r3, #4
 8003eda:	3e03      	subs	r6, #3
 8003edc:	3401      	adds	r4, #1
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	bf38      	it	cc
 8003ee2:	2304      	movcc	r3, #4
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4443      	add	r3, r8
 8003ee8:	f843 2b04 	str.w	r2, [r3], #4
 8003eec:	429f      	cmp	r7, r3
 8003eee:	d2fb      	bcs.n	8003ee8 <__hexnan+0xcc>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	b91b      	cbnz	r3, 8003efc <__hexnan+0xe0>
 8003ef4:	4547      	cmp	r7, r8
 8003ef6:	d126      	bne.n	8003f46 <__hexnan+0x12a>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	2005      	movs	r0, #5
 8003efe:	e025      	b.n	8003f4c <__hexnan+0x130>
 8003f00:	3501      	adds	r5, #1
 8003f02:	2d08      	cmp	r5, #8
 8003f04:	f10b 0b01 	add.w	fp, fp, #1
 8003f08:	dd06      	ble.n	8003f18 <__hexnan+0xfc>
 8003f0a:	4544      	cmp	r4, r8
 8003f0c:	d9c3      	bls.n	8003e96 <__hexnan+0x7a>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2501      	movs	r5, #1
 8003f12:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f16:	3c04      	subs	r4, #4
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	f000 000f 	and.w	r0, r0, #15
 8003f1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8003f22:	6020      	str	r0, [r4, #0]
 8003f24:	e7b7      	b.n	8003e96 <__hexnan+0x7a>
 8003f26:	2508      	movs	r5, #8
 8003f28:	e7b5      	b.n	8003e96 <__hexnan+0x7a>
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0df      	beq.n	8003ef0 <__hexnan+0xd4>
 8003f30:	f04f 32ff 	mov.w	r2, #4294967295
 8003f34:	f1c3 0320 	rsb	r3, r3, #32
 8003f38:	40da      	lsrs	r2, r3
 8003f3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	f846 3c04 	str.w	r3, [r6, #-4]
 8003f44:	e7d4      	b.n	8003ef0 <__hexnan+0xd4>
 8003f46:	3f04      	subs	r7, #4
 8003f48:	e7d2      	b.n	8003ef0 <__hexnan+0xd4>
 8003f4a:	2004      	movs	r0, #4
 8003f4c:	b007      	add	sp, #28
 8003f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003f54 <malloc>:
 8003f54:	4b02      	ldr	r3, [pc, #8]	; (8003f60 <malloc+0xc>)
 8003f56:	4601      	mov	r1, r0
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f000 b823 	b.w	8003fa4 <_malloc_r>
 8003f5e:	bf00      	nop
 8003f60:	200001ec 	.word	0x200001ec

08003f64 <sbrk_aligned>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4e0e      	ldr	r6, [pc, #56]	; (8003fa0 <sbrk_aligned+0x3c>)
 8003f68:	460c      	mov	r4, r1
 8003f6a:	6831      	ldr	r1, [r6, #0]
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	b911      	cbnz	r1, 8003f76 <sbrk_aligned+0x12>
 8003f70:	f000 fe1c 	bl	8004bac <_sbrk_r>
 8003f74:	6030      	str	r0, [r6, #0]
 8003f76:	4621      	mov	r1, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f000 fe17 	bl	8004bac <_sbrk_r>
 8003f7e:	1c43      	adds	r3, r0, #1
 8003f80:	d00a      	beq.n	8003f98 <sbrk_aligned+0x34>
 8003f82:	1cc4      	adds	r4, r0, #3
 8003f84:	f024 0403 	bic.w	r4, r4, #3
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d007      	beq.n	8003f9c <sbrk_aligned+0x38>
 8003f8c:	1a21      	subs	r1, r4, r0
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f000 fe0c 	bl	8004bac <_sbrk_r>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d101      	bne.n	8003f9c <sbrk_aligned+0x38>
 8003f98:	f04f 34ff 	mov.w	r4, #4294967295
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
 8003fa0:	200003d0 	.word	0x200003d0

08003fa4 <_malloc_r>:
 8003fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa8:	1ccd      	adds	r5, r1, #3
 8003faa:	f025 0503 	bic.w	r5, r5, #3
 8003fae:	3508      	adds	r5, #8
 8003fb0:	2d0c      	cmp	r5, #12
 8003fb2:	bf38      	it	cc
 8003fb4:	250c      	movcc	r5, #12
 8003fb6:	2d00      	cmp	r5, #0
 8003fb8:	4607      	mov	r7, r0
 8003fba:	db01      	blt.n	8003fc0 <_malloc_r+0x1c>
 8003fbc:	42a9      	cmp	r1, r5
 8003fbe:	d905      	bls.n	8003fcc <_malloc_r+0x28>
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	2600      	movs	r6, #0
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040a0 <_malloc_r+0xfc>
 8003fd0:	f000 f87a 	bl	80040c8 <__malloc_lock>
 8003fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd8:	461c      	mov	r4, r3
 8003fda:	bb5c      	cbnz	r4, 8004034 <_malloc_r+0x90>
 8003fdc:	4629      	mov	r1, r5
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f7ff ffc0 	bl	8003f64 <sbrk_aligned>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	d155      	bne.n	8004096 <_malloc_r+0xf2>
 8003fea:	f8d8 4000 	ldr.w	r4, [r8]
 8003fee:	4626      	mov	r6, r4
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	d145      	bne.n	8004080 <_malloc_r+0xdc>
 8003ff4:	2c00      	cmp	r4, #0
 8003ff6:	d048      	beq.n	800408a <_malloc_r+0xe6>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	eb04 0903 	add.w	r9, r4, r3
 8004002:	f000 fdd3 	bl	8004bac <_sbrk_r>
 8004006:	4581      	cmp	r9, r0
 8004008:	d13f      	bne.n	800408a <_malloc_r+0xe6>
 800400a:	6821      	ldr	r1, [r4, #0]
 800400c:	4638      	mov	r0, r7
 800400e:	1a6d      	subs	r5, r5, r1
 8004010:	4629      	mov	r1, r5
 8004012:	f7ff ffa7 	bl	8003f64 <sbrk_aligned>
 8004016:	3001      	adds	r0, #1
 8004018:	d037      	beq.n	800408a <_malloc_r+0xe6>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	442b      	add	r3, r5
 800401e:	6023      	str	r3, [r4, #0]
 8004020:	f8d8 3000 	ldr.w	r3, [r8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d038      	beq.n	800409a <_malloc_r+0xf6>
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	42a2      	cmp	r2, r4
 800402c:	d12b      	bne.n	8004086 <_malloc_r+0xe2>
 800402e:	2200      	movs	r2, #0
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	e00f      	b.n	8004054 <_malloc_r+0xb0>
 8004034:	6822      	ldr	r2, [r4, #0]
 8004036:	1b52      	subs	r2, r2, r5
 8004038:	d41f      	bmi.n	800407a <_malloc_r+0xd6>
 800403a:	2a0b      	cmp	r2, #11
 800403c:	d917      	bls.n	800406e <_malloc_r+0xca>
 800403e:	1961      	adds	r1, r4, r5
 8004040:	42a3      	cmp	r3, r4
 8004042:	6025      	str	r5, [r4, #0]
 8004044:	bf18      	it	ne
 8004046:	6059      	strne	r1, [r3, #4]
 8004048:	6863      	ldr	r3, [r4, #4]
 800404a:	bf08      	it	eq
 800404c:	f8c8 1000 	streq.w	r1, [r8]
 8004050:	5162      	str	r2, [r4, r5]
 8004052:	604b      	str	r3, [r1, #4]
 8004054:	4638      	mov	r0, r7
 8004056:	f104 060b 	add.w	r6, r4, #11
 800405a:	f000 f83b 	bl	80040d4 <__malloc_unlock>
 800405e:	f026 0607 	bic.w	r6, r6, #7
 8004062:	1d23      	adds	r3, r4, #4
 8004064:	1af2      	subs	r2, r6, r3
 8004066:	d0ae      	beq.n	8003fc6 <_malloc_r+0x22>
 8004068:	1b9b      	subs	r3, r3, r6
 800406a:	50a3      	str	r3, [r4, r2]
 800406c:	e7ab      	b.n	8003fc6 <_malloc_r+0x22>
 800406e:	42a3      	cmp	r3, r4
 8004070:	6862      	ldr	r2, [r4, #4]
 8004072:	d1dd      	bne.n	8004030 <_malloc_r+0x8c>
 8004074:	f8c8 2000 	str.w	r2, [r8]
 8004078:	e7ec      	b.n	8004054 <_malloc_r+0xb0>
 800407a:	4623      	mov	r3, r4
 800407c:	6864      	ldr	r4, [r4, #4]
 800407e:	e7ac      	b.n	8003fda <_malloc_r+0x36>
 8004080:	4634      	mov	r4, r6
 8004082:	6876      	ldr	r6, [r6, #4]
 8004084:	e7b4      	b.n	8003ff0 <_malloc_r+0x4c>
 8004086:	4613      	mov	r3, r2
 8004088:	e7cc      	b.n	8004024 <_malloc_r+0x80>
 800408a:	230c      	movs	r3, #12
 800408c:	4638      	mov	r0, r7
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	f000 f820 	bl	80040d4 <__malloc_unlock>
 8004094:	e797      	b.n	8003fc6 <_malloc_r+0x22>
 8004096:	6025      	str	r5, [r4, #0]
 8004098:	e7dc      	b.n	8004054 <_malloc_r+0xb0>
 800409a:	605b      	str	r3, [r3, #4]
 800409c:	deff      	udf	#255	; 0xff
 800409e:	bf00      	nop
 80040a0:	200003cc 	.word	0x200003cc

080040a4 <__ascii_mbtowc>:
 80040a4:	b082      	sub	sp, #8
 80040a6:	b901      	cbnz	r1, 80040aa <__ascii_mbtowc+0x6>
 80040a8:	a901      	add	r1, sp, #4
 80040aa:	b142      	cbz	r2, 80040be <__ascii_mbtowc+0x1a>
 80040ac:	b14b      	cbz	r3, 80040c2 <__ascii_mbtowc+0x1e>
 80040ae:	7813      	ldrb	r3, [r2, #0]
 80040b0:	600b      	str	r3, [r1, #0]
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	1e10      	subs	r0, r2, #0
 80040b6:	bf18      	it	ne
 80040b8:	2001      	movne	r0, #1
 80040ba:	b002      	add	sp, #8
 80040bc:	4770      	bx	lr
 80040be:	4610      	mov	r0, r2
 80040c0:	e7fb      	b.n	80040ba <__ascii_mbtowc+0x16>
 80040c2:	f06f 0001 	mvn.w	r0, #1
 80040c6:	e7f8      	b.n	80040ba <__ascii_mbtowc+0x16>

080040c8 <__malloc_lock>:
 80040c8:	4801      	ldr	r0, [pc, #4]	; (80040d0 <__malloc_lock+0x8>)
 80040ca:	f7ff bb6c 	b.w	80037a6 <__retarget_lock_acquire_recursive>
 80040ce:	bf00      	nop
 80040d0:	200003c8 	.word	0x200003c8

080040d4 <__malloc_unlock>:
 80040d4:	4801      	ldr	r0, [pc, #4]	; (80040dc <__malloc_unlock+0x8>)
 80040d6:	f7ff bb67 	b.w	80037a8 <__retarget_lock_release_recursive>
 80040da:	bf00      	nop
 80040dc:	200003c8 	.word	0x200003c8

080040e0 <_Balloc>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	69c6      	ldr	r6, [r0, #28]
 80040e4:	4604      	mov	r4, r0
 80040e6:	460d      	mov	r5, r1
 80040e8:	b976      	cbnz	r6, 8004108 <_Balloc+0x28>
 80040ea:	2010      	movs	r0, #16
 80040ec:	f7ff ff32 	bl	8003f54 <malloc>
 80040f0:	4602      	mov	r2, r0
 80040f2:	61e0      	str	r0, [r4, #28]
 80040f4:	b920      	cbnz	r0, 8004100 <_Balloc+0x20>
 80040f6:	216b      	movs	r1, #107	; 0x6b
 80040f8:	4b17      	ldr	r3, [pc, #92]	; (8004158 <_Balloc+0x78>)
 80040fa:	4818      	ldr	r0, [pc, #96]	; (800415c <_Balloc+0x7c>)
 80040fc:	f7ff fb6a 	bl	80037d4 <__assert_func>
 8004100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004104:	6006      	str	r6, [r0, #0]
 8004106:	60c6      	str	r6, [r0, #12]
 8004108:	69e6      	ldr	r6, [r4, #28]
 800410a:	68f3      	ldr	r3, [r6, #12]
 800410c:	b183      	cbz	r3, 8004130 <_Balloc+0x50>
 800410e:	69e3      	ldr	r3, [r4, #28]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004116:	b9b8      	cbnz	r0, 8004148 <_Balloc+0x68>
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f605 	lsl.w	r6, r1, r5
 800411e:	1d72      	adds	r2, r6, #5
 8004120:	4620      	mov	r0, r4
 8004122:	0092      	lsls	r2, r2, #2
 8004124:	f000 fd59 	bl	8004bda <_calloc_r>
 8004128:	b160      	cbz	r0, 8004144 <_Balloc+0x64>
 800412a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800412e:	e00e      	b.n	800414e <_Balloc+0x6e>
 8004130:	2221      	movs	r2, #33	; 0x21
 8004132:	2104      	movs	r1, #4
 8004134:	4620      	mov	r0, r4
 8004136:	f000 fd50 	bl	8004bda <_calloc_r>
 800413a:	69e3      	ldr	r3, [r4, #28]
 800413c:	60f0      	str	r0, [r6, #12]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e4      	bne.n	800410e <_Balloc+0x2e>
 8004144:	2000      	movs	r0, #0
 8004146:	bd70      	pop	{r4, r5, r6, pc}
 8004148:	6802      	ldr	r2, [r0, #0]
 800414a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800414e:	2300      	movs	r3, #0
 8004150:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004154:	e7f7      	b.n	8004146 <_Balloc+0x66>
 8004156:	bf00      	nop
 8004158:	08005538 	.word	0x08005538
 800415c:	0800565e 	.word	0x0800565e

08004160 <_Bfree>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	69c6      	ldr	r6, [r0, #28]
 8004164:	4605      	mov	r5, r0
 8004166:	460c      	mov	r4, r1
 8004168:	b976      	cbnz	r6, 8004188 <_Bfree+0x28>
 800416a:	2010      	movs	r0, #16
 800416c:	f7ff fef2 	bl	8003f54 <malloc>
 8004170:	4602      	mov	r2, r0
 8004172:	61e8      	str	r0, [r5, #28]
 8004174:	b920      	cbnz	r0, 8004180 <_Bfree+0x20>
 8004176:	218f      	movs	r1, #143	; 0x8f
 8004178:	4b08      	ldr	r3, [pc, #32]	; (800419c <_Bfree+0x3c>)
 800417a:	4809      	ldr	r0, [pc, #36]	; (80041a0 <_Bfree+0x40>)
 800417c:	f7ff fb2a 	bl	80037d4 <__assert_func>
 8004180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004184:	6006      	str	r6, [r0, #0]
 8004186:	60c6      	str	r6, [r0, #12]
 8004188:	b13c      	cbz	r4, 800419a <_Bfree+0x3a>
 800418a:	69eb      	ldr	r3, [r5, #28]
 800418c:	6862      	ldr	r2, [r4, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004194:	6021      	str	r1, [r4, #0]
 8004196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	08005538 	.word	0x08005538
 80041a0:	0800565e 	.word	0x0800565e

080041a4 <__multadd>:
 80041a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a8:	4607      	mov	r7, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	461e      	mov	r6, r3
 80041ae:	2000      	movs	r0, #0
 80041b0:	690d      	ldr	r5, [r1, #16]
 80041b2:	f101 0c14 	add.w	ip, r1, #20
 80041b6:	f8dc 3000 	ldr.w	r3, [ip]
 80041ba:	3001      	adds	r0, #1
 80041bc:	b299      	uxth	r1, r3
 80041be:	fb02 6101 	mla	r1, r2, r1, r6
 80041c2:	0c1e      	lsrs	r6, r3, #16
 80041c4:	0c0b      	lsrs	r3, r1, #16
 80041c6:	fb02 3306 	mla	r3, r2, r6, r3
 80041ca:	b289      	uxth	r1, r1
 80041cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80041d0:	4285      	cmp	r5, r0
 80041d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80041d6:	f84c 1b04 	str.w	r1, [ip], #4
 80041da:	dcec      	bgt.n	80041b6 <__multadd+0x12>
 80041dc:	b30e      	cbz	r6, 8004222 <__multadd+0x7e>
 80041de:	68a3      	ldr	r3, [r4, #8]
 80041e0:	42ab      	cmp	r3, r5
 80041e2:	dc19      	bgt.n	8004218 <__multadd+0x74>
 80041e4:	6861      	ldr	r1, [r4, #4]
 80041e6:	4638      	mov	r0, r7
 80041e8:	3101      	adds	r1, #1
 80041ea:	f7ff ff79 	bl	80040e0 <_Balloc>
 80041ee:	4680      	mov	r8, r0
 80041f0:	b928      	cbnz	r0, 80041fe <__multadd+0x5a>
 80041f2:	4602      	mov	r2, r0
 80041f4:	21ba      	movs	r1, #186	; 0xba
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <__multadd+0x84>)
 80041f8:	480c      	ldr	r0, [pc, #48]	; (800422c <__multadd+0x88>)
 80041fa:	f7ff faeb 	bl	80037d4 <__assert_func>
 80041fe:	6922      	ldr	r2, [r4, #16]
 8004200:	f104 010c 	add.w	r1, r4, #12
 8004204:	3202      	adds	r2, #2
 8004206:	0092      	lsls	r2, r2, #2
 8004208:	300c      	adds	r0, #12
 800420a:	f7ff face 	bl	80037aa <memcpy>
 800420e:	4621      	mov	r1, r4
 8004210:	4638      	mov	r0, r7
 8004212:	f7ff ffa5 	bl	8004160 <_Bfree>
 8004216:	4644      	mov	r4, r8
 8004218:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800421c:	3501      	adds	r5, #1
 800421e:	615e      	str	r6, [r3, #20]
 8004220:	6125      	str	r5, [r4, #16]
 8004222:	4620      	mov	r0, r4
 8004224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004228:	080055ed 	.word	0x080055ed
 800422c:	0800565e 	.word	0x0800565e

08004230 <__s2b>:
 8004230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004234:	4615      	mov	r5, r2
 8004236:	2209      	movs	r2, #9
 8004238:	461f      	mov	r7, r3
 800423a:	3308      	adds	r3, #8
 800423c:	460c      	mov	r4, r1
 800423e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004242:	4606      	mov	r6, r0
 8004244:	2201      	movs	r2, #1
 8004246:	2100      	movs	r1, #0
 8004248:	429a      	cmp	r2, r3
 800424a:	db09      	blt.n	8004260 <__s2b+0x30>
 800424c:	4630      	mov	r0, r6
 800424e:	f7ff ff47 	bl	80040e0 <_Balloc>
 8004252:	b940      	cbnz	r0, 8004266 <__s2b+0x36>
 8004254:	4602      	mov	r2, r0
 8004256:	21d3      	movs	r1, #211	; 0xd3
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <__s2b+0x8c>)
 800425a:	4819      	ldr	r0, [pc, #100]	; (80042c0 <__s2b+0x90>)
 800425c:	f7ff faba 	bl	80037d4 <__assert_func>
 8004260:	0052      	lsls	r2, r2, #1
 8004262:	3101      	adds	r1, #1
 8004264:	e7f0      	b.n	8004248 <__s2b+0x18>
 8004266:	9b08      	ldr	r3, [sp, #32]
 8004268:	2d09      	cmp	r5, #9
 800426a:	6143      	str	r3, [r0, #20]
 800426c:	f04f 0301 	mov.w	r3, #1
 8004270:	6103      	str	r3, [r0, #16]
 8004272:	dd16      	ble.n	80042a2 <__s2b+0x72>
 8004274:	f104 0909 	add.w	r9, r4, #9
 8004278:	46c8      	mov	r8, r9
 800427a:	442c      	add	r4, r5
 800427c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004280:	4601      	mov	r1, r0
 8004282:	220a      	movs	r2, #10
 8004284:	4630      	mov	r0, r6
 8004286:	3b30      	subs	r3, #48	; 0x30
 8004288:	f7ff ff8c 	bl	80041a4 <__multadd>
 800428c:	45a0      	cmp	r8, r4
 800428e:	d1f5      	bne.n	800427c <__s2b+0x4c>
 8004290:	f1a5 0408 	sub.w	r4, r5, #8
 8004294:	444c      	add	r4, r9
 8004296:	1b2d      	subs	r5, r5, r4
 8004298:	1963      	adds	r3, r4, r5
 800429a:	42bb      	cmp	r3, r7
 800429c:	db04      	blt.n	80042a8 <__s2b+0x78>
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a2:	2509      	movs	r5, #9
 80042a4:	340a      	adds	r4, #10
 80042a6:	e7f6      	b.n	8004296 <__s2b+0x66>
 80042a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80042ac:	4601      	mov	r1, r0
 80042ae:	220a      	movs	r2, #10
 80042b0:	4630      	mov	r0, r6
 80042b2:	3b30      	subs	r3, #48	; 0x30
 80042b4:	f7ff ff76 	bl	80041a4 <__multadd>
 80042b8:	e7ee      	b.n	8004298 <__s2b+0x68>
 80042ba:	bf00      	nop
 80042bc:	080055ed 	.word	0x080055ed
 80042c0:	0800565e 	.word	0x0800565e

080042c4 <__hi0bits>:
 80042c4:	0c02      	lsrs	r2, r0, #16
 80042c6:	0412      	lsls	r2, r2, #16
 80042c8:	4603      	mov	r3, r0
 80042ca:	b9ca      	cbnz	r2, 8004300 <__hi0bits+0x3c>
 80042cc:	0403      	lsls	r3, r0, #16
 80042ce:	2010      	movs	r0, #16
 80042d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80042d4:	bf04      	itt	eq
 80042d6:	021b      	lsleq	r3, r3, #8
 80042d8:	3008      	addeq	r0, #8
 80042da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80042de:	bf04      	itt	eq
 80042e0:	011b      	lsleq	r3, r3, #4
 80042e2:	3004      	addeq	r0, #4
 80042e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80042e8:	bf04      	itt	eq
 80042ea:	009b      	lsleq	r3, r3, #2
 80042ec:	3002      	addeq	r0, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db05      	blt.n	80042fe <__hi0bits+0x3a>
 80042f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80042f6:	f100 0001 	add.w	r0, r0, #1
 80042fa:	bf08      	it	eq
 80042fc:	2020      	moveq	r0, #32
 80042fe:	4770      	bx	lr
 8004300:	2000      	movs	r0, #0
 8004302:	e7e5      	b.n	80042d0 <__hi0bits+0xc>

08004304 <__lo0bits>:
 8004304:	6803      	ldr	r3, [r0, #0]
 8004306:	4602      	mov	r2, r0
 8004308:	f013 0007 	ands.w	r0, r3, #7
 800430c:	d00b      	beq.n	8004326 <__lo0bits+0x22>
 800430e:	07d9      	lsls	r1, r3, #31
 8004310:	d421      	bmi.n	8004356 <__lo0bits+0x52>
 8004312:	0798      	lsls	r0, r3, #30
 8004314:	bf49      	itett	mi
 8004316:	085b      	lsrmi	r3, r3, #1
 8004318:	089b      	lsrpl	r3, r3, #2
 800431a:	2001      	movmi	r0, #1
 800431c:	6013      	strmi	r3, [r2, #0]
 800431e:	bf5c      	itt	pl
 8004320:	2002      	movpl	r0, #2
 8004322:	6013      	strpl	r3, [r2, #0]
 8004324:	4770      	bx	lr
 8004326:	b299      	uxth	r1, r3
 8004328:	b909      	cbnz	r1, 800432e <__lo0bits+0x2a>
 800432a:	2010      	movs	r0, #16
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b2d9      	uxtb	r1, r3
 8004330:	b909      	cbnz	r1, 8004336 <__lo0bits+0x32>
 8004332:	3008      	adds	r0, #8
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	0719      	lsls	r1, r3, #28
 8004338:	bf04      	itt	eq
 800433a:	091b      	lsreq	r3, r3, #4
 800433c:	3004      	addeq	r0, #4
 800433e:	0799      	lsls	r1, r3, #30
 8004340:	bf04      	itt	eq
 8004342:	089b      	lsreq	r3, r3, #2
 8004344:	3002      	addeq	r0, #2
 8004346:	07d9      	lsls	r1, r3, #31
 8004348:	d403      	bmi.n	8004352 <__lo0bits+0x4e>
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	f100 0001 	add.w	r0, r0, #1
 8004350:	d003      	beq.n	800435a <__lo0bits+0x56>
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4770      	bx	lr
 8004356:	2000      	movs	r0, #0
 8004358:	4770      	bx	lr
 800435a:	2020      	movs	r0, #32
 800435c:	4770      	bx	lr
	...

08004360 <__i2b>:
 8004360:	b510      	push	{r4, lr}
 8004362:	460c      	mov	r4, r1
 8004364:	2101      	movs	r1, #1
 8004366:	f7ff febb 	bl	80040e0 <_Balloc>
 800436a:	4602      	mov	r2, r0
 800436c:	b928      	cbnz	r0, 800437a <__i2b+0x1a>
 800436e:	f240 1145 	movw	r1, #325	; 0x145
 8004372:	4b04      	ldr	r3, [pc, #16]	; (8004384 <__i2b+0x24>)
 8004374:	4804      	ldr	r0, [pc, #16]	; (8004388 <__i2b+0x28>)
 8004376:	f7ff fa2d 	bl	80037d4 <__assert_func>
 800437a:	2301      	movs	r3, #1
 800437c:	6144      	str	r4, [r0, #20]
 800437e:	6103      	str	r3, [r0, #16]
 8004380:	bd10      	pop	{r4, pc}
 8004382:	bf00      	nop
 8004384:	080055ed 	.word	0x080055ed
 8004388:	0800565e 	.word	0x0800565e

0800438c <__multiply>:
 800438c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004390:	4691      	mov	r9, r2
 8004392:	690a      	ldr	r2, [r1, #16]
 8004394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004398:	460c      	mov	r4, r1
 800439a:	429a      	cmp	r2, r3
 800439c:	bfbe      	ittt	lt
 800439e:	460b      	movlt	r3, r1
 80043a0:	464c      	movlt	r4, r9
 80043a2:	4699      	movlt	r9, r3
 80043a4:	6927      	ldr	r7, [r4, #16]
 80043a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80043aa:	68a3      	ldr	r3, [r4, #8]
 80043ac:	6861      	ldr	r1, [r4, #4]
 80043ae:	eb07 060a 	add.w	r6, r7, sl
 80043b2:	42b3      	cmp	r3, r6
 80043b4:	b085      	sub	sp, #20
 80043b6:	bfb8      	it	lt
 80043b8:	3101      	addlt	r1, #1
 80043ba:	f7ff fe91 	bl	80040e0 <_Balloc>
 80043be:	b930      	cbnz	r0, 80043ce <__multiply+0x42>
 80043c0:	4602      	mov	r2, r0
 80043c2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <__multiply+0x148>)
 80043c8:	4843      	ldr	r0, [pc, #268]	; (80044d8 <__multiply+0x14c>)
 80043ca:	f7ff fa03 	bl	80037d4 <__assert_func>
 80043ce:	f100 0514 	add.w	r5, r0, #20
 80043d2:	462b      	mov	r3, r5
 80043d4:	2200      	movs	r2, #0
 80043d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80043da:	4543      	cmp	r3, r8
 80043dc:	d321      	bcc.n	8004422 <__multiply+0x96>
 80043de:	f104 0314 	add.w	r3, r4, #20
 80043e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80043e6:	f109 0314 	add.w	r3, r9, #20
 80043ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80043ee:	9202      	str	r2, [sp, #8]
 80043f0:	1b3a      	subs	r2, r7, r4
 80043f2:	3a15      	subs	r2, #21
 80043f4:	f022 0203 	bic.w	r2, r2, #3
 80043f8:	3204      	adds	r2, #4
 80043fa:	f104 0115 	add.w	r1, r4, #21
 80043fe:	428f      	cmp	r7, r1
 8004400:	bf38      	it	cc
 8004402:	2204      	movcc	r2, #4
 8004404:	9201      	str	r2, [sp, #4]
 8004406:	9a02      	ldr	r2, [sp, #8]
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	429a      	cmp	r2, r3
 800440c:	d80c      	bhi.n	8004428 <__multiply+0x9c>
 800440e:	2e00      	cmp	r6, #0
 8004410:	dd03      	ble.n	800441a <__multiply+0x8e>
 8004412:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004416:	2b00      	cmp	r3, #0
 8004418:	d05a      	beq.n	80044d0 <__multiply+0x144>
 800441a:	6106      	str	r6, [r0, #16]
 800441c:	b005      	add	sp, #20
 800441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004422:	f843 2b04 	str.w	r2, [r3], #4
 8004426:	e7d8      	b.n	80043da <__multiply+0x4e>
 8004428:	f8b3 a000 	ldrh.w	sl, [r3]
 800442c:	f1ba 0f00 	cmp.w	sl, #0
 8004430:	d023      	beq.n	800447a <__multiply+0xee>
 8004432:	46a9      	mov	r9, r5
 8004434:	f04f 0c00 	mov.w	ip, #0
 8004438:	f104 0e14 	add.w	lr, r4, #20
 800443c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004440:	f8d9 1000 	ldr.w	r1, [r9]
 8004444:	fa1f fb82 	uxth.w	fp, r2
 8004448:	b289      	uxth	r1, r1
 800444a:	fb0a 110b 	mla	r1, sl, fp, r1
 800444e:	4461      	add	r1, ip
 8004450:	f8d9 c000 	ldr.w	ip, [r9]
 8004454:	0c12      	lsrs	r2, r2, #16
 8004456:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800445a:	fb0a c202 	mla	r2, sl, r2, ip
 800445e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004462:	b289      	uxth	r1, r1
 8004464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004468:	4577      	cmp	r7, lr
 800446a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800446e:	f849 1b04 	str.w	r1, [r9], #4
 8004472:	d8e3      	bhi.n	800443c <__multiply+0xb0>
 8004474:	9a01      	ldr	r2, [sp, #4]
 8004476:	f845 c002 	str.w	ip, [r5, r2]
 800447a:	9a03      	ldr	r2, [sp, #12]
 800447c:	3304      	adds	r3, #4
 800447e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004482:	f1b9 0f00 	cmp.w	r9, #0
 8004486:	d021      	beq.n	80044cc <__multiply+0x140>
 8004488:	46ae      	mov	lr, r5
 800448a:	f04f 0a00 	mov.w	sl, #0
 800448e:	6829      	ldr	r1, [r5, #0]
 8004490:	f104 0c14 	add.w	ip, r4, #20
 8004494:	f8bc b000 	ldrh.w	fp, [ip]
 8004498:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800449c:	b289      	uxth	r1, r1
 800449e:	fb09 220b 	mla	r2, r9, fp, r2
 80044a2:	4452      	add	r2, sl
 80044a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80044a8:	f84e 1b04 	str.w	r1, [lr], #4
 80044ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80044b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80044b4:	f8be 1000 	ldrh.w	r1, [lr]
 80044b8:	4567      	cmp	r7, ip
 80044ba:	fb09 110a 	mla	r1, r9, sl, r1
 80044be:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80044c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80044c6:	d8e5      	bhi.n	8004494 <__multiply+0x108>
 80044c8:	9a01      	ldr	r2, [sp, #4]
 80044ca:	50a9      	str	r1, [r5, r2]
 80044cc:	3504      	adds	r5, #4
 80044ce:	e79a      	b.n	8004406 <__multiply+0x7a>
 80044d0:	3e01      	subs	r6, #1
 80044d2:	e79c      	b.n	800440e <__multiply+0x82>
 80044d4:	080055ed 	.word	0x080055ed
 80044d8:	0800565e 	.word	0x0800565e

080044dc <__pow5mult>:
 80044dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e0:	4615      	mov	r5, r2
 80044e2:	f012 0203 	ands.w	r2, r2, #3
 80044e6:	4606      	mov	r6, r0
 80044e8:	460f      	mov	r7, r1
 80044ea:	d007      	beq.n	80044fc <__pow5mult+0x20>
 80044ec:	4c25      	ldr	r4, [pc, #148]	; (8004584 <__pow5mult+0xa8>)
 80044ee:	3a01      	subs	r2, #1
 80044f0:	2300      	movs	r3, #0
 80044f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044f6:	f7ff fe55 	bl	80041a4 <__multadd>
 80044fa:	4607      	mov	r7, r0
 80044fc:	10ad      	asrs	r5, r5, #2
 80044fe:	d03d      	beq.n	800457c <__pow5mult+0xa0>
 8004500:	69f4      	ldr	r4, [r6, #28]
 8004502:	b97c      	cbnz	r4, 8004524 <__pow5mult+0x48>
 8004504:	2010      	movs	r0, #16
 8004506:	f7ff fd25 	bl	8003f54 <malloc>
 800450a:	4602      	mov	r2, r0
 800450c:	61f0      	str	r0, [r6, #28]
 800450e:	b928      	cbnz	r0, 800451c <__pow5mult+0x40>
 8004510:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <__pow5mult+0xac>)
 8004516:	481d      	ldr	r0, [pc, #116]	; (800458c <__pow5mult+0xb0>)
 8004518:	f7ff f95c 	bl	80037d4 <__assert_func>
 800451c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004520:	6004      	str	r4, [r0, #0]
 8004522:	60c4      	str	r4, [r0, #12]
 8004524:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800452c:	b94c      	cbnz	r4, 8004542 <__pow5mult+0x66>
 800452e:	f240 2171 	movw	r1, #625	; 0x271
 8004532:	4630      	mov	r0, r6
 8004534:	f7ff ff14 	bl	8004360 <__i2b>
 8004538:	2300      	movs	r3, #0
 800453a:	4604      	mov	r4, r0
 800453c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004540:	6003      	str	r3, [r0, #0]
 8004542:	f04f 0900 	mov.w	r9, #0
 8004546:	07eb      	lsls	r3, r5, #31
 8004548:	d50a      	bpl.n	8004560 <__pow5mult+0x84>
 800454a:	4639      	mov	r1, r7
 800454c:	4622      	mov	r2, r4
 800454e:	4630      	mov	r0, r6
 8004550:	f7ff ff1c 	bl	800438c <__multiply>
 8004554:	4680      	mov	r8, r0
 8004556:	4639      	mov	r1, r7
 8004558:	4630      	mov	r0, r6
 800455a:	f7ff fe01 	bl	8004160 <_Bfree>
 800455e:	4647      	mov	r7, r8
 8004560:	106d      	asrs	r5, r5, #1
 8004562:	d00b      	beq.n	800457c <__pow5mult+0xa0>
 8004564:	6820      	ldr	r0, [r4, #0]
 8004566:	b938      	cbnz	r0, 8004578 <__pow5mult+0x9c>
 8004568:	4622      	mov	r2, r4
 800456a:	4621      	mov	r1, r4
 800456c:	4630      	mov	r0, r6
 800456e:	f7ff ff0d 	bl	800438c <__multiply>
 8004572:	6020      	str	r0, [r4, #0]
 8004574:	f8c0 9000 	str.w	r9, [r0]
 8004578:	4604      	mov	r4, r0
 800457a:	e7e4      	b.n	8004546 <__pow5mult+0x6a>
 800457c:	4638      	mov	r0, r7
 800457e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004582:	bf00      	nop
 8004584:	080057a8 	.word	0x080057a8
 8004588:	08005538 	.word	0x08005538
 800458c:	0800565e 	.word	0x0800565e

08004590 <__lshift>:
 8004590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004594:	460c      	mov	r4, r1
 8004596:	4607      	mov	r7, r0
 8004598:	4691      	mov	r9, r2
 800459a:	6923      	ldr	r3, [r4, #16]
 800459c:	6849      	ldr	r1, [r1, #4]
 800459e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80045a2:	68a3      	ldr	r3, [r4, #8]
 80045a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045a8:	f108 0601 	add.w	r6, r8, #1
 80045ac:	42b3      	cmp	r3, r6
 80045ae:	db0b      	blt.n	80045c8 <__lshift+0x38>
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff fd95 	bl	80040e0 <_Balloc>
 80045b6:	4605      	mov	r5, r0
 80045b8:	b948      	cbnz	r0, 80045ce <__lshift+0x3e>
 80045ba:	4602      	mov	r2, r0
 80045bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <__lshift+0xd0>)
 80045c2:	4828      	ldr	r0, [pc, #160]	; (8004664 <__lshift+0xd4>)
 80045c4:	f7ff f906 	bl	80037d4 <__assert_func>
 80045c8:	3101      	adds	r1, #1
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	e7ee      	b.n	80045ac <__lshift+0x1c>
 80045ce:	2300      	movs	r3, #0
 80045d0:	f100 0114 	add.w	r1, r0, #20
 80045d4:	f100 0210 	add.w	r2, r0, #16
 80045d8:	4618      	mov	r0, r3
 80045da:	4553      	cmp	r3, sl
 80045dc:	db33      	blt.n	8004646 <__lshift+0xb6>
 80045de:	6920      	ldr	r0, [r4, #16]
 80045e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045e4:	f104 0314 	add.w	r3, r4, #20
 80045e8:	f019 091f 	ands.w	r9, r9, #31
 80045ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80045f4:	d02b      	beq.n	800464e <__lshift+0xbe>
 80045f6:	468a      	mov	sl, r1
 80045f8:	2200      	movs	r2, #0
 80045fa:	f1c9 0e20 	rsb	lr, r9, #32
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	fa00 f009 	lsl.w	r0, r0, r9
 8004604:	4310      	orrs	r0, r2
 8004606:	f84a 0b04 	str.w	r0, [sl], #4
 800460a:	f853 2b04 	ldr.w	r2, [r3], #4
 800460e:	459c      	cmp	ip, r3
 8004610:	fa22 f20e 	lsr.w	r2, r2, lr
 8004614:	d8f3      	bhi.n	80045fe <__lshift+0x6e>
 8004616:	ebac 0304 	sub.w	r3, ip, r4
 800461a:	3b15      	subs	r3, #21
 800461c:	f023 0303 	bic.w	r3, r3, #3
 8004620:	3304      	adds	r3, #4
 8004622:	f104 0015 	add.w	r0, r4, #21
 8004626:	4584      	cmp	ip, r0
 8004628:	bf38      	it	cc
 800462a:	2304      	movcc	r3, #4
 800462c:	50ca      	str	r2, [r1, r3]
 800462e:	b10a      	cbz	r2, 8004634 <__lshift+0xa4>
 8004630:	f108 0602 	add.w	r6, r8, #2
 8004634:	3e01      	subs	r6, #1
 8004636:	4638      	mov	r0, r7
 8004638:	4621      	mov	r1, r4
 800463a:	612e      	str	r6, [r5, #16]
 800463c:	f7ff fd90 	bl	8004160 <_Bfree>
 8004640:	4628      	mov	r0, r5
 8004642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004646:	f842 0f04 	str.w	r0, [r2, #4]!
 800464a:	3301      	adds	r3, #1
 800464c:	e7c5      	b.n	80045da <__lshift+0x4a>
 800464e:	3904      	subs	r1, #4
 8004650:	f853 2b04 	ldr.w	r2, [r3], #4
 8004654:	459c      	cmp	ip, r3
 8004656:	f841 2f04 	str.w	r2, [r1, #4]!
 800465a:	d8f9      	bhi.n	8004650 <__lshift+0xc0>
 800465c:	e7ea      	b.n	8004634 <__lshift+0xa4>
 800465e:	bf00      	nop
 8004660:	080055ed 	.word	0x080055ed
 8004664:	0800565e 	.word	0x0800565e

08004668 <__mcmp>:
 8004668:	4603      	mov	r3, r0
 800466a:	690a      	ldr	r2, [r1, #16]
 800466c:	6900      	ldr	r0, [r0, #16]
 800466e:	b530      	push	{r4, r5, lr}
 8004670:	1a80      	subs	r0, r0, r2
 8004672:	d10d      	bne.n	8004690 <__mcmp+0x28>
 8004674:	3314      	adds	r3, #20
 8004676:	3114      	adds	r1, #20
 8004678:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800467c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004680:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004684:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004688:	4295      	cmp	r5, r2
 800468a:	d002      	beq.n	8004692 <__mcmp+0x2a>
 800468c:	d304      	bcc.n	8004698 <__mcmp+0x30>
 800468e:	2001      	movs	r0, #1
 8004690:	bd30      	pop	{r4, r5, pc}
 8004692:	42a3      	cmp	r3, r4
 8004694:	d3f4      	bcc.n	8004680 <__mcmp+0x18>
 8004696:	e7fb      	b.n	8004690 <__mcmp+0x28>
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	e7f8      	b.n	8004690 <__mcmp+0x28>
	...

080046a0 <__mdiff>:
 80046a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	460d      	mov	r5, r1
 80046a6:	4607      	mov	r7, r0
 80046a8:	4611      	mov	r1, r2
 80046aa:	4628      	mov	r0, r5
 80046ac:	4614      	mov	r4, r2
 80046ae:	f7ff ffdb 	bl	8004668 <__mcmp>
 80046b2:	1e06      	subs	r6, r0, #0
 80046b4:	d111      	bne.n	80046da <__mdiff+0x3a>
 80046b6:	4631      	mov	r1, r6
 80046b8:	4638      	mov	r0, r7
 80046ba:	f7ff fd11 	bl	80040e0 <_Balloc>
 80046be:	4602      	mov	r2, r0
 80046c0:	b928      	cbnz	r0, 80046ce <__mdiff+0x2e>
 80046c2:	f240 2137 	movw	r1, #567	; 0x237
 80046c6:	4b3a      	ldr	r3, [pc, #232]	; (80047b0 <__mdiff+0x110>)
 80046c8:	483a      	ldr	r0, [pc, #232]	; (80047b4 <__mdiff+0x114>)
 80046ca:	f7ff f883 	bl	80037d4 <__assert_func>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80046d4:	4610      	mov	r0, r2
 80046d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046da:	bfa4      	itt	ge
 80046dc:	4623      	movge	r3, r4
 80046de:	462c      	movge	r4, r5
 80046e0:	4638      	mov	r0, r7
 80046e2:	6861      	ldr	r1, [r4, #4]
 80046e4:	bfa6      	itte	ge
 80046e6:	461d      	movge	r5, r3
 80046e8:	2600      	movge	r6, #0
 80046ea:	2601      	movlt	r6, #1
 80046ec:	f7ff fcf8 	bl	80040e0 <_Balloc>
 80046f0:	4602      	mov	r2, r0
 80046f2:	b918      	cbnz	r0, 80046fc <__mdiff+0x5c>
 80046f4:	f240 2145 	movw	r1, #581	; 0x245
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <__mdiff+0x110>)
 80046fa:	e7e5      	b.n	80046c8 <__mdiff+0x28>
 80046fc:	f102 0814 	add.w	r8, r2, #20
 8004700:	46c2      	mov	sl, r8
 8004702:	f04f 0c00 	mov.w	ip, #0
 8004706:	6927      	ldr	r7, [r4, #16]
 8004708:	60c6      	str	r6, [r0, #12]
 800470a:	692e      	ldr	r6, [r5, #16]
 800470c:	f104 0014 	add.w	r0, r4, #20
 8004710:	f105 0914 	add.w	r9, r5, #20
 8004714:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004718:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800471c:	3410      	adds	r4, #16
 800471e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004722:	f859 3b04 	ldr.w	r3, [r9], #4
 8004726:	fa1f f18b 	uxth.w	r1, fp
 800472a:	4461      	add	r1, ip
 800472c:	fa1f fc83 	uxth.w	ip, r3
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	eba1 010c 	sub.w	r1, r1, ip
 8004736:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800473a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800473e:	b289      	uxth	r1, r1
 8004740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004744:	454e      	cmp	r6, r9
 8004746:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800474a:	f84a 1b04 	str.w	r1, [sl], #4
 800474e:	d8e6      	bhi.n	800471e <__mdiff+0x7e>
 8004750:	1b73      	subs	r3, r6, r5
 8004752:	3b15      	subs	r3, #21
 8004754:	f023 0303 	bic.w	r3, r3, #3
 8004758:	3515      	adds	r5, #21
 800475a:	3304      	adds	r3, #4
 800475c:	42ae      	cmp	r6, r5
 800475e:	bf38      	it	cc
 8004760:	2304      	movcc	r3, #4
 8004762:	4418      	add	r0, r3
 8004764:	4443      	add	r3, r8
 8004766:	461e      	mov	r6, r3
 8004768:	4605      	mov	r5, r0
 800476a:	4575      	cmp	r5, lr
 800476c:	d30e      	bcc.n	800478c <__mdiff+0xec>
 800476e:	f10e 0103 	add.w	r1, lr, #3
 8004772:	1a09      	subs	r1, r1, r0
 8004774:	f021 0103 	bic.w	r1, r1, #3
 8004778:	3803      	subs	r0, #3
 800477a:	4586      	cmp	lr, r0
 800477c:	bf38      	it	cc
 800477e:	2100      	movcc	r1, #0
 8004780:	440b      	add	r3, r1
 8004782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004786:	b189      	cbz	r1, 80047ac <__mdiff+0x10c>
 8004788:	6117      	str	r7, [r2, #16]
 800478a:	e7a3      	b.n	80046d4 <__mdiff+0x34>
 800478c:	f855 8b04 	ldr.w	r8, [r5], #4
 8004790:	fa1f f188 	uxth.w	r1, r8
 8004794:	4461      	add	r1, ip
 8004796:	140c      	asrs	r4, r1, #16
 8004798:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800479c:	b289      	uxth	r1, r1
 800479e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80047a2:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80047a6:	f846 1b04 	str.w	r1, [r6], #4
 80047aa:	e7de      	b.n	800476a <__mdiff+0xca>
 80047ac:	3f01      	subs	r7, #1
 80047ae:	e7e8      	b.n	8004782 <__mdiff+0xe2>
 80047b0:	080055ed 	.word	0x080055ed
 80047b4:	0800565e 	.word	0x0800565e

080047b8 <__ulp>:
 80047b8:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <__ulp+0x3c>)
 80047ba:	400b      	ands	r3, r1
 80047bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dc08      	bgt.n	80047d6 <__ulp+0x1e>
 80047c4:	425b      	negs	r3, r3
 80047c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80047ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80047ce:	da04      	bge.n	80047da <__ulp+0x22>
 80047d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047d4:	4113      	asrs	r3, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	e008      	b.n	80047ec <__ulp+0x34>
 80047da:	f1a2 0314 	sub.w	r3, r2, #20
 80047de:	2b1e      	cmp	r3, #30
 80047e0:	bfd6      	itet	le
 80047e2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80047e6:	2201      	movgt	r2, #1
 80047e8:	40da      	lsrle	r2, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	7ff00000 	.word	0x7ff00000

080047f8 <__b2d>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	6905      	ldr	r5, [r0, #16]
 80047fc:	f100 0714 	add.w	r7, r0, #20
 8004800:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8004804:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8004808:	1f2e      	subs	r6, r5, #4
 800480a:	4620      	mov	r0, r4
 800480c:	f7ff fd5a 	bl	80042c4 <__hi0bits>
 8004810:	f1c0 0220 	rsb	r2, r0, #32
 8004814:	280a      	cmp	r0, #10
 8004816:	4603      	mov	r3, r0
 8004818:	f8df c068 	ldr.w	ip, [pc, #104]	; 8004884 <__b2d+0x8c>
 800481c:	600a      	str	r2, [r1, #0]
 800481e:	dc12      	bgt.n	8004846 <__b2d+0x4e>
 8004820:	f1c0 0e0b 	rsb	lr, r0, #11
 8004824:	fa24 f20e 	lsr.w	r2, r4, lr
 8004828:	42b7      	cmp	r7, r6
 800482a:	ea42 010c 	orr.w	r1, r2, ip
 800482e:	bf2c      	ite	cs
 8004830:	2200      	movcs	r2, #0
 8004832:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004836:	3315      	adds	r3, #21
 8004838:	fa04 f303 	lsl.w	r3, r4, r3
 800483c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004840:	431a      	orrs	r2, r3
 8004842:	4610      	mov	r0, r2
 8004844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004846:	42b7      	cmp	r7, r6
 8004848:	bf2e      	itee	cs
 800484a:	2200      	movcs	r2, #0
 800484c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8004850:	f1a5 0608 	subcc.w	r6, r5, #8
 8004854:	3b0b      	subs	r3, #11
 8004856:	d012      	beq.n	800487e <__b2d+0x86>
 8004858:	f1c3 0520 	rsb	r5, r3, #32
 800485c:	fa22 f105 	lsr.w	r1, r2, r5
 8004860:	409c      	lsls	r4, r3
 8004862:	430c      	orrs	r4, r1
 8004864:	42be      	cmp	r6, r7
 8004866:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800486a:	bf94      	ite	ls
 800486c:	2400      	movls	r4, #0
 800486e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8004872:	409a      	lsls	r2, r3
 8004874:	40ec      	lsrs	r4, r5
 8004876:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800487a:	4322      	orrs	r2, r4
 800487c:	e7e1      	b.n	8004842 <__b2d+0x4a>
 800487e:	ea44 010c 	orr.w	r1, r4, ip
 8004882:	e7de      	b.n	8004842 <__b2d+0x4a>
 8004884:	3ff00000 	.word	0x3ff00000

08004888 <__d2b>:
 8004888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800488a:	2101      	movs	r1, #1
 800488c:	4617      	mov	r7, r2
 800488e:	461c      	mov	r4, r3
 8004890:	9e08      	ldr	r6, [sp, #32]
 8004892:	f7ff fc25 	bl	80040e0 <_Balloc>
 8004896:	4605      	mov	r5, r0
 8004898:	b930      	cbnz	r0, 80048a8 <__d2b+0x20>
 800489a:	4602      	mov	r2, r0
 800489c:	f240 310f 	movw	r1, #783	; 0x30f
 80048a0:	4b22      	ldr	r3, [pc, #136]	; (800492c <__d2b+0xa4>)
 80048a2:	4823      	ldr	r0, [pc, #140]	; (8004930 <__d2b+0xa8>)
 80048a4:	f7fe ff96 	bl	80037d4 <__assert_func>
 80048a8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80048ac:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80048b0:	bb24      	cbnz	r4, 80048fc <__d2b+0x74>
 80048b2:	2f00      	cmp	r7, #0
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	d026      	beq.n	8004906 <__d2b+0x7e>
 80048b8:	4668      	mov	r0, sp
 80048ba:	9700      	str	r7, [sp, #0]
 80048bc:	f7ff fd22 	bl	8004304 <__lo0bits>
 80048c0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80048c4:	b1e8      	cbz	r0, 8004902 <__d2b+0x7a>
 80048c6:	f1c0 0320 	rsb	r3, r0, #32
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	430b      	orrs	r3, r1
 80048d0:	40c2      	lsrs	r2, r0
 80048d2:	616b      	str	r3, [r5, #20]
 80048d4:	9201      	str	r2, [sp, #4]
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2102      	movne	r1, #2
 80048de:	2101      	moveq	r1, #1
 80048e0:	61ab      	str	r3, [r5, #24]
 80048e2:	6129      	str	r1, [r5, #16]
 80048e4:	b1bc      	cbz	r4, 8004916 <__d2b+0x8e>
 80048e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80048ea:	4404      	add	r4, r0
 80048ec:	6034      	str	r4, [r6, #0]
 80048ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f4:	6018      	str	r0, [r3, #0]
 80048f6:	4628      	mov	r0, r5
 80048f8:	b003      	add	sp, #12
 80048fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004900:	e7d7      	b.n	80048b2 <__d2b+0x2a>
 8004902:	6169      	str	r1, [r5, #20]
 8004904:	e7e7      	b.n	80048d6 <__d2b+0x4e>
 8004906:	a801      	add	r0, sp, #4
 8004908:	f7ff fcfc 	bl	8004304 <__lo0bits>
 800490c:	9b01      	ldr	r3, [sp, #4]
 800490e:	2101      	movs	r1, #1
 8004910:	616b      	str	r3, [r5, #20]
 8004912:	3020      	adds	r0, #32
 8004914:	e7e5      	b.n	80048e2 <__d2b+0x5a>
 8004916:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800491a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800491e:	6030      	str	r0, [r6, #0]
 8004920:	6918      	ldr	r0, [r3, #16]
 8004922:	f7ff fccf 	bl	80042c4 <__hi0bits>
 8004926:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800492a:	e7e2      	b.n	80048f2 <__d2b+0x6a>
 800492c:	080055ed 	.word	0x080055ed
 8004930:	0800565e 	.word	0x0800565e

08004934 <__ratio>:
 8004934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004938:	4688      	mov	r8, r1
 800493a:	4669      	mov	r1, sp
 800493c:	4681      	mov	r9, r0
 800493e:	f7ff ff5b 	bl	80047f8 <__b2d>
 8004942:	460f      	mov	r7, r1
 8004944:	4604      	mov	r4, r0
 8004946:	460d      	mov	r5, r1
 8004948:	4640      	mov	r0, r8
 800494a:	a901      	add	r1, sp, #4
 800494c:	f7ff ff54 	bl	80047f8 <__b2d>
 8004950:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004954:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004958:	468b      	mov	fp, r1
 800495a:	eba3 0c02 	sub.w	ip, r3, r2
 800495e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfd5      	itete	le
 800496c:	460a      	movle	r2, r1
 800496e:	462a      	movgt	r2, r5
 8004970:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004974:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004978:	bfd8      	it	le
 800497a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800497e:	465b      	mov	r3, fp
 8004980:	4602      	mov	r2, r0
 8004982:	4639      	mov	r1, r7
 8004984:	4620      	mov	r0, r4
 8004986:	f7fb fec9 	bl	800071c <__aeabi_ddiv>
 800498a:	b003      	add	sp, #12
 800498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004990 <__copybits>:
 8004990:	3901      	subs	r1, #1
 8004992:	b570      	push	{r4, r5, r6, lr}
 8004994:	1149      	asrs	r1, r1, #5
 8004996:	6914      	ldr	r4, [r2, #16]
 8004998:	3101      	adds	r1, #1
 800499a:	f102 0314 	add.w	r3, r2, #20
 800499e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80049a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049a6:	1f05      	subs	r5, r0, #4
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d30c      	bcc.n	80049c6 <__copybits+0x36>
 80049ac:	1aa3      	subs	r3, r4, r2
 80049ae:	3b11      	subs	r3, #17
 80049b0:	f023 0303 	bic.w	r3, r3, #3
 80049b4:	3211      	adds	r2, #17
 80049b6:	42a2      	cmp	r2, r4
 80049b8:	bf88      	it	hi
 80049ba:	2300      	movhi	r3, #0
 80049bc:	4418      	add	r0, r3
 80049be:	2300      	movs	r3, #0
 80049c0:	4288      	cmp	r0, r1
 80049c2:	d305      	bcc.n	80049d0 <__copybits+0x40>
 80049c4:	bd70      	pop	{r4, r5, r6, pc}
 80049c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80049ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80049ce:	e7eb      	b.n	80049a8 <__copybits+0x18>
 80049d0:	f840 3b04 	str.w	r3, [r0], #4
 80049d4:	e7f4      	b.n	80049c0 <__copybits+0x30>

080049d6 <__any_on>:
 80049d6:	f100 0214 	add.w	r2, r0, #20
 80049da:	6900      	ldr	r0, [r0, #16]
 80049dc:	114b      	asrs	r3, r1, #5
 80049de:	4298      	cmp	r0, r3
 80049e0:	b510      	push	{r4, lr}
 80049e2:	db11      	blt.n	8004a08 <__any_on+0x32>
 80049e4:	dd0a      	ble.n	80049fc <__any_on+0x26>
 80049e6:	f011 011f 	ands.w	r1, r1, #31
 80049ea:	d007      	beq.n	80049fc <__any_on+0x26>
 80049ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80049f0:	fa24 f001 	lsr.w	r0, r4, r1
 80049f4:	fa00 f101 	lsl.w	r1, r0, r1
 80049f8:	428c      	cmp	r4, r1
 80049fa:	d10b      	bne.n	8004a14 <__any_on+0x3e>
 80049fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d803      	bhi.n	8004a0c <__any_on+0x36>
 8004a04:	2000      	movs	r0, #0
 8004a06:	bd10      	pop	{r4, pc}
 8004a08:	4603      	mov	r3, r0
 8004a0a:	e7f7      	b.n	80049fc <__any_on+0x26>
 8004a0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d0f5      	beq.n	8004a00 <__any_on+0x2a>
 8004a14:	2001      	movs	r0, #1
 8004a16:	e7f6      	b.n	8004a06 <__any_on+0x30>

08004a18 <__ascii_wctomb>:
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4608      	mov	r0, r1
 8004a1c:	b141      	cbz	r1, 8004a30 <__ascii_wctomb+0x18>
 8004a1e:	2aff      	cmp	r2, #255	; 0xff
 8004a20:	d904      	bls.n	8004a2c <__ascii_wctomb+0x14>
 8004a22:	228a      	movs	r2, #138	; 0x8a
 8004a24:	f04f 30ff 	mov.w	r0, #4294967295
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	4770      	bx	lr
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	700a      	strb	r2, [r1, #0]
 8004a30:	4770      	bx	lr
	...

08004a34 <__sflush_r>:
 8004a34:	898a      	ldrh	r2, [r1, #12]
 8004a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a38:	4605      	mov	r5, r0
 8004a3a:	0710      	lsls	r0, r2, #28
 8004a3c:	460c      	mov	r4, r1
 8004a3e:	d457      	bmi.n	8004af0 <__sflush_r+0xbc>
 8004a40:	684b      	ldr	r3, [r1, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dc04      	bgt.n	8004a50 <__sflush_r+0x1c>
 8004a46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	dc01      	bgt.n	8004a50 <__sflush_r+0x1c>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a52:	2e00      	cmp	r6, #0
 8004a54:	d0fa      	beq.n	8004a4c <__sflush_r+0x18>
 8004a56:	2300      	movs	r3, #0
 8004a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a5c:	682f      	ldr	r7, [r5, #0]
 8004a5e:	6a21      	ldr	r1, [r4, #32]
 8004a60:	602b      	str	r3, [r5, #0]
 8004a62:	d032      	beq.n	8004aca <__sflush_r+0x96>
 8004a64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	075a      	lsls	r2, r3, #29
 8004a6a:	d505      	bpl.n	8004a78 <__sflush_r+0x44>
 8004a6c:	6863      	ldr	r3, [r4, #4]
 8004a6e:	1ac0      	subs	r0, r0, r3
 8004a70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a72:	b10b      	cbz	r3, 8004a78 <__sflush_r+0x44>
 8004a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a76:	1ac0      	subs	r0, r0, r3
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a7e:	4628      	mov	r0, r5
 8004a80:	6a21      	ldr	r1, [r4, #32]
 8004a82:	47b0      	blx	r6
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	d106      	bne.n	8004a98 <__sflush_r+0x64>
 8004a8a:	6829      	ldr	r1, [r5, #0]
 8004a8c:	291d      	cmp	r1, #29
 8004a8e:	d82b      	bhi.n	8004ae8 <__sflush_r+0xb4>
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <__sflush_r+0x100>)
 8004a92:	410a      	asrs	r2, r1
 8004a94:	07d6      	lsls	r6, r2, #31
 8004a96:	d427      	bmi.n	8004ae8 <__sflush_r+0xb4>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	6062      	str	r2, [r4, #4]
 8004a9c:	6922      	ldr	r2, [r4, #16]
 8004a9e:	04d9      	lsls	r1, r3, #19
 8004aa0:	6022      	str	r2, [r4, #0]
 8004aa2:	d504      	bpl.n	8004aae <__sflush_r+0x7a>
 8004aa4:	1c42      	adds	r2, r0, #1
 8004aa6:	d101      	bne.n	8004aac <__sflush_r+0x78>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b903      	cbnz	r3, 8004aae <__sflush_r+0x7a>
 8004aac:	6560      	str	r0, [r4, #84]	; 0x54
 8004aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ab0:	602f      	str	r7, [r5, #0]
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d0ca      	beq.n	8004a4c <__sflush_r+0x18>
 8004ab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aba:	4299      	cmp	r1, r3
 8004abc:	d002      	beq.n	8004ac4 <__sflush_r+0x90>
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f7fe fea6 	bl	8003810 <_free_r>
 8004ac4:	2000      	movs	r0, #0
 8004ac6:	6360      	str	r0, [r4, #52]	; 0x34
 8004ac8:	e7c1      	b.n	8004a4e <__sflush_r+0x1a>
 8004aca:	2301      	movs	r3, #1
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b0      	blx	r6
 8004ad0:	1c41      	adds	r1, r0, #1
 8004ad2:	d1c8      	bne.n	8004a66 <__sflush_r+0x32>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0c5      	beq.n	8004a66 <__sflush_r+0x32>
 8004ada:	2b1d      	cmp	r3, #29
 8004adc:	d001      	beq.n	8004ae2 <__sflush_r+0xae>
 8004ade:	2b16      	cmp	r3, #22
 8004ae0:	d101      	bne.n	8004ae6 <__sflush_r+0xb2>
 8004ae2:	602f      	str	r7, [r5, #0]
 8004ae4:	e7b2      	b.n	8004a4c <__sflush_r+0x18>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aec:	81a3      	strh	r3, [r4, #12]
 8004aee:	e7ae      	b.n	8004a4e <__sflush_r+0x1a>
 8004af0:	690f      	ldr	r7, [r1, #16]
 8004af2:	2f00      	cmp	r7, #0
 8004af4:	d0aa      	beq.n	8004a4c <__sflush_r+0x18>
 8004af6:	0793      	lsls	r3, r2, #30
 8004af8:	bf18      	it	ne
 8004afa:	2300      	movne	r3, #0
 8004afc:	680e      	ldr	r6, [r1, #0]
 8004afe:	bf08      	it	eq
 8004b00:	694b      	ldreq	r3, [r1, #20]
 8004b02:	1bf6      	subs	r6, r6, r7
 8004b04:	600f      	str	r7, [r1, #0]
 8004b06:	608b      	str	r3, [r1, #8]
 8004b08:	2e00      	cmp	r6, #0
 8004b0a:	dd9f      	ble.n	8004a4c <__sflush_r+0x18>
 8004b0c:	4633      	mov	r3, r6
 8004b0e:	463a      	mov	r2, r7
 8004b10:	4628      	mov	r0, r5
 8004b12:	6a21      	ldr	r1, [r4, #32]
 8004b14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004b18:	47e0      	blx	ip
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	dc06      	bgt.n	8004b2c <__sflush_r+0xf8>
 8004b1e:	89a3      	ldrh	r3, [r4, #12]
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b28:	81a3      	strh	r3, [r4, #12]
 8004b2a:	e790      	b.n	8004a4e <__sflush_r+0x1a>
 8004b2c:	4407      	add	r7, r0
 8004b2e:	1a36      	subs	r6, r6, r0
 8004b30:	e7ea      	b.n	8004b08 <__sflush_r+0xd4>
 8004b32:	bf00      	nop
 8004b34:	dfbffffe 	.word	0xdfbffffe

08004b38 <_fflush_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	690b      	ldr	r3, [r1, #16]
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	b913      	cbnz	r3, 8004b48 <_fflush_r+0x10>
 8004b42:	2500      	movs	r5, #0
 8004b44:	4628      	mov	r0, r5
 8004b46:	bd38      	pop	{r3, r4, r5, pc}
 8004b48:	b118      	cbz	r0, 8004b52 <_fflush_r+0x1a>
 8004b4a:	6a03      	ldr	r3, [r0, #32]
 8004b4c:	b90b      	cbnz	r3, 8004b52 <_fflush_r+0x1a>
 8004b4e:	f7fe fcb7 	bl	80034c0 <__sinit>
 8004b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f3      	beq.n	8004b42 <_fflush_r+0xa>
 8004b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b5c:	07d0      	lsls	r0, r2, #31
 8004b5e:	d404      	bmi.n	8004b6a <_fflush_r+0x32>
 8004b60:	0599      	lsls	r1, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <_fflush_r+0x32>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f7fe fe1e 	bl	80037a6 <__retarget_lock_acquire_recursive>
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	f7ff ff61 	bl	8004a34 <__sflush_r>
 8004b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b74:	4605      	mov	r5, r0
 8004b76:	07da      	lsls	r2, r3, #31
 8004b78:	d4e4      	bmi.n	8004b44 <_fflush_r+0xc>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	059b      	lsls	r3, r3, #22
 8004b7e:	d4e1      	bmi.n	8004b44 <_fflush_r+0xc>
 8004b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b82:	f7fe fe11 	bl	80037a8 <__retarget_lock_release_recursive>
 8004b86:	e7dd      	b.n	8004b44 <_fflush_r+0xc>

08004b88 <fiprintf>:
 8004b88:	b40e      	push	{r1, r2, r3}
 8004b8a:	b503      	push	{r0, r1, lr}
 8004b8c:	4601      	mov	r1, r0
 8004b8e:	ab03      	add	r3, sp, #12
 8004b90:	4805      	ldr	r0, [pc, #20]	; (8004ba8 <fiprintf+0x20>)
 8004b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b96:	6800      	ldr	r0, [r0, #0]
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	f000 f859 	bl	8004c50 <_vfiprintf_r>
 8004b9e:	b002      	add	sp, #8
 8004ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ba4:	b003      	add	sp, #12
 8004ba6:	4770      	bx	lr
 8004ba8:	200001ec 	.word	0x200001ec

08004bac <_sbrk_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4d05      	ldr	r5, [pc, #20]	; (8004bc8 <_sbrk_r+0x1c>)
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	f7fc fdea 	bl	8001790 <_sbrk>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_sbrk_r+0x1a>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_sbrk_r+0x1a>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200003c4 	.word	0x200003c4

08004bcc <abort>:
 8004bcc:	2006      	movs	r0, #6
 8004bce:	b508      	push	{r3, lr}
 8004bd0:	f000 fbaa 	bl	8005328 <raise>
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f7fc fd67 	bl	80016a8 <_exit>

08004bda <_calloc_r>:
 8004bda:	b570      	push	{r4, r5, r6, lr}
 8004bdc:	fba1 5402 	umull	r5, r4, r1, r2
 8004be0:	b934      	cbnz	r4, 8004bf0 <_calloc_r+0x16>
 8004be2:	4629      	mov	r1, r5
 8004be4:	f7ff f9de 	bl	8003fa4 <_malloc_r>
 8004be8:	4606      	mov	r6, r0
 8004bea:	b928      	cbnz	r0, 8004bf8 <_calloc_r+0x1e>
 8004bec:	4630      	mov	r0, r6
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	220c      	movs	r2, #12
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	6002      	str	r2, [r0, #0]
 8004bf6:	e7f9      	b.n	8004bec <_calloc_r+0x12>
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	f7fe fcd9 	bl	80035b2 <memset>
 8004c00:	e7f4      	b.n	8004bec <_calloc_r+0x12>

08004c02 <__sfputc_r>:
 8004c02:	6893      	ldr	r3, [r2, #8]
 8004c04:	b410      	push	{r4}
 8004c06:	3b01      	subs	r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	6093      	str	r3, [r2, #8]
 8004c0c:	da07      	bge.n	8004c1e <__sfputc_r+0x1c>
 8004c0e:	6994      	ldr	r4, [r2, #24]
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	db01      	blt.n	8004c18 <__sfputc_r+0x16>
 8004c14:	290a      	cmp	r1, #10
 8004c16:	d102      	bne.n	8004c1e <__sfputc_r+0x1c>
 8004c18:	bc10      	pop	{r4}
 8004c1a:	f000 bac7 	b.w	80051ac <__swbuf_r>
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	1c58      	adds	r0, r3, #1
 8004c22:	6010      	str	r0, [r2, #0]
 8004c24:	7019      	strb	r1, [r3, #0]
 8004c26:	4608      	mov	r0, r1
 8004c28:	bc10      	pop	{r4}
 8004c2a:	4770      	bx	lr

08004c2c <__sfputs_r>:
 8004c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c2e:	4606      	mov	r6, r0
 8004c30:	460f      	mov	r7, r1
 8004c32:	4614      	mov	r4, r2
 8004c34:	18d5      	adds	r5, r2, r3
 8004c36:	42ac      	cmp	r4, r5
 8004c38:	d101      	bne.n	8004c3e <__sfputs_r+0x12>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e007      	b.n	8004c4e <__sfputs_r+0x22>
 8004c3e:	463a      	mov	r2, r7
 8004c40:	4630      	mov	r0, r6
 8004c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c46:	f7ff ffdc 	bl	8004c02 <__sfputc_r>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	d1f3      	bne.n	8004c36 <__sfputs_r+0xa>
 8004c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c50 <_vfiprintf_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	460d      	mov	r5, r1
 8004c56:	4614      	mov	r4, r2
 8004c58:	4698      	mov	r8, r3
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	b09d      	sub	sp, #116	; 0x74
 8004c5e:	b118      	cbz	r0, 8004c68 <_vfiprintf_r+0x18>
 8004c60:	6a03      	ldr	r3, [r0, #32]
 8004c62:	b90b      	cbnz	r3, 8004c68 <_vfiprintf_r+0x18>
 8004c64:	f7fe fc2c 	bl	80034c0 <__sinit>
 8004c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c6a:	07d9      	lsls	r1, r3, #31
 8004c6c:	d405      	bmi.n	8004c7a <_vfiprintf_r+0x2a>
 8004c6e:	89ab      	ldrh	r3, [r5, #12]
 8004c70:	059a      	lsls	r2, r3, #22
 8004c72:	d402      	bmi.n	8004c7a <_vfiprintf_r+0x2a>
 8004c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c76:	f7fe fd96 	bl	80037a6 <__retarget_lock_acquire_recursive>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	071b      	lsls	r3, r3, #28
 8004c7e:	d501      	bpl.n	8004c84 <_vfiprintf_r+0x34>
 8004c80:	692b      	ldr	r3, [r5, #16]
 8004c82:	b99b      	cbnz	r3, 8004cac <_vfiprintf_r+0x5c>
 8004c84:	4629      	mov	r1, r5
 8004c86:	4630      	mov	r0, r6
 8004c88:	f000 face 	bl	8005228 <__swsetup_r>
 8004c8c:	b170      	cbz	r0, 8004cac <_vfiprintf_r+0x5c>
 8004c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c90:	07dc      	lsls	r4, r3, #31
 8004c92:	d504      	bpl.n	8004c9e <_vfiprintf_r+0x4e>
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	b01d      	add	sp, #116	; 0x74
 8004c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9e:	89ab      	ldrh	r3, [r5, #12]
 8004ca0:	0598      	lsls	r0, r3, #22
 8004ca2:	d4f7      	bmi.n	8004c94 <_vfiprintf_r+0x44>
 8004ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ca6:	f7fe fd7f 	bl	80037a8 <__retarget_lock_release_recursive>
 8004caa:	e7f3      	b.n	8004c94 <_vfiprintf_r+0x44>
 8004cac:	2300      	movs	r3, #0
 8004cae:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb6:	2330      	movs	r3, #48	; 0x30
 8004cb8:	f04f 0901 	mov.w	r9, #1
 8004cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004e70 <_vfiprintf_r+0x220>
 8004cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc8:	4623      	mov	r3, r4
 8004cca:	469a      	mov	sl, r3
 8004ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd0:	b10a      	cbz	r2, 8004cd6 <_vfiprintf_r+0x86>
 8004cd2:	2a25      	cmp	r2, #37	; 0x25
 8004cd4:	d1f9      	bne.n	8004cca <_vfiprintf_r+0x7a>
 8004cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8004cda:	d00b      	beq.n	8004cf4 <_vfiprintf_r+0xa4>
 8004cdc:	465b      	mov	r3, fp
 8004cde:	4622      	mov	r2, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7ff ffa2 	bl	8004c2c <__sfputs_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f000 80a9 	beq.w	8004e40 <_vfiprintf_r+0x1f0>
 8004cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cf0:	445a      	add	r2, fp
 8004cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80a1 	beq.w	8004e40 <_vfiprintf_r+0x1f0>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295
 8004d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d08:	f10a 0a01 	add.w	sl, sl, #1
 8004d0c:	9304      	str	r3, [sp, #16]
 8004d0e:	9307      	str	r3, [sp, #28]
 8004d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d14:	931a      	str	r3, [sp, #104]	; 0x68
 8004d16:	4654      	mov	r4, sl
 8004d18:	2205      	movs	r2, #5
 8004d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1e:	4854      	ldr	r0, [pc, #336]	; (8004e70 <_vfiprintf_r+0x220>)
 8004d20:	f000 fb1e 	bl	8005360 <memchr>
 8004d24:	9a04      	ldr	r2, [sp, #16]
 8004d26:	b9d8      	cbnz	r0, 8004d60 <_vfiprintf_r+0x110>
 8004d28:	06d1      	lsls	r1, r2, #27
 8004d2a:	bf44      	itt	mi
 8004d2c:	2320      	movmi	r3, #32
 8004d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d32:	0713      	lsls	r3, r2, #28
 8004d34:	bf44      	itt	mi
 8004d36:	232b      	movmi	r3, #43	; 0x2b
 8004d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d40:	2b2a      	cmp	r3, #42	; 0x2a
 8004d42:	d015      	beq.n	8004d70 <_vfiprintf_r+0x120>
 8004d44:	4654      	mov	r4, sl
 8004d46:	2000      	movs	r0, #0
 8004d48:	f04f 0c0a 	mov.w	ip, #10
 8004d4c:	9a07      	ldr	r2, [sp, #28]
 8004d4e:	4621      	mov	r1, r4
 8004d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d54:	3b30      	subs	r3, #48	; 0x30
 8004d56:	2b09      	cmp	r3, #9
 8004d58:	d94d      	bls.n	8004df6 <_vfiprintf_r+0x1a6>
 8004d5a:	b1b0      	cbz	r0, 8004d8a <_vfiprintf_r+0x13a>
 8004d5c:	9207      	str	r2, [sp, #28]
 8004d5e:	e014      	b.n	8004d8a <_vfiprintf_r+0x13a>
 8004d60:	eba0 0308 	sub.w	r3, r0, r8
 8004d64:	fa09 f303 	lsl.w	r3, r9, r3
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	46a2      	mov	sl, r4
 8004d6c:	9304      	str	r3, [sp, #16]
 8004d6e:	e7d2      	b.n	8004d16 <_vfiprintf_r+0xc6>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	1d19      	adds	r1, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	9103      	str	r1, [sp, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfbb      	ittet	lt
 8004d7c:	425b      	neglt	r3, r3
 8004d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d82:	9307      	strge	r3, [sp, #28]
 8004d84:	9307      	strlt	r3, [sp, #28]
 8004d86:	bfb8      	it	lt
 8004d88:	9204      	strlt	r2, [sp, #16]
 8004d8a:	7823      	ldrb	r3, [r4, #0]
 8004d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d8e:	d10c      	bne.n	8004daa <_vfiprintf_r+0x15a>
 8004d90:	7863      	ldrb	r3, [r4, #1]
 8004d92:	2b2a      	cmp	r3, #42	; 0x2a
 8004d94:	d134      	bne.n	8004e00 <_vfiprintf_r+0x1b0>
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	3402      	adds	r4, #2
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	9203      	str	r2, [sp, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bfb8      	it	lt
 8004da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e74 <_vfiprintf_r+0x224>
 8004dae:	2203      	movs	r2, #3
 8004db0:	4650      	mov	r0, sl
 8004db2:	7821      	ldrb	r1, [r4, #0]
 8004db4:	f000 fad4 	bl	8005360 <memchr>
 8004db8:	b138      	cbz	r0, 8004dca <_vfiprintf_r+0x17a>
 8004dba:	2240      	movs	r2, #64	; 0x40
 8004dbc:	9b04      	ldr	r3, [sp, #16]
 8004dbe:	eba0 000a 	sub.w	r0, r0, sl
 8004dc2:	4082      	lsls	r2, r0
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	3401      	adds	r4, #1
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dce:	2206      	movs	r2, #6
 8004dd0:	4829      	ldr	r0, [pc, #164]	; (8004e78 <_vfiprintf_r+0x228>)
 8004dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd6:	f000 fac3 	bl	8005360 <memchr>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d03f      	beq.n	8004e5e <_vfiprintf_r+0x20e>
 8004dde:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <_vfiprintf_r+0x22c>)
 8004de0:	bb1b      	cbnz	r3, 8004e2a <_vfiprintf_r+0x1da>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	3307      	adds	r3, #7
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	3308      	adds	r3, #8
 8004dec:	9303      	str	r3, [sp, #12]
 8004dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df0:	443b      	add	r3, r7
 8004df2:	9309      	str	r3, [sp, #36]	; 0x24
 8004df4:	e768      	b.n	8004cc8 <_vfiprintf_r+0x78>
 8004df6:	460c      	mov	r4, r1
 8004df8:	2001      	movs	r0, #1
 8004dfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfe:	e7a6      	b.n	8004d4e <_vfiprintf_r+0xfe>
 8004e00:	2300      	movs	r3, #0
 8004e02:	f04f 0c0a 	mov.w	ip, #10
 8004e06:	4619      	mov	r1, r3
 8004e08:	3401      	adds	r4, #1
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e12:	3a30      	subs	r2, #48	; 0x30
 8004e14:	2a09      	cmp	r2, #9
 8004e16:	d903      	bls.n	8004e20 <_vfiprintf_r+0x1d0>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0c6      	beq.n	8004daa <_vfiprintf_r+0x15a>
 8004e1c:	9105      	str	r1, [sp, #20]
 8004e1e:	e7c4      	b.n	8004daa <_vfiprintf_r+0x15a>
 8004e20:	4604      	mov	r4, r0
 8004e22:	2301      	movs	r3, #1
 8004e24:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e28:	e7f0      	b.n	8004e0c <_vfiprintf_r+0x1bc>
 8004e2a:	ab03      	add	r3, sp, #12
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	462a      	mov	r2, r5
 8004e30:	4630      	mov	r0, r6
 8004e32:	4b13      	ldr	r3, [pc, #76]	; (8004e80 <_vfiprintf_r+0x230>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	f3af 8000 	nop.w
 8004e3a:	4607      	mov	r7, r0
 8004e3c:	1c78      	adds	r0, r7, #1
 8004e3e:	d1d6      	bne.n	8004dee <_vfiprintf_r+0x19e>
 8004e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e42:	07d9      	lsls	r1, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_vfiprintf_r+0x202>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	059a      	lsls	r2, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_vfiprintf_r+0x202>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e4e:	f7fe fcab 	bl	80037a8 <__retarget_lock_release_recursive>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	065b      	lsls	r3, r3, #25
 8004e56:	f53f af1d 	bmi.w	8004c94 <_vfiprintf_r+0x44>
 8004e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e5c:	e71c      	b.n	8004c98 <_vfiprintf_r+0x48>
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4630      	mov	r0, r6
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <_vfiprintf_r+0x230>)
 8004e68:	a904      	add	r1, sp, #16
 8004e6a:	f000 f87d 	bl	8004f68 <_printf_i>
 8004e6e:	e7e4      	b.n	8004e3a <_vfiprintf_r+0x1ea>
 8004e70:	080058b5 	.word	0x080058b5
 8004e74:	080058bb 	.word	0x080058bb
 8004e78:	080058bf 	.word	0x080058bf
 8004e7c:	00000000 	.word	0x00000000
 8004e80:	08004c2d 	.word	0x08004c2d

08004e84 <_printf_common>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	4616      	mov	r6, r2
 8004e8a:	4699      	mov	r9, r3
 8004e8c:	688a      	ldr	r2, [r1, #8]
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	4607      	mov	r7, r0
 8004e92:	4293      	cmp	r3, r2
 8004e94:	bfb8      	it	lt
 8004e96:	4613      	movlt	r3, r2
 8004e98:	6033      	str	r3, [r6, #0]
 8004e9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea4:	b10a      	cbz	r2, 8004eaa <_printf_common+0x26>
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	0699      	lsls	r1, r3, #26
 8004eae:	bf42      	ittt	mi
 8004eb0:	6833      	ldrmi	r3, [r6, #0]
 8004eb2:	3302      	addmi	r3, #2
 8004eb4:	6033      	strmi	r3, [r6, #0]
 8004eb6:	6825      	ldr	r5, [r4, #0]
 8004eb8:	f015 0506 	ands.w	r5, r5, #6
 8004ebc:	d106      	bne.n	8004ecc <_printf_common+0x48>
 8004ebe:	f104 0a19 	add.w	sl, r4, #25
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	6832      	ldr	r2, [r6, #0]
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dc2b      	bgt.n	8004f24 <_printf_common+0xa0>
 8004ecc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ed0:	1e13      	subs	r3, r2, #0
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	bf18      	it	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	0692      	lsls	r2, r2, #26
 8004eda:	d430      	bmi.n	8004f3e <_printf_common+0xba>
 8004edc:	4649      	mov	r1, r9
 8004ede:	4638      	mov	r0, r7
 8004ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ee4:	47c0      	blx	r8
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d023      	beq.n	8004f32 <_printf_common+0xae>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	f003 0306 	and.w	r3, r3, #6
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	bf14      	ite	ne
 8004ef6:	2500      	movne	r5, #0
 8004ef8:	6833      	ldreq	r3, [r6, #0]
 8004efa:	f04f 0600 	mov.w	r6, #0
 8004efe:	bf08      	it	eq
 8004f00:	68e5      	ldreq	r5, [r4, #12]
 8004f02:	f104 041a 	add.w	r4, r4, #26
 8004f06:	bf08      	it	eq
 8004f08:	1aed      	subeq	r5, r5, r3
 8004f0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f0e:	bf08      	it	eq
 8004f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f14:	4293      	cmp	r3, r2
 8004f16:	bfc4      	itt	gt
 8004f18:	1a9b      	subgt	r3, r3, r2
 8004f1a:	18ed      	addgt	r5, r5, r3
 8004f1c:	42b5      	cmp	r5, r6
 8004f1e:	d11a      	bne.n	8004f56 <_printf_common+0xd2>
 8004f20:	2000      	movs	r0, #0
 8004f22:	e008      	b.n	8004f36 <_printf_common+0xb2>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4652      	mov	r2, sl
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4638      	mov	r0, r7
 8004f2c:	47c0      	blx	r8
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d103      	bne.n	8004f3a <_printf_common+0xb6>
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295
 8004f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3a:	3501      	adds	r5, #1
 8004f3c:	e7c1      	b.n	8004ec2 <_printf_common+0x3e>
 8004f3e:	2030      	movs	r0, #48	; 0x30
 8004f40:	18e1      	adds	r1, r4, r3
 8004f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f4c:	4422      	add	r2, r4
 8004f4e:	3302      	adds	r3, #2
 8004f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f54:	e7c2      	b.n	8004edc <_printf_common+0x58>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4622      	mov	r2, r4
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	47c0      	blx	r8
 8004f60:	3001      	adds	r0, #1
 8004f62:	d0e6      	beq.n	8004f32 <_printf_common+0xae>
 8004f64:	3601      	adds	r6, #1
 8004f66:	e7d9      	b.n	8004f1c <_printf_common+0x98>

08004f68 <_printf_i>:
 8004f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	7e0f      	ldrb	r7, [r1, #24]
 8004f6e:	4691      	mov	r9, r2
 8004f70:	2f78      	cmp	r7, #120	; 0x78
 8004f72:	4680      	mov	r8, r0
 8004f74:	460c      	mov	r4, r1
 8004f76:	469a      	mov	sl, r3
 8004f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f7e:	d807      	bhi.n	8004f90 <_printf_i+0x28>
 8004f80:	2f62      	cmp	r7, #98	; 0x62
 8004f82:	d80a      	bhi.n	8004f9a <_printf_i+0x32>
 8004f84:	2f00      	cmp	r7, #0
 8004f86:	f000 80d5 	beq.w	8005134 <_printf_i+0x1cc>
 8004f8a:	2f58      	cmp	r7, #88	; 0x58
 8004f8c:	f000 80c1 	beq.w	8005112 <_printf_i+0x1aa>
 8004f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f98:	e03a      	b.n	8005010 <_printf_i+0xa8>
 8004f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f9e:	2b15      	cmp	r3, #21
 8004fa0:	d8f6      	bhi.n	8004f90 <_printf_i+0x28>
 8004fa2:	a101      	add	r1, pc, #4	; (adr r1, 8004fa8 <_printf_i+0x40>)
 8004fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa8:	08005001 	.word	0x08005001
 8004fac:	08005015 	.word	0x08005015
 8004fb0:	08004f91 	.word	0x08004f91
 8004fb4:	08004f91 	.word	0x08004f91
 8004fb8:	08004f91 	.word	0x08004f91
 8004fbc:	08004f91 	.word	0x08004f91
 8004fc0:	08005015 	.word	0x08005015
 8004fc4:	08004f91 	.word	0x08004f91
 8004fc8:	08004f91 	.word	0x08004f91
 8004fcc:	08004f91 	.word	0x08004f91
 8004fd0:	08004f91 	.word	0x08004f91
 8004fd4:	0800511b 	.word	0x0800511b
 8004fd8:	08005041 	.word	0x08005041
 8004fdc:	080050d5 	.word	0x080050d5
 8004fe0:	08004f91 	.word	0x08004f91
 8004fe4:	08004f91 	.word	0x08004f91
 8004fe8:	0800513d 	.word	0x0800513d
 8004fec:	08004f91 	.word	0x08004f91
 8004ff0:	08005041 	.word	0x08005041
 8004ff4:	08004f91 	.word	0x08004f91
 8004ff8:	08004f91 	.word	0x08004f91
 8004ffc:	080050dd 	.word	0x080050dd
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	1d1a      	adds	r2, r3, #4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	602a      	str	r2, [r5, #0]
 8005008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800500c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005010:	2301      	movs	r3, #1
 8005012:	e0a0      	b.n	8005156 <_printf_i+0x1ee>
 8005014:	6820      	ldr	r0, [r4, #0]
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	0607      	lsls	r7, r0, #24
 800501a:	f103 0104 	add.w	r1, r3, #4
 800501e:	6029      	str	r1, [r5, #0]
 8005020:	d501      	bpl.n	8005026 <_printf_i+0xbe>
 8005022:	681e      	ldr	r6, [r3, #0]
 8005024:	e003      	b.n	800502e <_printf_i+0xc6>
 8005026:	0646      	lsls	r6, r0, #25
 8005028:	d5fb      	bpl.n	8005022 <_printf_i+0xba>
 800502a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800502e:	2e00      	cmp	r6, #0
 8005030:	da03      	bge.n	800503a <_printf_i+0xd2>
 8005032:	232d      	movs	r3, #45	; 0x2d
 8005034:	4276      	negs	r6, r6
 8005036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503a:	230a      	movs	r3, #10
 800503c:	4859      	ldr	r0, [pc, #356]	; (80051a4 <_printf_i+0x23c>)
 800503e:	e012      	b.n	8005066 <_printf_i+0xfe>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	6820      	ldr	r0, [r4, #0]
 8005044:	1d19      	adds	r1, r3, #4
 8005046:	6029      	str	r1, [r5, #0]
 8005048:	0605      	lsls	r5, r0, #24
 800504a:	d501      	bpl.n	8005050 <_printf_i+0xe8>
 800504c:	681e      	ldr	r6, [r3, #0]
 800504e:	e002      	b.n	8005056 <_printf_i+0xee>
 8005050:	0641      	lsls	r1, r0, #25
 8005052:	d5fb      	bpl.n	800504c <_printf_i+0xe4>
 8005054:	881e      	ldrh	r6, [r3, #0]
 8005056:	2f6f      	cmp	r7, #111	; 0x6f
 8005058:	bf0c      	ite	eq
 800505a:	2308      	moveq	r3, #8
 800505c:	230a      	movne	r3, #10
 800505e:	4851      	ldr	r0, [pc, #324]	; (80051a4 <_printf_i+0x23c>)
 8005060:	2100      	movs	r1, #0
 8005062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005066:	6865      	ldr	r5, [r4, #4]
 8005068:	2d00      	cmp	r5, #0
 800506a:	bfa8      	it	ge
 800506c:	6821      	ldrge	r1, [r4, #0]
 800506e:	60a5      	str	r5, [r4, #8]
 8005070:	bfa4      	itt	ge
 8005072:	f021 0104 	bicge.w	r1, r1, #4
 8005076:	6021      	strge	r1, [r4, #0]
 8005078:	b90e      	cbnz	r6, 800507e <_printf_i+0x116>
 800507a:	2d00      	cmp	r5, #0
 800507c:	d04b      	beq.n	8005116 <_printf_i+0x1ae>
 800507e:	4615      	mov	r5, r2
 8005080:	fbb6 f1f3 	udiv	r1, r6, r3
 8005084:	fb03 6711 	mls	r7, r3, r1, r6
 8005088:	5dc7      	ldrb	r7, [r0, r7]
 800508a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800508e:	4637      	mov	r7, r6
 8005090:	42bb      	cmp	r3, r7
 8005092:	460e      	mov	r6, r1
 8005094:	d9f4      	bls.n	8005080 <_printf_i+0x118>
 8005096:	2b08      	cmp	r3, #8
 8005098:	d10b      	bne.n	80050b2 <_printf_i+0x14a>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	07de      	lsls	r6, r3, #31
 800509e:	d508      	bpl.n	80050b2 <_printf_i+0x14a>
 80050a0:	6923      	ldr	r3, [r4, #16]
 80050a2:	6861      	ldr	r1, [r4, #4]
 80050a4:	4299      	cmp	r1, r3
 80050a6:	bfde      	ittt	le
 80050a8:	2330      	movle	r3, #48	; 0x30
 80050aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050b2:	1b52      	subs	r2, r2, r5
 80050b4:	6122      	str	r2, [r4, #16]
 80050b6:	464b      	mov	r3, r9
 80050b8:	4621      	mov	r1, r4
 80050ba:	4640      	mov	r0, r8
 80050bc:	f8cd a000 	str.w	sl, [sp]
 80050c0:	aa03      	add	r2, sp, #12
 80050c2:	f7ff fedf 	bl	8004e84 <_printf_common>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d14a      	bne.n	8005160 <_printf_i+0x1f8>
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295
 80050ce:	b004      	add	sp, #16
 80050d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	f043 0320 	orr.w	r3, r3, #32
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	2778      	movs	r7, #120	; 0x78
 80050de:	4832      	ldr	r0, [pc, #200]	; (80051a8 <_printf_i+0x240>)
 80050e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	6829      	ldr	r1, [r5, #0]
 80050e8:	061f      	lsls	r7, r3, #24
 80050ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80050ee:	d402      	bmi.n	80050f6 <_printf_i+0x18e>
 80050f0:	065f      	lsls	r7, r3, #25
 80050f2:	bf48      	it	mi
 80050f4:	b2b6      	uxthmi	r6, r6
 80050f6:	07df      	lsls	r7, r3, #31
 80050f8:	bf48      	it	mi
 80050fa:	f043 0320 	orrmi.w	r3, r3, #32
 80050fe:	6029      	str	r1, [r5, #0]
 8005100:	bf48      	it	mi
 8005102:	6023      	strmi	r3, [r4, #0]
 8005104:	b91e      	cbnz	r6, 800510e <_printf_i+0x1a6>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f023 0320 	bic.w	r3, r3, #32
 800510c:	6023      	str	r3, [r4, #0]
 800510e:	2310      	movs	r3, #16
 8005110:	e7a6      	b.n	8005060 <_printf_i+0xf8>
 8005112:	4824      	ldr	r0, [pc, #144]	; (80051a4 <_printf_i+0x23c>)
 8005114:	e7e4      	b.n	80050e0 <_printf_i+0x178>
 8005116:	4615      	mov	r5, r2
 8005118:	e7bd      	b.n	8005096 <_printf_i+0x12e>
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	6826      	ldr	r6, [r4, #0]
 800511e:	1d18      	adds	r0, r3, #4
 8005120:	6961      	ldr	r1, [r4, #20]
 8005122:	6028      	str	r0, [r5, #0]
 8005124:	0635      	lsls	r5, r6, #24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	d501      	bpl.n	800512e <_printf_i+0x1c6>
 800512a:	6019      	str	r1, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0x1cc>
 800512e:	0670      	lsls	r0, r6, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0x1c2>
 8005132:	8019      	strh	r1, [r3, #0]
 8005134:	2300      	movs	r3, #0
 8005136:	4615      	mov	r5, r2
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	e7bc      	b.n	80050b6 <_printf_i+0x14e>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	2100      	movs	r1, #0
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	4628      	mov	r0, r5
 800514a:	f000 f909 	bl	8005360 <memchr>
 800514e:	b108      	cbz	r0, 8005154 <_printf_i+0x1ec>
 8005150:	1b40      	subs	r0, r0, r5
 8005152:	6060      	str	r0, [r4, #4]
 8005154:	6863      	ldr	r3, [r4, #4]
 8005156:	6123      	str	r3, [r4, #16]
 8005158:	2300      	movs	r3, #0
 800515a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800515e:	e7aa      	b.n	80050b6 <_printf_i+0x14e>
 8005160:	462a      	mov	r2, r5
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	47d0      	blx	sl
 800516a:	3001      	adds	r0, #1
 800516c:	d0ad      	beq.n	80050ca <_printf_i+0x162>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	079b      	lsls	r3, r3, #30
 8005172:	d413      	bmi.n	800519c <_printf_i+0x234>
 8005174:	68e0      	ldr	r0, [r4, #12]
 8005176:	9b03      	ldr	r3, [sp, #12]
 8005178:	4298      	cmp	r0, r3
 800517a:	bfb8      	it	lt
 800517c:	4618      	movlt	r0, r3
 800517e:	e7a6      	b.n	80050ce <_printf_i+0x166>
 8005180:	2301      	movs	r3, #1
 8005182:	4632      	mov	r2, r6
 8005184:	4649      	mov	r1, r9
 8005186:	4640      	mov	r0, r8
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d09d      	beq.n	80050ca <_printf_i+0x162>
 800518e:	3501      	adds	r5, #1
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	9903      	ldr	r1, [sp, #12]
 8005194:	1a5b      	subs	r3, r3, r1
 8005196:	42ab      	cmp	r3, r5
 8005198:	dcf2      	bgt.n	8005180 <_printf_i+0x218>
 800519a:	e7eb      	b.n	8005174 <_printf_i+0x20c>
 800519c:	2500      	movs	r5, #0
 800519e:	f104 0619 	add.w	r6, r4, #25
 80051a2:	e7f5      	b.n	8005190 <_printf_i+0x228>
 80051a4:	080058c6 	.word	0x080058c6
 80051a8:	080058d7 	.word	0x080058d7

080051ac <__swbuf_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	460e      	mov	r6, r1
 80051b0:	4614      	mov	r4, r2
 80051b2:	4605      	mov	r5, r0
 80051b4:	b118      	cbz	r0, 80051be <__swbuf_r+0x12>
 80051b6:	6a03      	ldr	r3, [r0, #32]
 80051b8:	b90b      	cbnz	r3, 80051be <__swbuf_r+0x12>
 80051ba:	f7fe f981 	bl	80034c0 <__sinit>
 80051be:	69a3      	ldr	r3, [r4, #24]
 80051c0:	60a3      	str	r3, [r4, #8]
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	071a      	lsls	r2, r3, #28
 80051c6:	d525      	bpl.n	8005214 <__swbuf_r+0x68>
 80051c8:	6923      	ldr	r3, [r4, #16]
 80051ca:	b31b      	cbz	r3, 8005214 <__swbuf_r+0x68>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	6922      	ldr	r2, [r4, #16]
 80051d0:	b2f6      	uxtb	r6, r6
 80051d2:	1a98      	subs	r0, r3, r2
 80051d4:	6963      	ldr	r3, [r4, #20]
 80051d6:	4637      	mov	r7, r6
 80051d8:	4283      	cmp	r3, r0
 80051da:	dc04      	bgt.n	80051e6 <__swbuf_r+0x3a>
 80051dc:	4621      	mov	r1, r4
 80051de:	4628      	mov	r0, r5
 80051e0:	f7ff fcaa 	bl	8004b38 <_fflush_r>
 80051e4:	b9e0      	cbnz	r0, 8005220 <__swbuf_r+0x74>
 80051e6:	68a3      	ldr	r3, [r4, #8]
 80051e8:	3b01      	subs	r3, #1
 80051ea:	60a3      	str	r3, [r4, #8]
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	6022      	str	r2, [r4, #0]
 80051f2:	701e      	strb	r6, [r3, #0]
 80051f4:	6962      	ldr	r2, [r4, #20]
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d004      	beq.n	8005206 <__swbuf_r+0x5a>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	07db      	lsls	r3, r3, #31
 8005200:	d506      	bpl.n	8005210 <__swbuf_r+0x64>
 8005202:	2e0a      	cmp	r6, #10
 8005204:	d104      	bne.n	8005210 <__swbuf_r+0x64>
 8005206:	4621      	mov	r1, r4
 8005208:	4628      	mov	r0, r5
 800520a:	f7ff fc95 	bl	8004b38 <_fflush_r>
 800520e:	b938      	cbnz	r0, 8005220 <__swbuf_r+0x74>
 8005210:	4638      	mov	r0, r7
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005214:	4621      	mov	r1, r4
 8005216:	4628      	mov	r0, r5
 8005218:	f000 f806 	bl	8005228 <__swsetup_r>
 800521c:	2800      	cmp	r0, #0
 800521e:	d0d5      	beq.n	80051cc <__swbuf_r+0x20>
 8005220:	f04f 37ff 	mov.w	r7, #4294967295
 8005224:	e7f4      	b.n	8005210 <__swbuf_r+0x64>
	...

08005228 <__swsetup_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <__swsetup_r+0xac>)
 800522c:	4605      	mov	r5, r0
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	460c      	mov	r4, r1
 8005232:	b118      	cbz	r0, 800523c <__swsetup_r+0x14>
 8005234:	6a03      	ldr	r3, [r0, #32]
 8005236:	b90b      	cbnz	r3, 800523c <__swsetup_r+0x14>
 8005238:	f7fe f942 	bl	80034c0 <__sinit>
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005242:	0718      	lsls	r0, r3, #28
 8005244:	d422      	bmi.n	800528c <__swsetup_r+0x64>
 8005246:	06d9      	lsls	r1, r3, #27
 8005248:	d407      	bmi.n	800525a <__swsetup_r+0x32>
 800524a:	2309      	movs	r3, #9
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005252:	f04f 30ff 	mov.w	r0, #4294967295
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	e034      	b.n	80052c4 <__swsetup_r+0x9c>
 800525a:	0758      	lsls	r0, r3, #29
 800525c:	d512      	bpl.n	8005284 <__swsetup_r+0x5c>
 800525e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005260:	b141      	cbz	r1, 8005274 <__swsetup_r+0x4c>
 8005262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005266:	4299      	cmp	r1, r3
 8005268:	d002      	beq.n	8005270 <__swsetup_r+0x48>
 800526a:	4628      	mov	r0, r5
 800526c:	f7fe fad0 	bl	8003810 <_free_r>
 8005270:	2300      	movs	r3, #0
 8005272:	6363      	str	r3, [r4, #52]	; 0x34
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	2300      	movs	r3, #0
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	6023      	str	r3, [r4, #0]
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	f043 0308 	orr.w	r3, r3, #8
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	b94b      	cbnz	r3, 80052a4 <__swsetup_r+0x7c>
 8005290:	89a3      	ldrh	r3, [r4, #12]
 8005292:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800529a:	d003      	beq.n	80052a4 <__swsetup_r+0x7c>
 800529c:	4621      	mov	r1, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 f891 	bl	80053c6 <__smakebuf_r>
 80052a4:	89a0      	ldrh	r0, [r4, #12]
 80052a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052aa:	f010 0301 	ands.w	r3, r0, #1
 80052ae:	d00a      	beq.n	80052c6 <__swsetup_r+0x9e>
 80052b0:	2300      	movs	r3, #0
 80052b2:	60a3      	str	r3, [r4, #8]
 80052b4:	6963      	ldr	r3, [r4, #20]
 80052b6:	425b      	negs	r3, r3
 80052b8:	61a3      	str	r3, [r4, #24]
 80052ba:	6923      	ldr	r3, [r4, #16]
 80052bc:	b943      	cbnz	r3, 80052d0 <__swsetup_r+0xa8>
 80052be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052c2:	d1c4      	bne.n	800524e <__swsetup_r+0x26>
 80052c4:	bd38      	pop	{r3, r4, r5, pc}
 80052c6:	0781      	lsls	r1, r0, #30
 80052c8:	bf58      	it	pl
 80052ca:	6963      	ldrpl	r3, [r4, #20]
 80052cc:	60a3      	str	r3, [r4, #8]
 80052ce:	e7f4      	b.n	80052ba <__swsetup_r+0x92>
 80052d0:	2000      	movs	r0, #0
 80052d2:	e7f7      	b.n	80052c4 <__swsetup_r+0x9c>
 80052d4:	200001ec 	.word	0x200001ec

080052d8 <_raise_r>:
 80052d8:	291f      	cmp	r1, #31
 80052da:	b538      	push	{r3, r4, r5, lr}
 80052dc:	4604      	mov	r4, r0
 80052de:	460d      	mov	r5, r1
 80052e0:	d904      	bls.n	80052ec <_raise_r+0x14>
 80052e2:	2316      	movs	r3, #22
 80052e4:	6003      	str	r3, [r0, #0]
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80052ee:	b112      	cbz	r2, 80052f6 <_raise_r+0x1e>
 80052f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052f4:	b94b      	cbnz	r3, 800530a <_raise_r+0x32>
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 f830 	bl	800535c <_getpid_r>
 80052fc:	462a      	mov	r2, r5
 80052fe:	4601      	mov	r1, r0
 8005300:	4620      	mov	r0, r4
 8005302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005306:	f000 b817 	b.w	8005338 <_kill_r>
 800530a:	2b01      	cmp	r3, #1
 800530c:	d00a      	beq.n	8005324 <_raise_r+0x4c>
 800530e:	1c59      	adds	r1, r3, #1
 8005310:	d103      	bne.n	800531a <_raise_r+0x42>
 8005312:	2316      	movs	r3, #22
 8005314:	6003      	str	r3, [r0, #0]
 8005316:	2001      	movs	r0, #1
 8005318:	e7e7      	b.n	80052ea <_raise_r+0x12>
 800531a:	2400      	movs	r4, #0
 800531c:	4628      	mov	r0, r5
 800531e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005322:	4798      	blx	r3
 8005324:	2000      	movs	r0, #0
 8005326:	e7e0      	b.n	80052ea <_raise_r+0x12>

08005328 <raise>:
 8005328:	4b02      	ldr	r3, [pc, #8]	; (8005334 <raise+0xc>)
 800532a:	4601      	mov	r1, r0
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	f7ff bfd3 	b.w	80052d8 <_raise_r>
 8005332:	bf00      	nop
 8005334:	200001ec 	.word	0x200001ec

08005338 <_kill_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	2300      	movs	r3, #0
 800533c:	4d06      	ldr	r5, [pc, #24]	; (8005358 <_kill_r+0x20>)
 800533e:	4604      	mov	r4, r0
 8005340:	4608      	mov	r0, r1
 8005342:	4611      	mov	r1, r2
 8005344:	602b      	str	r3, [r5, #0]
 8005346:	f7fc f99f 	bl	8001688 <_kill>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	d102      	bne.n	8005354 <_kill_r+0x1c>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	b103      	cbz	r3, 8005354 <_kill_r+0x1c>
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	bd38      	pop	{r3, r4, r5, pc}
 8005356:	bf00      	nop
 8005358:	200003c4 	.word	0x200003c4

0800535c <_getpid_r>:
 800535c:	f7fc b98d 	b.w	800167a <_getpid>

08005360 <memchr>:
 8005360:	4603      	mov	r3, r0
 8005362:	b510      	push	{r4, lr}
 8005364:	b2c9      	uxtb	r1, r1
 8005366:	4402      	add	r2, r0
 8005368:	4293      	cmp	r3, r2
 800536a:	4618      	mov	r0, r3
 800536c:	d101      	bne.n	8005372 <memchr+0x12>
 800536e:	2000      	movs	r0, #0
 8005370:	e003      	b.n	800537a <memchr+0x1a>
 8005372:	7804      	ldrb	r4, [r0, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	428c      	cmp	r4, r1
 8005378:	d1f6      	bne.n	8005368 <memchr+0x8>
 800537a:	bd10      	pop	{r4, pc}

0800537c <__swhatbuf_r>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	460c      	mov	r4, r1
 8005380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005384:	4615      	mov	r5, r2
 8005386:	2900      	cmp	r1, #0
 8005388:	461e      	mov	r6, r3
 800538a:	b096      	sub	sp, #88	; 0x58
 800538c:	da0c      	bge.n	80053a8 <__swhatbuf_r+0x2c>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	2100      	movs	r1, #0
 8005392:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005396:	bf0c      	ite	eq
 8005398:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800539c:	2340      	movne	r3, #64	; 0x40
 800539e:	2000      	movs	r0, #0
 80053a0:	6031      	str	r1, [r6, #0]
 80053a2:	602b      	str	r3, [r5, #0]
 80053a4:	b016      	add	sp, #88	; 0x58
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	466a      	mov	r2, sp
 80053aa:	f000 f849 	bl	8005440 <_fstat_r>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	dbed      	blt.n	800538e <__swhatbuf_r+0x12>
 80053b2:	9901      	ldr	r1, [sp, #4]
 80053b4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80053b8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80053bc:	4259      	negs	r1, r3
 80053be:	4159      	adcs	r1, r3
 80053c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c4:	e7eb      	b.n	800539e <__swhatbuf_r+0x22>

080053c6 <__smakebuf_r>:
 80053c6:	898b      	ldrh	r3, [r1, #12]
 80053c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053ca:	079d      	lsls	r5, r3, #30
 80053cc:	4606      	mov	r6, r0
 80053ce:	460c      	mov	r4, r1
 80053d0:	d507      	bpl.n	80053e2 <__smakebuf_r+0x1c>
 80053d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	6123      	str	r3, [r4, #16]
 80053da:	2301      	movs	r3, #1
 80053dc:	6163      	str	r3, [r4, #20]
 80053de:	b002      	add	sp, #8
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
 80053e2:	466a      	mov	r2, sp
 80053e4:	ab01      	add	r3, sp, #4
 80053e6:	f7ff ffc9 	bl	800537c <__swhatbuf_r>
 80053ea:	9900      	ldr	r1, [sp, #0]
 80053ec:	4605      	mov	r5, r0
 80053ee:	4630      	mov	r0, r6
 80053f0:	f7fe fdd8 	bl	8003fa4 <_malloc_r>
 80053f4:	b948      	cbnz	r0, 800540a <__smakebuf_r+0x44>
 80053f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053fa:	059a      	lsls	r2, r3, #22
 80053fc:	d4ef      	bmi.n	80053de <__smakebuf_r+0x18>
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	f043 0302 	orr.w	r3, r3, #2
 8005406:	81a3      	strh	r3, [r4, #12]
 8005408:	e7e3      	b.n	80053d2 <__smakebuf_r+0xc>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	6020      	str	r0, [r4, #0]
 800540e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	9b00      	ldr	r3, [sp, #0]
 8005416:	6120      	str	r0, [r4, #16]
 8005418:	6163      	str	r3, [r4, #20]
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	b15b      	cbz	r3, 8005436 <__smakebuf_r+0x70>
 800541e:	4630      	mov	r0, r6
 8005420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005424:	f000 f81e 	bl	8005464 <_isatty_r>
 8005428:	b128      	cbz	r0, 8005436 <__smakebuf_r+0x70>
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	f023 0303 	bic.w	r3, r3, #3
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	431d      	orrs	r5, r3
 800543a:	81a5      	strh	r5, [r4, #12]
 800543c:	e7cf      	b.n	80053de <__smakebuf_r+0x18>
	...

08005440 <_fstat_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	2300      	movs	r3, #0
 8005444:	4d06      	ldr	r5, [pc, #24]	; (8005460 <_fstat_r+0x20>)
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	602b      	str	r3, [r5, #0]
 800544e:	f7fc f979 	bl	8001744 <_fstat>
 8005452:	1c43      	adds	r3, r0, #1
 8005454:	d102      	bne.n	800545c <_fstat_r+0x1c>
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	b103      	cbz	r3, 800545c <_fstat_r+0x1c>
 800545a:	6023      	str	r3, [r4, #0]
 800545c:	bd38      	pop	{r3, r4, r5, pc}
 800545e:	bf00      	nop
 8005460:	200003c4 	.word	0x200003c4

08005464 <_isatty_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	2300      	movs	r3, #0
 8005468:	4d05      	ldr	r5, [pc, #20]	; (8005480 <_isatty_r+0x1c>)
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	602b      	str	r3, [r5, #0]
 8005470:	f7fc f977 	bl	8001762 <_isatty>
 8005474:	1c43      	adds	r3, r0, #1
 8005476:	d102      	bne.n	800547e <_isatty_r+0x1a>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	b103      	cbz	r3, 800547e <_isatty_r+0x1a>
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	200003c4 	.word	0x200003c4

08005484 <_init>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr

08005490 <_fini>:
 8005490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005492:	bf00      	nop
 8005494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005496:	bc08      	pop	{r3}
 8005498:	469e      	mov	lr, r3
 800549a:	4770      	bx	lr
